[{"C:\\projects\\kijiji\\server\\client\\src\\index.tsx":"1","C:\\projects\\kijiji\\server\\client\\src\\components\\App.tsx":"2","C:\\projects\\kijiji\\server\\client\\src\\browserHistory.tsx":"3","C:\\projects\\kijiji\\server\\client\\src\\components\\Routes.tsx":"4","C:\\projects\\kijiji\\server\\client\\src\\components\\Header.tsx":"5","C:\\projects\\kijiji\\server\\client\\src\\Root.tsx":"6","C:\\projects\\kijiji\\server\\client\\src\\reducers\\index.tsx":"7","C:\\projects\\kijiji\\server\\client\\src\\components\\PostAd.tsx":"8","C:\\projects\\kijiji\\server\\client\\src\\components\\Register.tsx":"9","C:\\projects\\kijiji\\server\\client\\src\\components\\SignIn.tsx":"10","C:\\projects\\kijiji\\server\\client\\src\\reducers\\authReducer.tsx":"11","C:\\projects\\kijiji\\server\\client\\src\\components\\requireAuth.tsx":"12","C:\\projects\\kijiji\\server\\client\\src\\components\\RegisterForm.tsx":"13","C:\\projects\\kijiji\\server\\client\\src\\components\\SignInForm.tsx":"14","C:\\projects\\kijiji\\server\\client\\src\\actions\\index.tsx":"15","C:\\projects\\kijiji\\server\\client\\src\\actions\\types.tsx":"16","C:\\projects\\kijiji\\server\\client\\src\\actions\\auth.tsx":"17","C:\\projects\\kijiji\\server\\client\\src\\actions\\axiosConfig.tsx":"18","C:\\projects\\kijiji\\server\\client\\src\\CookieService.tsx":"19","C:\\projects\\kijiji\\server\\client\\src\\reducers\\categoryReducer.tsx":"20","C:\\projects\\kijiji\\server\\client\\src\\reducers\\listingReducer.tsx":"21","C:\\projects\\kijiji\\server\\client\\src\\actions\\listing.tsx":"22","C:\\projects\\kijiji\\server\\client\\src\\components\\Loading.tsx":"23","C:\\projects\\kijiji\\server\\client\\src\\constants.tsx":"24","C:\\projects\\kijiji\\server\\client\\src\\components\\Listings.tsx":"25","C:\\projects\\kijiji\\server\\client\\src\\components\\Listing.tsx":"26","C:\\projects\\kijiji\\server\\client\\src\\components\\Pagination.tsx":"27","C:\\projects\\kijiji\\server\\client\\src\\components\\Searchbar.tsx":"28","C:\\projects\\kijiji\\server\\client\\src\\windowDimensions.tsx":"29","C:\\projects\\kijiji\\server\\client\\src\\components\\Modal.tsx":"30","C:\\projects\\kijiji\\server\\client\\src\\components\\SearchFilterForm.tsx":"31","C:\\projects\\kijiji\\server\\client\\src\\components\\LoadingDots.tsx":"32","C:\\projects\\kijiji\\server\\client\\src\\components\\ListingDetail.tsx":"33","C:\\projects\\kijiji\\server\\client\\src\\components\\Profile.tsx":"34","C:\\projects\\kijiji\\server\\client\\src\\reducers\\profileReducer.tsx":"35","C:\\projects\\kijiji\\server\\client\\src\\actions\\profile.tsx":"36","C:\\projects\\kijiji\\server\\client\\src\\components\\EditAd.tsx":"37","C:\\projects\\kijiji\\server\\client\\src\\components\\EditOrPostAdForm.tsx":"38"},{"size":317,"mtime":1608593598124,"results":"39","hashOfConfig":"40"},{"size":364,"mtime":1607913470313,"results":"41","hashOfConfig":"40"},{"size":89,"mtime":1607912608008,"results":"42","hashOfConfig":"40"},{"size":1071,"mtime":1611097135824,"results":"43","hashOfConfig":"40"},{"size":4107,"mtime":1611178693703,"results":"44","hashOfConfig":"40"},{"size":1832,"mtime":1608593598103,"results":"45","hashOfConfig":"40"},{"size":817,"mtime":1611190971629,"results":"46","hashOfConfig":"40"},{"size":1876,"mtime":1611192389626,"results":"47","hashOfConfig":"40"},{"size":2585,"mtime":1611173993285,"results":"48","hashOfConfig":"40"},{"size":2087,"mtime":1611173916279,"results":"49","hashOfConfig":"40"},{"size":954,"mtime":1609367265394,"results":"50","hashOfConfig":"40"},{"size":1791,"mtime":1608593598118,"results":"51","hashOfConfig":"40"},{"size":6636,"mtime":1609367265379,"results":"52","hashOfConfig":"40"},{"size":5098,"mtime":1608593598117,"results":"53","hashOfConfig":"40"},{"size":107,"mtime":1610646702147,"results":"54","hashOfConfig":"40"},{"size":1331,"mtime":1611178746903,"results":"55","hashOfConfig":"40"},{"size":3161,"mtime":1610761461680,"results":"56","hashOfConfig":"40"},{"size":3816,"mtime":1609367265357,"results":"57","hashOfConfig":"40"},{"size":1288,"mtime":1608593598101,"results":"58","hashOfConfig":"40"},{"size":476,"mtime":1611190354518,"results":"59","hashOfConfig":"40"},{"size":1381,"mtime":1611190949768,"results":"60","hashOfConfig":"40"},{"size":13118,"mtime":1611190709668,"results":"61","hashOfConfig":"40"},{"size":244,"mtime":1609367265371,"results":"62","hashOfConfig":"40"},{"size":11158,"mtime":1610761461693,"results":"63","hashOfConfig":"40"},{"size":9862,"mtime":1611194005875,"results":"64","hashOfConfig":"40"},{"size":3033,"mtime":1611193366377,"results":"65","hashOfConfig":"40"},{"size":1796,"mtime":1610399332832,"results":"66","hashOfConfig":"40"},{"size":6987,"mtime":1611194290493,"results":"67","hashOfConfig":"40"},{"size":727,"mtime":1610399332854,"results":"68","hashOfConfig":"40"},{"size":1281,"mtime":1611194345476,"results":"69","hashOfConfig":"40"},{"size":5955,"mtime":1610399332839,"results":"70","hashOfConfig":"40"},{"size":224,"mtime":1610399332829,"results":"71","hashOfConfig":"40"},{"size":6530,"mtime":1611193949481,"results":"72","hashOfConfig":"40"},{"size":3720,"mtime":1611097135823,"results":"73","hashOfConfig":"40"},{"size":655,"mtime":1611190676246,"results":"74","hashOfConfig":"40"},{"size":1427,"mtime":1611190830051,"results":"75","hashOfConfig":"40"},{"size":5150,"mtime":1611180341528,"results":"76","hashOfConfig":"40"},{"size":17760,"mtime":1611193262712,"results":"77","hashOfConfig":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},"1pba2ji",{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"80"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"80"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"80"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"80"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"80"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"80"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"80"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"80"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"80"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"140","messages":"141","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"80"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"80"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"80"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"157","messages":"158","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"80"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"80"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\projects\\kijiji\\server\\client\\src\\index.tsx",[],["169","170"],"C:\\projects\\kijiji\\server\\client\\src\\components\\App.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\browserHistory.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\components\\Routes.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\components\\Header.tsx",["171"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport history from \"../browserHistory\";\r\nimport { connect } from \"react-redux\";\r\nimport { signOut } from \"../actions\";\r\nimport { StoreState } from \"../reducers\";\r\nimport Searchbar from \"./Searchbar\";\r\nimport useWindowDimensions from \"../windowDimensions\";\r\nimport { MED_SCREEN_SIZE } from \"../constants\";\r\nimport kijijiLogo from \"../img/kijijiLogo.png\";\r\n\r\ninterface IHeader {\r\n    authStatus?: string | null;\r\n    signOut(): void;\r\n}\r\n\r\nconst Header: React.FC<IHeader> = (props) => {\r\n    const { width } = useWindowDimensions();\r\n\r\n    return (\r\n        <nav>\r\n            <div className=\"headerInfoWrap\">\r\n                <img\r\n                    className=\"logo\"\r\n                    src={kijijiLogo}\r\n                    alt=\"logo\"\r\n                    data-testid=\"kijijiLogo\"\r\n                    onClick={() => history.push(\"/listings/1\")}\r\n                />\r\n\r\n                <div\r\n                    className={\r\n                        width > MED_SCREEN_SIZE\r\n                            ? \"displaySearchbar\"\r\n                            : \"hideSearchbar\"\r\n                    }\r\n                >\r\n                    <Searchbar />\r\n                </div>\r\n                {/* {width > MED_SCREEN_SIZE ? <Searchbar /> : null} */}\r\n\r\n                <div className=\"headerProfileAndPostWrap\">\r\n                    <h1\r\n                        className={\r\n                            props.authStatus\r\n                                ? \"navAuthStatusHide\"\r\n                                : \"navAuthStatus\"\r\n                        }\r\n                        onClick={() => {\r\n                            history.push(\"/signup\");\r\n                        }}\r\n                    >\r\n                        Register\r\n                    </h1>\r\n                    <h1\r\n                        className={\r\n                            props.authStatus\r\n                                ? \"navAuthStatusHide\"\r\n                                : \"navAuthStatus\"\r\n                        }\r\n                        onClick={() => {\r\n                            history.push(\"/signin\");\r\n                        }}\r\n                    >\r\n                        Sign in\r\n                    </h1>\r\n                    <h1\r\n                        className={\r\n                            props.authStatus\r\n                                ? \"navAuthStatus\"\r\n                                : \"navAuthStatusHide\"\r\n                        }\r\n                        onClick={() => {\r\n                            props.signOut();\r\n                        }}\r\n                    >\r\n                        Sign Out\r\n                    </h1>\r\n                    <h1\r\n                        className={\r\n                            props.authStatus\r\n                                ? \"profileText\"\r\n                                : \"navAuthStatusHide\"\r\n                        }\r\n                        onClick={() => {\r\n                            history.push(\"/profile\");\r\n                        }}\r\n                    >\r\n                        Profile\r\n                    </h1>\r\n\r\n                    <button\r\n                        onClick={() => {\r\n                            history.push(\"/post-ad\");\r\n                        }}\r\n                        className=\"postAdButton\"\r\n                    >\r\n                        Post Ad\r\n                    </button>\r\n                </div>\r\n\r\n                <div\r\n                    className={\r\n                        width < MED_SCREEN_SIZE\r\n                            ? \"displaySearchbar\"\r\n                            : \"hideSearchbar\"\r\n                    }\r\n                >\r\n                    <Searchbar />\r\n                </div>\r\n\r\n                {/* {width < MED_SCREEN_SIZE ? <Searchbar /> : null} */}\r\n            </div>\r\n        </nav>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: StoreState) => {\r\n    return {\r\n        authStatus: state.authStatus.authenticated,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, { signOut })(Header);\r\n","C:\\projects\\kijiji\\server\\client\\src\\Root.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\reducers\\index.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\components\\PostAd.tsx",["172","173","174","175","176","177","178","179"],"C:\\projects\\kijiji\\server\\client\\src\\components\\Register.tsx",["180"],"import React, { useEffect } from \"react\";\r\nimport RegisterForm, { RegisterFormValues } from \"./RegisterForm\";\r\nimport { StoreState } from \"../reducers\";\r\nimport { signUp } from \"../actions\";\r\nimport { connect } from \"react-redux\";\r\nimport history from \"../browserHistory\";\r\n\r\nexport interface RegisterFormProps {\r\n    onSubmit(formValues: any): void;\r\n    authStatus?: string | null;\r\n}\r\n\r\nexport interface RegisterProps {\r\n    signUp(formValues: any): void;\r\n    authStatus?: string | null;\r\n}\r\n\r\nconst Register: React.FC<RegisterProps> = (props) => {\r\n    //const history = useHistory();\r\n    const onSubmitRegister = async (formValues: RegisterFormValues) => {\r\n        props.signUp(formValues);\r\n    };\r\n\r\n    useEffect(() => {\r\n        //If user is already logged in, they should be unable to visit this page\r\n        if (props.authStatus) {\r\n            history.push(\"/listings/1\");\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"registerContainer\">\r\n            <div className=\"registerFormWrap\">\r\n                <RegisterForm onSubmit={onSubmitRegister} />\r\n            </div>\r\n            <div className=\"registerMiscWrap\">\r\n                <div className=\"alreadyRegisteredContainer\">\r\n                    <h1>Already Registered?</h1>\r\n                    <p>Sign in to post your ad</p>\r\n                    <button className=\"alreadyRegisteredButton\">Sign in</button>\r\n                </div>\r\n                <div className=\"whyRegisterContainer\">\r\n                    <h1>Why Register?</h1>\r\n                    <p>\r\n                        To enhance your Kijiji experience and help you stay safe\r\n                        and secure, you now need to register to:\r\n                    </p>\r\n                    <ul>\r\n                        <li>Post, edit and manage ads</li>\r\n                        <li>\r\n                            Access saved ads in your Favourites from all of your\r\n                            devices\r\n                        </li>\r\n                        <li>\r\n                            Easily promote multiple ads to gain more visibility\r\n                            and view order history\r\n                        </li>\r\n                        <li>Reserve your own nickname</li>\r\n                        <li>And much more!</li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: StoreState) => {\r\n    return {\r\n        authStatus: state.authStatus.authenticated,\r\n    };\r\n};\r\nexport default connect(mapStateToProps, { signUp })(Register);\r\n","C:\\projects\\kijiji\\server\\client\\src\\components\\SignIn.tsx",["181"],"import React, { useEffect } from \"react\";\r\nimport SignInForm, { SignInFormValues } from \"./SignInForm\";\r\nimport { signIn } from \"../actions\";\r\nimport { StoreState } from \"../reducers\";\r\nimport { connect } from \"react-redux\";\r\nimport history from \"../browserHistory\";\r\nexport interface SignInFormProps {\r\n    onSubmit(formValues: any): void;\r\n    authStatus?: string | null;\r\n}\r\n\r\nexport interface SignInProps {\r\n    signIn(formValues: any): void;\r\n    authStatus?: string | null;\r\n}\r\n\r\nconst SignIn: React.FC<SignInProps> = (props) => {\r\n    //const history = useHistory();\r\n    const onSubmitSignIn = async (formValues: SignInFormValues) => {\r\n        props.signIn(formValues);\r\n    };\r\n\r\n    useEffect(() => {\r\n        //If user is already logged in, they should be unable to visit this page\r\n        if (props.authStatus) {\r\n            history.push(\"/listings/1\");\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"signInContainer\">\r\n            <div className=\"signInFormWrap\">\r\n                <SignInForm onSubmit={onSubmitSignIn} />\r\n            </div>\r\n            <div className=\"signInMiscWrap\">\r\n                <div className=\"registerNowContainer\">\r\n                    <h1>Not registered yet?</h1>\r\n                    <p>\r\n                        Register now to post, edit, and manage ads. It’s quick,\r\n                        easy, and free!\r\n                    </p>\r\n                    <button className=\"registerNowButton\">Register Now</button>\r\n                </div>\r\n                <div>\r\n                    <h1>Protect Your Account</h1>\r\n                    <p>\r\n                        Ensure that whenever you sign in to Kijiji, the web\r\n                        address in your browser starts with\r\n                        https://www.kijiji.ca/\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: StoreState) => {\r\n    return {\r\n        authStatus: state.authStatus.authenticated,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, { signIn })(SignIn);\r\n","C:\\projects\\kijiji\\server\\client\\src\\reducers\\authReducer.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\components\\requireAuth.tsx",["182"],"import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { StoreState } from \"../reducers\";\r\nimport { History } from \"history\";\r\nimport { validateToken } from \"../actions\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nimport history from \"../browserHistory\";\r\n\r\nexport interface IHoc {\r\n    authStatus?: string | null;\r\n    history: History;\r\n    validateToken(path: string, retriedCalling: boolean): void;\r\n}\r\n\r\nconst hoc = (ChildComponent: any) => {\r\n    class ComposedComponent extends Component<IHoc> {\r\n        // Our component just got rendered\r\n        //Check for redux store's authStatus\r\n        componentDidMount() {\r\n            this.shouldNavigateAway();\r\n        }\r\n\r\n        // Our component just got updated\r\n        //If our redux store's authStatus changes\r\n        componentDidUpdate() {\r\n            this.shouldNavigateAway();\r\n        }\r\n\r\n        shouldNavigateAway() {\r\n            if (!this.props.authStatus) {\r\n                //if authStatus is empty string\r\n                //history is automatically passed due to React-router\r\n                //If done loading\r\n                this.props.history.push(\"/\");\r\n            } else {\r\n                //When user enter a page,\r\n                //validate access token, if it's not valid, redux's authStatus would be empty\r\n\r\n                this.props.validateToken(history.location.pathname, false);\r\n            }\r\n        }\r\n\r\n        render() {\r\n            return <ChildComponent {...this.props} />;\r\n        }\r\n    }\r\n\r\n    function mapStateToProps(state: StoreState) {\r\n        return {\r\n            authStatus: state.authStatus.authenticated,\r\n        };\r\n    }\r\n\r\n    return connect(mapStateToProps, { validateToken })(ComposedComponent);\r\n};\r\n\r\nexport default hoc;\r\n","C:\\projects\\kijiji\\server\\client\\src\\components\\RegisterForm.tsx",["183","184","185","186","187"],"import React, { ComponentType, useEffect } from \"react\";\r\nimport {\r\n    Field,\r\n    reduxForm,\r\n    reset,\r\n    change,\r\n    FormErrors,\r\n    InjectedFormProps,\r\n} from \"redux-form\";\r\n//compose is used to make it easier to \"organize\" mapStateToProps and redux form\r\nimport { StoreState } from \"../reducers\";\r\nimport { connect } from \"react-redux\";\r\nimport { RegisterFormProps } from \"./Register\";\r\n//Re-usable component\r\nexport interface RegisterFormValues {\r\n    email: string;\r\n    firstName: string;\r\n    lastName: string;\r\n    password: string;\r\n}\r\n\r\n//Typescriptand redux form:\r\n//https://levelup.gitconnected.com/react-js-typescript-redux-redux-form-jest-e522995ebe36\r\n\r\n//Need to hoist render methods up or else it will give error where it will unfocus after first characther is typed\r\n//https://stackoverflow.com/questions/39839051/using-redux-form-im-losing-focus-after-typing-the-first-character\r\n\r\nconst renderError = ({ error, touched }: any) => {\r\n    if (touched && error) {\r\n        //Touched (for input) will be false at first\r\n        //When clicked and then clicked otuside of the input, it will be true\r\n        return <div className=\"errorText\">{error}</div>;\r\n    }\r\n};\r\n\r\nconst renderTextInput = ({ input, label, meta, placeHolder }: any) => {\r\n    //\"component\" property automatically passes props to argument, it has {input properties and meta properties}\r\n    //\"label\" automatically passes props to arguments\r\n    return (\r\n        <div>\r\n            <label>{label}</label>\r\n            <input\r\n                data-testid=\"registerTextInput\"\r\n                className=\"createAuthInputs\"\r\n                {...input}\r\n                autoComplete=\"off\"\r\n            />\r\n            {renderError(meta)}\r\n        </div>\r\n    );\r\n    //{..input} is shortcut for redux-form; where you take all the input from \"component's\" props and pass it as\r\n    //props to <input>\r\n};\r\n\r\nconst renderPasswordInput = ({ input, label, meta, placeHolder }: any) => {\r\n    return (\r\n        <div>\r\n            <label>{label}</label>\r\n            <input\r\n                className=\"createAuthInputs\"\r\n                type=\"password\"\r\n                {...input}\r\n                autoComplete=\"off\"\r\n            />\r\n            {renderError(meta)}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst RegisterForm: React.FC<\r\n    RegisterFormProps & InjectedFormProps<{}, RegisterFormProps>\r\n> = (props) => {\r\n    const onSubmit = (formValues: any, dispatch: any) => {\r\n        //onSubmit's default param is any\r\n        //event.preventDefault() is automatically called with handleSubmit, a redux-form property\r\n        //form values are the values from the fields that redux-form automatiacally passes\r\n        //after clicking the submit button\r\n        //dispatch(reset(\"registerForm\"));\r\n        props.onSubmit(formValues);\r\n\r\n        //dispatch(change(\"registerForm\", \"password\", \"\"));\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <form className=\"authForm\" onSubmit={props.handleSubmit(onSubmit)}>\r\n                <h1>Register</h1>\r\n                <div className=\"authFieldSection\">\r\n                    <div className=\"authFormFieldTitleWrap\">\r\n                        <h1>Email</h1>\r\n                        <h3 className=\"authFormFieldTitleEmailInUse\">\r\n                            {props.authStatus}\r\n                        </h3>\r\n                    </div>\r\n                    <Field\r\n                        name=\"email\"\r\n                        type=\"text\"\r\n                        component={renderTextInput}\r\n                    />\r\n                </div>\r\n                <div className=\"authFieldSection\">\r\n                    <div className=\"authFormFieldTitleWrap\">\r\n                        <h1>First Name</h1>\r\n                        <h3 className=\"authFormFieldTitleEmailInUse\">\r\n                            {props.authStatus}\r\n                        </h3>\r\n                    </div>\r\n                    <Field\r\n                        name=\"firstName\"\r\n                        type=\"text\"\r\n                        component={renderTextInput}\r\n                    />\r\n                </div>\r\n                <div className=\"authFieldSection\">\r\n                    <div className=\"authFormFieldTitleWrap\">\r\n                        <h1>Last Name</h1>\r\n                        <h3 className=\"authFormFieldTitleEmailInUse\">\r\n                            {props.authStatus}\r\n                        </h3>\r\n                    </div>\r\n                    <Field\r\n                        name=\"lastName\"\r\n                        type=\"text\"\r\n                        component={renderTextInput}\r\n                    />\r\n                </div>\r\n                <div className=\"authFieldSection\">\r\n                    <div className=\"authFormFieldTitleWrap\">\r\n                        <h1>Password</h1>\r\n                        <h3 className=\"authFormFieldTitleEmailInUse\">\r\n                            {props.authStatus}\r\n                        </h3>\r\n                    </div>\r\n                    <Field\r\n                        name=\"password\"\r\n                        type=\"password\"\r\n                        component={renderPasswordInput}\r\n                    />\r\n                </div>\r\n\r\n                <button data-testid=\"registerButton\" className=\"authButton\">\r\n                    Register\r\n                </button>\r\n            </form>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nconst validate = (\r\n    formValues: RegisterFormValues\r\n): FormErrors<RegisterFormValues> => {\r\n    //MUST BE NAMED VALIDATE! Other names would be ignored by reduxForm(..)\r\n    const errors: FormErrors<RegisterFormValues> = {};\r\n    //If you return an empty object, redux form will assume everything is ok\r\n    if (!formValues.email) {\r\n        //user did not enter title, so undefined\r\n        errors.email = \"You must enter an email\";\r\n        //Must be the same name as field name! The \"error\" property in {meta} would receive this\r\n    }\r\n\r\n    if (!formValues.firstName) {\r\n        errors.firstName = \"You must enter your first name\";\r\n    }\r\n\r\n    if (!formValues.lastName) {\r\n        errors.lastName = \"You must enter your last name\";\r\n    }\r\n    if (!formValues.password) {\r\n        errors.password = \"You must enter a password\";\r\n    }\r\n\r\n    return errors;\r\n    //Erors is going to be passed to renderInput's meta\r\n};\r\n\r\n// const mapStateToProps = (state: StoreState) => {\r\n//     return {\r\n//         authStatus: state.authStatus.errorMessage,\r\n//     };\r\n// };\r\n\r\nexport default connect()(\r\n    reduxForm<{}, RegisterFormProps>({\r\n        form: \"registerForm\",\r\n        validate,\r\n    })(RegisterForm)\r\n);\r\n","C:\\projects\\kijiji\\server\\client\\src\\components\\SignInForm.tsx",["188","189","190","191"],"import React, { ComponentType, useEffect } from \"react\";\r\nimport {\r\n    Field,\r\n    reduxForm,\r\n    reset,\r\n    change,\r\n    FormErrors,\r\n    InjectedFormProps,\r\n} from \"redux-form\";\r\n//compose is used to make it easier to \"organize\" mapStateToProps and redux form\r\nimport { StoreState } from \"../reducers\";\r\nimport { connect } from \"react-redux\";\r\nimport { SignInFormProps } from \"./SignIn\";\r\n//Re-usable component\r\nexport interface SignInFormValues {\r\n    email: string;\r\n    password: string;\r\n}\r\n\r\n//Typescriptand redux form:\r\n//https://levelup.gitconnected.com/react-js-typescript-redux-redux-form-jest-e522995ebe36\r\n\r\n//Need to hoist render methods up or else it will give error where it will unfocus after first characther is typed\r\n//https://stackoverflow.com/questions/39839051/using-redux-form-im-losing-focus-after-typing-the-first-character\r\n\r\nconst renderError = ({ error, touched }: any) => {\r\n    if (touched && error) {\r\n        //Touched (for input) will be false at first\r\n        //When clicked and then clicked otuside of the input, it will be true\r\n        return <div className=\"errorText\">{error}</div>;\r\n    }\r\n};\r\n\r\nconst renderTextInput = ({ input, label, meta, placeHolder }: any) => {\r\n    //\"component\" property automatically passes props to argument, it has {input properties and meta properties}\r\n    //\"label\" automatically passes props to arguments\r\n    return (\r\n        <div>\r\n            <label>{label}</label>\r\n            <input className=\"createAuthInputs\" {...input} autoComplete=\"off\" />\r\n            {renderError(meta)}\r\n        </div>\r\n    );\r\n    //{..input} is shortcut for redux-form; where you take all the input from \"component's\" props and pass it as\r\n    //props to <input>\r\n};\r\n\r\nconst renderPasswordInput = ({ input, label, meta, placeHolder }: any) => {\r\n    return (\r\n        <div>\r\n            <label>{label}</label>\r\n            <input\r\n                className=\"createAuthInputs\"\r\n                type=\"password\"\r\n                {...input}\r\n                autoComplete=\"off\"\r\n            />\r\n            {renderError(meta)}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst SignInForm: React.FC<\r\n    SignInFormProps & InjectedFormProps<{}, SignInFormProps>\r\n> = (props) => {\r\n    const onSubmit = (formValues: any, dispatch: any) => {\r\n        //onSubmit's default param is any\r\n        //event.preventDefault() is automatically called with handleSubmit, a redux-form property\r\n        //form values are the values from the fields that redux-form automatiacally passes\r\n        //after clicking the submit button\r\n        //dispatch(reset(\"registerForm\"));\r\n        props.onSubmit(formValues);\r\n        // dispatch(change(\"signInForm\", \"password\", \"\"));\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <form className=\"authForm\" onSubmit={props.handleSubmit(onSubmit)}>\r\n                <h1>Sign In</h1>\r\n                <div className=\"authFieldSection\">\r\n                    <div className=\"authFormFieldTitleWrap\">\r\n                        <h1>Email</h1>\r\n                        <h3 className=\"authFormFieldTitleEmailInUse\">\r\n                            {props.authStatus}\r\n                        </h3>\r\n                    </div>\r\n                    <Field\r\n                        name=\"email\"\r\n                        type=\"text\"\r\n                        component={renderTextInput}\r\n                    />\r\n                </div>\r\n                <div className=\"authFieldSection\">\r\n                    <div className=\"authFormFieldTitleWrap\">\r\n                        <h1>Password</h1>\r\n                        <h3 className=\"authFormFieldTitleEmailInUse\">\r\n                            {props.authStatus}\r\n                        </h3>\r\n                    </div>\r\n                    <Field\r\n                        name=\"password\"\r\n                        type=\"password\"\r\n                        component={renderPasswordInput}\r\n                    />\r\n                </div>\r\n\r\n                <button className=\"authButton\">Sign In</button>\r\n            </form>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nconst validate = (\r\n    formValues: SignInFormValues\r\n): FormErrors<SignInFormValues> => {\r\n    //MUST BE NAMED VALIDATE! Other names would be ignored by reduxForm(..)\r\n    const errors: FormErrors<SignInFormValues> = {};\r\n    //If you return an empty object, redux form will assume everything is ok\r\n    if (!formValues.email) {\r\n        //user did not enter title, so undefined\r\n        errors.email = \"You must enter an email\";\r\n        //Must be the same name as field name! The \"error\" property in {meta} would receive this\r\n    }\r\n    if (!formValues.password) {\r\n        errors.password = \"You must enter a password\";\r\n    }\r\n    return errors;\r\n    //Erors is going to be passed to renderInput's meta\r\n};\r\n\r\nconst mapStateToProps = (state: StoreState) => {\r\n    return {\r\n        authStatus: state.authStatus.errorMessage,\r\n    };\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    {}\r\n)(\r\n    reduxForm<{}, SignInFormProps>({\r\n        form: \"signInForm\",\r\n        validate,\r\n    })(SignInForm)\r\n);\r\n","C:\\projects\\kijiji\\server\\client\\src\\actions\\index.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\actions\\types.tsx",["192"],"import {\r\n    AuthUserAction,\r\n    AuthErrorAction,\r\n    FetchCategoriesForListingAction,\r\n    FetchCategoriesForListingErrorAction,\r\n    UploadImageToCloudinaryAction,\r\n    CreateListingAction,\r\n    ListingErrorAction,\r\n    FetchListingsAction,\r\n    FetchListingDetailAction,\r\n    DeleteListingAction,\r\n} from \"../actions\";\r\nimport { EditListingAction } from \"./listing\";\r\nimport { FetchUserProfileAction, FetchUserProfileErrorAction } from \"./profile\";\r\nexport enum ActionTypes {\r\n    AUTH_USER,\r\n    AUTH_ERROR,\r\n    FETCH_CATEGORIES_FOR_LISTING,\r\n    FETCH_CATEGORIES_FOR_LISTING_ERROR,\r\n    UPLOAD_IMAGE_TO_CLOUDINARY,\r\n    CREATE_LISTING,\r\n    LISTING_ERROR,\r\n    FETCH_LISTINGS,\r\n    FETCH_LISTING_DETAIL,\r\n    FETCH_USER_PROFILE,\r\n    FETCH_USER_PROFILE_ERROR,\r\n    EDIT_LISTING,\r\n    DELETE_LISTING,\r\n}\r\nexport type AuthActions = AuthUserAction | AuthErrorAction;\r\nexport type FetchCategoriesActions =\r\n    | FetchCategoriesForListingAction\r\n    | FetchCategoriesForListingErrorAction;\r\nexport type ListingAction =\r\n    // | UploadImageToCloudinaryAction\r\n    | CreateListingAction\r\n    | ListingErrorAction\r\n    | FetchListingsAction\r\n    | FetchListingDetailAction\r\n    | EditListingAction\r\n    | DeleteListingAction;\r\n\r\nexport type UserProfileAction =\r\n    | FetchUserProfileAction\r\n    | FetchUserProfileErrorAction;\r\n","C:\\projects\\kijiji\\server\\client\\src\\actions\\auth.tsx",["193"],"import { ActionTypes } from \"./types\";\r\nimport auth from \"./axiosConfig\";\r\nimport { Dispatch } from \"redux\";\r\nimport history from \"../browserHistory\";\r\nimport CookieService from \"../CookieService\";\r\n\r\nexport interface JWTType {\r\n    token: string;\r\n}\r\nexport interface AuthUserAction {\r\n    type: ActionTypes.AUTH_USER;\r\n    payload: JWTType;\r\n}\r\nexport interface AuthErrorAction {\r\n    type: ActionTypes.AUTH_ERROR;\r\n    payload: string;\r\n}\r\n\r\nexport const signUp = (formValues: any) => async (dispatch: Dispatch) => {\r\n    try {\r\n        const response = await auth.post<JWTType>(\"/signup\", formValues);\r\n        dispatch<AuthUserAction>({\r\n            type: ActionTypes.AUTH_USER,\r\n            payload: response.data,\r\n        });\r\n        //Save token to local storage so that we could persist login state, keep user log in\r\n        // localStorage.setItem(\"token\", response.data.token);\r\n        // history.push(\"/walkman\");\r\n    } catch (err) {\r\n        dispatch<AuthErrorAction>({\r\n            type: ActionTypes.AUTH_ERROR,\r\n            payload: \"- Email is in use\",\r\n        });\r\n    }\r\n};\r\nexport const signIn = (formValues: any) => async (dispatch: Dispatch) => {\r\n    try {\r\n        const response = await auth.post<JWTType>(\"/signin\", formValues);\r\n        dispatch<AuthUserAction>({\r\n            type: ActionTypes.AUTH_USER,\r\n            payload: response.data,\r\n        });\r\n        //Save token to local storage so that we could persist login state, keep user log in\r\n        //localStorage.setItem(\"token\", response.data.token);\r\n        //history.push(\"/walkman\");\r\n    } catch (err) {\r\n        // if (err.message === \"Network Error\") {\r\n        //     console.log(\"check error\", err);\r\n        // }\r\n\r\n        dispatch<AuthErrorAction>({\r\n            type: ActionTypes.AUTH_ERROR,\r\n            payload: \"- Invalid login credentials\",\r\n        });\r\n    }\r\n};\r\n\r\nexport const signOut = () => async (dispatch: Dispatch) => {\r\n    try {\r\n        const response = await auth.post<JWTType>(\"/signout\");\r\n        dispatch<AuthUserAction>({\r\n            type: ActionTypes.AUTH_USER,\r\n            payload: response.data,\r\n        });\r\n        alert(\"Logged out succesfully\");\r\n    } catch (err) {\r\n        alert(\"Log out failed, try again\");\r\n    }\r\n};\r\n\r\nexport const validateToken = (path: string, retriedCalling: boolean) => async (\r\n    dispatch: Dispatch\r\n) => {\r\n    try {\r\n        const response = await auth.post<JWTType>(\r\n            path,\r\n            {}\r\n            // { headers: { Authorization: cookieService.getAccessToken() } } //assigned in axios' interceptors.request\r\n        );\r\n        //Ensures that our current access token is the newest one; if a new access token is given,\r\n        //we will update our current access token\r\n\r\n        //requireAuth HOC relies on the dispatch below\r\n        dispatch<AuthUserAction>({\r\n            type: ActionTypes.AUTH_USER,\r\n            payload: response.data,\r\n        });\r\n    } catch (err) {\r\n        if (retriedCalling === true) {\r\n            // If it fails again with the new access token (might be a forged token)\r\n            // Invalid token, kick our users out from a certain resource only accecible to signed in users\r\n            // dispatch<AuthErrorAction>({\r\n            //     type: ActionTypes.AUTH_ERROR,\r\n            //     payload: \"\",\r\n            // });\r\n\r\n            //Log them out\r\n            dispatch(signOut() as any);\r\n        }\r\n    }\r\n};\r\n","C:\\projects\\kijiji\\server\\client\\src\\actions\\axiosConfig.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\CookieService.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\reducers\\categoryReducer.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\reducers\\listingReducer.tsx",["194"],"C:\\projects\\kijiji\\server\\client\\src\\actions\\listing.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\components\\Loading.tsx",["195"],"import React from \"react\";\r\nimport { css } from \"@emotion/core\";\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\nconst Loading = (): JSX.Element => {\r\n    return <ClipLoader color={\"grey\"} loading={true} />;\r\n};\r\nexport default Loading;\r\n","C:\\projects\\kijiji\\server\\client\\src\\constants.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\components\\Listings.tsx",["196","197","198","199","200"],"C:\\projects\\kijiji\\server\\client\\src\\components\\Listing.tsx",["201"],"C:\\projects\\kijiji\\server\\client\\src\\components\\Pagination.tsx",["202","203"],"import React, { useState } from \"react\";\r\nimport history from \"../browserHistory\";\r\n\r\ninterface PaginationProps {\r\n    totalItems: number;\r\n    itemLimit: number;\r\n    currentPage: number;\r\n    onClickCallback(pageNumber: number): void;\r\n    query: string;\r\n}\r\n\r\nconst Pagination: React.FC<PaginationProps> = (props) => {\r\n    const renderPageItems = (totalItems: number, itemLimit: number) => {\r\n        let numberOfPageItems = Math.ceil(totalItems / itemLimit); //rounds up\r\n        let pageItems = [];\r\n        for (let i = 0; i < numberOfPageItems; i++) {\r\n            pageItems.push(i + 1);\r\n        }\r\n\r\n        return (\r\n            <ul className=\"pagination\">\r\n                {pageItems.map((pageNumber) => {\r\n                    return (\r\n                        <li\r\n                            key={pageNumber}\r\n                            onClick={() => {\r\n                                props.onClickCallback(pageNumber);\r\n                                history.push({\r\n                                    pathname: `/listings/${pageNumber}`,\r\n                                    search: `${props.query}`,\r\n                                });\r\n                            }}\r\n                            className={\r\n                                props.currentPage == pageNumber\r\n                                    ? \"pageItemSelected\"\r\n                                    : \"pageItem\"\r\n                            }\r\n                        >\r\n                            {pageNumber}\r\n                        </li>\r\n                    );\r\n                })}\r\n            </ul>\r\n        );\r\n    };\r\n    return (\r\n        <React.Fragment>\r\n            {renderPageItems(props.totalItems, props.itemLimit)}\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Pagination;\r\n","C:\\projects\\kijiji\\server\\client\\src\\components\\Searchbar.tsx",["204","205","206","207","208","209","210"],"C:\\projects\\kijiji\\server\\client\\src\\windowDimensions.tsx",["211"],"import React from \"react\";\r\n\r\nimport { useState, useEffect } from \"react\";\r\n\r\nconst getWindowDimensions = () => {\r\n    const { innerWidth: width, innerHeight: height } = window;\r\n    return {\r\n        width,\r\n        height,\r\n    };\r\n};\r\n\r\nconst useWindowDimensions = () => {\r\n    const [windowDimensions, setWindowDimensions] = useState(\r\n        getWindowDimensions()\r\n    );\r\n\r\n    useEffect(() => {\r\n        function handleResize() {\r\n            setWindowDimensions(getWindowDimensions());\r\n        }\r\n\r\n        window.addEventListener(\"resize\", handleResize);\r\n        return () => window.removeEventListener(\"resize\", handleResize);\r\n    }, []);\r\n\r\n    return windowDimensions;\r\n};\r\nexport default useWindowDimensions;\r\n","C:\\projects\\kijiji\\server\\client\\src\\components\\Modal.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\components\\SearchFilterForm.tsx",["212","213","214"],"import React, { ComponentType, useState, useEffect } from \"react\";\r\nimport {\r\n    Field,\r\n    reduxForm,\r\n    InjectedFormProps,\r\n    formValueSelector,\r\n} from \"redux-form\";\r\n//compose is used to make it easier to \"organize\" mapStateToProps and redux form\r\nimport { StoreState } from \"../reducers\";\r\nimport { connect } from \"react-redux\";\r\nimport { SearchFilterFormProps } from \"./Searchbar\";\r\nimport { fetchCategoriesForListing } from \"../actions\";\r\nimport LoadingDots from \"./LoadingDots\";\r\nimport { CANADIAN_PROVINCES, CANADIAN_PROVINCE_AND_CITIES } from \"../constants\";\r\n\r\n//Typescriptand redux form:\r\n//https://levelup.gitconnected.com/react-js-typescript-redux-redux-form-jest-e522995ebe36\r\n\r\n//Need to hoist render methods up or else it will give error where it will unfocus after first characther is typed\r\n//https://stackoverflow.com/questions/39839051/using-redux-form-im-losing-focus-after-typing-the-first-character\r\n\r\nexport interface SearchFilterFormValues {\r\n    search?: string;\r\n    category?: string;\r\n    province?: string;\r\n    city?: string;\r\n}\r\n\r\nconst SearchFilterForm: React.FC<\r\n    SearchFilterFormProps & InjectedFormProps<{}, SearchFilterFormProps>\r\n> = (props) => {\r\n    const renderDropDown = ({\r\n        name,\r\n        input,\r\n        label,\r\n        meta,\r\n        placeHolder,\r\n        optionValues,\r\n    }: any) => {\r\n        return (\r\n            <select\r\n                className=\"modalFilterCategoriesDropdown\"\r\n                autoComplete=\"off\"\r\n                {...input}\r\n            >\r\n                <option value=\"\"></option>\r\n                {optionValues.map((val) => (\r\n                    <option key={val} value={val}>\r\n                        {val}\r\n                    </option>\r\n                ))}\r\n            </select>\r\n        );\r\n    };\r\n\r\n    const onSubmit = (formValues: SearchFilterFormValues, dispatch: any) => {\r\n        if (!formValues.province) {\r\n            //City field does not get reseted to \" \" if user makes province an empty field first\r\n            formValues.city = \"\";\r\n        }\r\n        props.onSubmit(formValues);\r\n    };\r\n\r\n    useEffect(() => {\r\n        props.fetchCategoriesForListing();\r\n    }, []);\r\n\r\n    const renderFields = () => {\r\n        if (props.categories.length === 0) {\r\n            return (\r\n                <div className=\"centerLoadingForModal\">\r\n                    <LoadingDots />\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <form onSubmit={props.handleSubmit(onSubmit)}>\r\n                    <h3>Categories</h3>\r\n                    <Field\r\n                        type=\"text\"\r\n                        name=\"category\"\r\n                        label=\"category\"\r\n                        component={renderDropDown}\r\n                        optionValues={props.categories}\r\n                    />\r\n                    <div className=\"modalFilterLocationWrap\">\r\n                        <div className=\"modalLocationDropdownWrap\">\r\n                            <h3>Province</h3>\r\n                            <Field\r\n                                name=\"province\"\r\n                                label=\"province\"\r\n                                type=\"text\"\r\n                                component={renderDropDown}\r\n                                optionValues={CANADIAN_PROVINCES.map(\r\n                                    (province) => {\r\n                                        return province.name;\r\n                                    }\r\n                                )}\r\n                            />\r\n                        </div>\r\n                        <div className=\"modalLocationDropdownWrap\">\r\n                            <h3>City</h3>\r\n                            <Field\r\n                                name=\"city\"\r\n                                label=\"city\"\r\n                                type=\"text\"\r\n                                component={renderDropDown}\r\n                                optionValues={\r\n                                    !props.provinceValue\r\n                                        ? []\r\n                                        : CANADIAN_PROVINCE_AND_CITIES.filter(\r\n                                              (provinceAndCity) =>\r\n                                                  provinceAndCity.province ===\r\n                                                  props.provinceValue\r\n                                          )[0].cities\r\n                                }\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <button className=\"modalAcceptButton\">Accept</button>\r\n                    {/* https://stackoverflow.com/questions/41590766/redux-form-always-validates-even-on-a-normal-button-press */}\r\n                    {/* By adding type=\"button\" the button will not be a \"submit\" button */}\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"modalCancelButton\"\r\n                        onClick={props.onCancel}\r\n                    >\r\n                        Cancel\r\n                    </button>\r\n                </form>\r\n            );\r\n        }\r\n    };\r\n    return <React.Fragment>{renderFields()}</React.Fragment>;\r\n};\r\n\r\nconst validate = (formValues: SearchFilterFormValues) => {\r\n    //MUST BE NAMED VALIDATE! Other names would be ignored by reduxForm(..)\r\n    const errors = {};\r\n    //If you return an empty object, redux form will assume everything is ok\r\n    return errors;\r\n};\r\n\r\nconst selector = formValueSelector(\"searchFilterForm\");\r\nconst mapStateToProps = (state: StoreState) => {\r\n    return {\r\n        categories: state.categories,\r\n        provinceValue: selector(state, \"province\"),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, { fetchCategoriesForListing })(\r\n    reduxForm<{}, SearchFilterFormProps>({\r\n        form: \"searchFilterForm\",\r\n        validate,\r\n    })(SearchFilterForm)\r\n);\r\n","C:\\projects\\kijiji\\server\\client\\src\\components\\LoadingDots.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\components\\ListingDetail.tsx",["215","216","217","218","219"],"C:\\projects\\kijiji\\server\\client\\src\\components\\Profile.tsx",["220","221","222","223","224","225"],"import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport history from \"../browserHistory\";\r\nimport { connect } from \"react-redux\";\r\nimport { StoreState } from \"../reducers\";\r\nimport { ListingDetail as ListingDetailType } from \"../actions\";\r\nimport postAdListingImagePlaceHolder from \"../img/postAdListingImagePlaceHolder.png\";\r\nimport defaultProfilePic from \"../img/defaultProfilePic.jpg\";\r\nimport Loading from \"./Loading\";\r\nimport moment from \"moment\";\r\nimport emptyBox from \"../img/emptyBox.svg\";\r\nimport { fetchUserProfile } from \"../actions\";\r\nimport Listing from \"./Listing\";\r\nimport { Listing as ListingType } from \"../actions\";\r\nimport requireAuth from \"./requireAuth\";\r\ninterface ProfileProps {\r\n    fetchUserProfile(): void;\r\n    profileInfo: any;\r\n}\r\nconst Profile: React.FC<ProfileProps> = (props) => {\r\n    useEffect(() => {\r\n        props.fetchUserProfile();\r\n    }, []);\r\n\r\n    const renderListings = (listings) => {\r\n        if (listings.length === 0) {\r\n            return (\r\n                <div className=\"userListingContainerEmpty\">\r\n                    <h3 className=\"userListingText\">0 listings</h3>\r\n\r\n                    <img className=\"emptyBox\" src={emptyBox} alt=\"empty box\" />\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div className=\"userListingContainerFilled\">\r\n                    <h3>Your Listings :</h3>\r\n                    {listings.map((listing: ListingType) => {\r\n                        return (\r\n                            <Listing key={listing.listing_id} {...listing} />\r\n                        );\r\n                    })}\r\n                </div>\r\n            );\r\n        }\r\n    };\r\n    const renderListingDetail = () => {\r\n        if (!props.profileInfo) {\r\n            return (\r\n                <div className=\"loadingCenter\">\r\n                    <Loading />\r\n                </div>\r\n            );\r\n        } else if (props.profileInfo.error) {\r\n            return (\r\n                <div className=\"serverErrorContainer\">\r\n                    <h3 className=\"serverErrorText\">\r\n                        {props.profileInfo.error}\r\n                    </h3>\r\n                </div>\r\n            );\r\n        } else {\r\n            const {\r\n                first_name,\r\n                last_name,\r\n                member_since,\r\n                listings,\r\n            } = props.profileInfo;\r\n\r\n            return (\r\n                <React.Fragment>\r\n                    <div className=\"profileInfoAndListingContainer\">\r\n                        <div className=\"profileInfoContainer\">\r\n                            <div className=\"profileBannerContainer\">\r\n                                <div className=\"purpleBanner\"></div>\r\n                                <img src={defaultProfilePic} alt=\"profie\"></img>\r\n                                <div className=\"whiteBanner\"></div>\r\n                            </div>\r\n                            <h3>{` ${first_name} ${last_name}`}</h3>\r\n                            <h3>\r\n                                {`Member Since: ${moment(member_since).format(\r\n                                    \"YYYY/MM/DD\"\r\n                                )}`}\r\n                            </h3>\r\n                        </div>\r\n                        {renderListings(listings)}\r\n                    </div>\r\n                </React.Fragment>\r\n            );\r\n        }\r\n    };\r\n    return <React.Fragment>{renderListingDetail()}</React.Fragment>;\r\n};\r\n\r\nconst mapStateToProps = (state: StoreState) => {\r\n    return { profileInfo: state.profileInfo.data };\r\n};\r\n\r\nexport default connect(mapStateToProps, { fetchUserProfile })(\r\n    requireAuth(Profile)\r\n);\r\n","C:\\projects\\kijiji\\server\\client\\src\\reducers\\profileReducer.tsx",["226"],"C:\\projects\\kijiji\\server\\client\\src\\actions\\profile.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\components\\EditAd.tsx",["227","228","229","230","231","232","233"],"import React, { useEffect, useState } from \"react\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport requireAuth from \"./requireAuth\";\r\nimport EditOrPostAdForm, { EditOrPostAdFormValues } from \"./EditOrPostAdForm\";\r\nimport { connect } from \"react-redux\";\r\nimport { StoreState } from \"../reducers\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport CookieService from \"../CookieService\";\r\nimport {\r\n    deleteListing,\r\n    editListing,\r\n    validateUserAndGetListingDetail,\r\n} from \"../actions/listing\";\r\nimport { ListingDataResponse } from \"../reducers/listingReducer\";\r\nimport Loading from \"./Loading\";\r\n\r\nimport { ListingDetail as ListingDetailType } from \"../actions\";\r\n\r\nexport interface EditAdProps {\r\n    fetchListingDetail(listingId: string): void;\r\n    editListing(\r\n        formValues: any,\r\n        listingId: string,\r\n        cloudinaryPublicId: string | null\r\n    ): void;\r\n    deleteListing(listingId: string, cloudinaryPublicId: string | null): void;\r\n    validateUserAndGetListingDetail(listingId: string): void;\r\n    match: any;\r\n    listingDetail: ListingDetailType;\r\n}\r\n\r\nconst EditAd: React.FC<EditAdProps> = (props) => {\r\n    useEffect(() => {\r\n        //We should validate if the listing actualy belongs to the user\r\n        props.validateUserAndGetListingDetail(props.match.params.id);\r\n    }, []);\r\n\r\n    const renderContent = () => {\r\n        if (!props.listingDetail) {\r\n            return (\r\n                <div className=\"loadingCenter\">\r\n                    <Loading />\r\n                </div>\r\n            );\r\n        }\r\n        // //too lazy to fix ts error, but I get the idea\r\n        //@ts-ignore\r\n        else if (props.listingDetail.error) {\r\n            return (\r\n                <div className=\"serverErrorContainer\">\r\n                    <h3 className=\"serverErrorText\">\r\n                        {\r\n                            //@ts-ignore\r\n                            props.listingDetail.error\r\n                        }\r\n                    </h3>\r\n                </div>\r\n            );\r\n        } else {\r\n            const {\r\n                listing_name,\r\n                listing_description,\r\n                category_name,\r\n                listing_image,\r\n                province,\r\n                city,\r\n                street,\r\n                listing_price,\r\n            } = props.listingDetail;\r\n\r\n            return (\r\n                <div className=\"editAdPageContainer\">\r\n                    <h1>`Edit Your Ad</h1>\r\n                    <EditOrPostAdForm\r\n                        //@ts-ignore for some reason, there's a ts error with this react version\r\n                        onSubmit={onEditListing}\r\n                        onDelete={onDeleteListing}\r\n                        initialValues={{\r\n                            title: listing_name,\r\n                            description: listing_description,\r\n                            category: category_name,\r\n                            province,\r\n                            city,\r\n                            street,\r\n                            price: listing_price,\r\n                        }}\r\n                        cloudinaryImage={listing_image}\r\n                    />\r\n                </div>\r\n            );\r\n        }\r\n    };\r\n\r\n    const onEditListing = async (formValues: EditOrPostAdFormValues) => {\r\n        console.log(\"editAds\", formValues);\r\n\r\n        if (props.listingDetail.listing_image && formValues.image) {\r\n            let cloudinaryPaths = props.listingDetail.listing_image.split(\"/\");\r\n\r\n            let cloudinaryLastPath = cloudinaryPaths.pop();\r\n            //@ts-ignore, catch block will catch it at editListing, dont worry\r\n            let cloudinaryPublicId = cloudinaryLastPath.split(\".\")[0];\r\n            console.log(\"cloudinaryPublicId\", cloudinaryPublicId);\r\n            props.editListing(\r\n                formValues,\r\n                props.match.params.id,\r\n                cloudinaryPublicId\r\n            );\r\n        } else {\r\n            //If listing does not have initial cloudinary image link (because they made a listing without a picture beforehand\r\n            //or they removed their picture and want to edit their listing picture again)\r\n            //Upload cloudinary image\r\n            props.editListing(formValues, props.match.params.id, null);\r\n        }\r\n    };\r\n\r\n    const onDeleteListing = () => {\r\n        if (props.listingDetail.listing_image) {\r\n            let cloudinaryPaths = props.listingDetail.listing_image.split(\"/\");\r\n            let cloudinaryLastPath = cloudinaryPaths.pop();\r\n            //@ts-ignore\r\n            let cloudinaryPublicId = cloudinaryLastPath.split(\".\")[0];\r\n            props.deleteListing(props.match.params.id, cloudinaryPublicId);\r\n        } else {\r\n            props.deleteListing(props.match.params.id, null);\r\n        }\r\n    };\r\n\r\n    return renderContent();\r\n};\r\n\r\nconst mapStateToProps = (state: StoreState) => {\r\n    return {\r\n        listingDetail: state.listingInfo.data,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n    validateUserAndGetListingDetail,\r\n    deleteListing,\r\n    editListing,\r\n})(requireAuth(EditAd));\r\n","C:\\projects\\kijiji\\server\\client\\src\\components\\EditOrPostAdForm.tsx",["234","235"],{"ruleId":"236","replacedBy":"237"},{"ruleId":"238","replacedBy":"239"},{"ruleId":"240","severity":1,"message":"241","line":2,"column":10,"nodeType":"242","messageId":"243","endLine":2,"endColumn":14},{"ruleId":"240","severity":1,"message":"244","line":1,"column":17,"nodeType":"242","messageId":"243","endLine":1,"endColumn":26},{"ruleId":"240","severity":1,"message":"245","line":1,"column":28,"nodeType":"242","messageId":"243","endLine":1,"endColumn":36},{"ruleId":"240","severity":1,"message":"241","line":2,"column":10,"nodeType":"242","messageId":"243","endLine":2,"endColumn":14},{"ruleId":"240","severity":1,"message":"246","line":2,"column":16,"nodeType":"242","messageId":"243","endLine":2,"endColumn":27},{"ruleId":"240","severity":1,"message":"247","line":7,"column":25,"nodeType":"242","messageId":"243","endLine":7,"endColumn":32},{"ruleId":"240","severity":1,"message":"248","line":8,"column":8,"nodeType":"242","messageId":"243","endLine":8,"endColumn":18},{"ruleId":"240","severity":1,"message":"249","line":9,"column":8,"nodeType":"242","messageId":"243","endLine":9,"endColumn":21},{"ruleId":"240","severity":1,"message":"250","line":11,"column":8,"nodeType":"242","messageId":"243","endLine":11,"endColumn":15},{"ruleId":"251","severity":1,"message":"252","line":29,"column":8,"nodeType":"253","endLine":29,"endColumn":10,"suggestions":"254"},{"ruleId":"251","severity":1,"message":"252","line":28,"column":8,"nodeType":"253","endLine":28,"endColumn":10,"suggestions":"255"},{"ruleId":"240","severity":1,"message":"246","line":6,"column":10,"nodeType":"242","messageId":"243","endLine":6,"endColumn":21},{"ruleId":"240","severity":1,"message":"256","line":1,"column":17,"nodeType":"242","messageId":"243","endLine":1,"endColumn":30},{"ruleId":"240","severity":1,"message":"244","line":1,"column":32,"nodeType":"242","messageId":"243","endLine":1,"endColumn":41},{"ruleId":"240","severity":1,"message":"257","line":5,"column":5,"nodeType":"242","messageId":"243","endLine":5,"endColumn":10},{"ruleId":"240","severity":1,"message":"258","line":6,"column":5,"nodeType":"242","messageId":"243","endLine":6,"endColumn":11},{"ruleId":"240","severity":1,"message":"259","line":11,"column":10,"nodeType":"242","messageId":"243","endLine":11,"endColumn":20},{"ruleId":"240","severity":1,"message":"256","line":1,"column":17,"nodeType":"242","messageId":"243","endLine":1,"endColumn":30},{"ruleId":"240","severity":1,"message":"244","line":1,"column":32,"nodeType":"242","messageId":"243","endLine":1,"endColumn":41},{"ruleId":"240","severity":1,"message":"257","line":5,"column":5,"nodeType":"242","messageId":"243","endLine":5,"endColumn":10},{"ruleId":"240","severity":1,"message":"258","line":6,"column":5,"nodeType":"242","messageId":"243","endLine":6,"endColumn":11},{"ruleId":"240","severity":1,"message":"260","line":6,"column":5,"nodeType":"242","messageId":"243","endLine":6,"endColumn":34},{"ruleId":"240","severity":1,"message":"249","line":5,"column":8,"nodeType":"242","messageId":"243","endLine":5,"endColumn":21},{"ruleId":"240","severity":1,"message":"261","line":8,"column":8,"nodeType":"242","messageId":"243","endLine":8,"endColumn":9},{"ruleId":"240","severity":1,"message":"262","line":2,"column":10,"nodeType":"242","messageId":"243","endLine":2,"endColumn":13},{"ruleId":"240","severity":1,"message":"241","line":2,"column":10,"nodeType":"242","messageId":"243","endLine":2,"endColumn":14},{"ruleId":"240","severity":1,"message":"263","line":3,"column":8,"nodeType":"242","messageId":"243","endLine":3,"endColumn":15},{"ruleId":"240","severity":1,"message":"264","line":16,"column":8,"nodeType":"242","messageId":"243","endLine":16,"endColumn":19},{"ruleId":"240","severity":1,"message":"265","line":17,"column":23,"nodeType":"242","messageId":"243","endLine":17,"endColumn":32},{"ruleId":"251","severity":1,"message":"266","line":206,"column":8,"nodeType":"253","endLine":206,"endColumn":41,"suggestions":"267"},{"ruleId":"240","severity":1,"message":"241","line":2,"column":10,"nodeType":"242","messageId":"243","endLine":2,"endColumn":14},{"ruleId":"240","severity":1,"message":"245","line":1,"column":17,"nodeType":"242","messageId":"243","endLine":1,"endColumn":25},{"ruleId":"268","severity":1,"message":"269","line":34,"column":51,"nodeType":"270","messageId":"271","endLine":34,"endColumn":53},{"ruleId":"240","severity":1,"message":"241","line":2,"column":10,"nodeType":"242","messageId":"243","endLine":2,"endColumn":14},{"ruleId":"240","severity":1,"message":"272","line":11,"column":10,"nodeType":"242","messageId":"243","endLine":11,"endColumn":16},{"ruleId":"240","severity":1,"message":"273","line":11,"column":18,"nodeType":"242","messageId":"243","endLine":11,"endColumn":25},{"ruleId":"274","severity":1,"message":"275","line":53,"column":29,"nodeType":"276","messageId":"277","endLine":53,"endColumn":31},{"ruleId":"251","severity":1,"message":"278","line":104,"column":8,"nodeType":"253","endLine":104,"endColumn":10,"suggestions":"279"},{"ruleId":"274","severity":1,"message":"275","line":110,"column":48,"nodeType":"276","messageId":"277","endLine":110,"endColumn":50},{"ruleId":"268","severity":1,"message":"280","line":135,"column":42,"nodeType":"270","messageId":"271","endLine":135,"endColumn":44},{"ruleId":"240","severity":1,"message":"281","line":1,"column":8,"nodeType":"242","messageId":"243","endLine":1,"endColumn":13},{"ruleId":"240","severity":1,"message":"256","line":1,"column":17,"nodeType":"242","messageId":"243","endLine":1,"endColumn":30},{"ruleId":"240","severity":1,"message":"245","line":1,"column":32,"nodeType":"242","messageId":"243","endLine":1,"endColumn":40},{"ruleId":"251","severity":1,"message":"282","line":66,"column":8,"nodeType":"253","endLine":66,"endColumn":10,"suggestions":"283"},{"ruleId":"240","severity":1,"message":"241","line":2,"column":10,"nodeType":"242","messageId":"243","endLine":2,"endColumn":14},{"ruleId":"240","severity":1,"message":"263","line":3,"column":8,"nodeType":"242","messageId":"243","endLine":3,"endColumn":15},{"ruleId":"240","severity":1,"message":"284","line":7,"column":22,"nodeType":"242","messageId":"243","endLine":7,"endColumn":39},{"ruleId":"251","severity":1,"message":"282","line":24,"column":8,"nodeType":"253","endLine":24,"endColumn":10,"suggestions":"285"},{"ruleId":"240","severity":1,"message":"286","line":51,"column":17,"nodeType":"242","messageId":"243","endLine":51,"endColumn":27},{"ruleId":"240","severity":1,"message":"245","line":1,"column":28,"nodeType":"242","messageId":"243","endLine":1,"endColumn":36},{"ruleId":"240","severity":1,"message":"241","line":2,"column":10,"nodeType":"242","messageId":"243","endLine":2,"endColumn":14},{"ruleId":"240","severity":1,"message":"263","line":3,"column":8,"nodeType":"242","messageId":"243","endLine":3,"endColumn":15},{"ruleId":"240","severity":1,"message":"284","line":6,"column":27,"nodeType":"242","messageId":"243","endLine":6,"endColumn":44},{"ruleId":"240","severity":1,"message":"287","line":7,"column":8,"nodeType":"242","messageId":"243","endLine":7,"endColumn":37},{"ruleId":"251","severity":1,"message":"282","line":23,"column":8,"nodeType":"253","endLine":23,"endColumn":10,"suggestions":"288"},{"ruleId":"240","severity":1,"message":"261","line":3,"column":8,"nodeType":"242","messageId":"243","endLine":3,"endColumn":9},{"ruleId":"240","severity":1,"message":"245","line":1,"column":28,"nodeType":"242","messageId":"243","endLine":1,"endColumn":36},{"ruleId":"240","severity":1,"message":"241","line":2,"column":10,"nodeType":"242","messageId":"243","endLine":2,"endColumn":14},{"ruleId":"240","severity":1,"message":"246","line":2,"column":16,"nodeType":"242","messageId":"243","endLine":2,"endColumn":27},{"ruleId":"240","severity":1,"message":"248","line":7,"column":8,"nodeType":"242","messageId":"243","endLine":7,"endColumn":18},{"ruleId":"240","severity":1,"message":"249","line":8,"column":8,"nodeType":"242","messageId":"243","endLine":8,"endColumn":21},{"ruleId":"240","severity":1,"message":"289","line":14,"column":10,"nodeType":"242","messageId":"243","endLine":14,"endColumn":29},{"ruleId":"251","severity":1,"message":"282","line":36,"column":8,"nodeType":"253","endLine":36,"endColumn":10,"suggestions":"290"},{"ruleId":"240","severity":1,"message":"257","line":5,"column":5,"nodeType":"242","messageId":"243","endLine":5,"endColumn":10},{"ruleId":"251","severity":1,"message":"282","line":157,"column":8,"nodeType":"253","endLine":157,"endColumn":10,"suggestions":"291"},"no-native-reassign",["292"],"no-negated-in-lhs",["293"],"@typescript-eslint/no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useState' is defined but never used.","'useLocation' is defined but never used.","'Listing' is defined but never used.","'jwt_decode' is defined but never used.","'CookieService' is defined but never used.","'Loading' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.authStatus'. Either include it or remove the dependency array.","ArrayExpression",["294"],["295"],"'ComponentType' is defined but never used.","'reset' is defined but never used.","'change' is defined but never used.","'StoreState' is defined but never used.","'UploadImageToCloudinaryAction' is defined but never used.","'_' is defined but never used.","'css' is defined but never used.","'history' is defined but never used.","'queryString' is defined but never used.","'useParams' is defined but never used.","React Hook useEffect has missing dependencies: 'currentPage', 'props', and 'selectedSort'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["296"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'filter' is defined but never used.","'initial' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'queryValues.category', 'queryValues.city', 'queryValues.province', and 'queryValues.search'. Either include them or remove the dependency array.",["297"],"Expected '!==' and instead saw '!='.","'React' is defined but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["298"],"'ListingDetailType' is defined but never used.",["299"],"'listing_id' is assigned a value but never used.","'postAdListingImagePlaceHolder' is defined but never used.",["300"],"'ListingDataResponse' is defined but never used.",["301"],["302"],"no-global-assign","no-unsafe-negation",{"desc":"303","fix":"304"},{"desc":"303","fix":"305"},{"desc":"306","fix":"307"},{"desc":"308","fix":"309"},{"desc":"310","fix":"311"},{"desc":"310","fix":"312"},{"desc":"310","fix":"313"},{"desc":"310","fix":"314"},{"desc":"310","fix":"315"},"Update the dependencies array to be: [props.authStatus]",{"range":"316","text":"317"},{"range":"318","text":"317"},"Update the dependencies array to be: [currentPage, props, props.match.params.page, search, selectedSort]",{"range":"319","text":"320"},"Update the dependencies array to be: [queryValues.category, queryValues.city, queryValues.province, queryValues.search]",{"range":"321","text":"322"},"Update the dependencies array to be: [props]",{"range":"323","text":"324"},{"range":"325","text":"324"},{"range":"326","text":"324"},{"range":"327","text":"324"},{"range":"328","text":"324"},[908,910],"[props.authStatus]",[888,890],[9394,9427],"[currentPage, props, props.match.params.page, search, selectedSort]",[3698,3700],"[queryValues.category, queryValues.city, queryValues.province, queryValues.search]",[2181,2183],"[props]",[869,871],[925,927],[1326,1328],[5194,5196]]