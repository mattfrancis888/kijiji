[{"C:\\projects\\kijiji\\server\\client\\src\\index.tsx":"1","C:\\projects\\kijiji\\server\\client\\src\\components\\App.tsx":"2","C:\\projects\\kijiji\\server\\client\\src\\browserHistory.tsx":"3","C:\\projects\\kijiji\\server\\client\\src\\components\\Routes.tsx":"4","C:\\projects\\kijiji\\server\\client\\src\\components\\Header.tsx":"5","C:\\projects\\kijiji\\server\\client\\src\\Root.tsx":"6","C:\\projects\\kijiji\\server\\client\\src\\reducers\\index.tsx":"7","C:\\projects\\kijiji\\server\\client\\src\\components\\PostAd.tsx":"8","C:\\projects\\kijiji\\server\\client\\src\\components\\Register.tsx":"9","C:\\projects\\kijiji\\server\\client\\src\\components\\SignIn.tsx":"10","C:\\projects\\kijiji\\server\\client\\src\\reducers\\authReducer.tsx":"11","C:\\projects\\kijiji\\server\\client\\src\\components\\requireAuth.tsx":"12","C:\\projects\\kijiji\\server\\client\\src\\components\\RegisterForm.tsx":"13","C:\\projects\\kijiji\\server\\client\\src\\components\\SignInForm.tsx":"14","C:\\projects\\kijiji\\server\\client\\src\\actions\\index.tsx":"15","C:\\projects\\kijiji\\server\\client\\src\\actions\\types.tsx":"16","C:\\projects\\kijiji\\server\\client\\src\\actions\\auth.tsx":"17","C:\\projects\\kijiji\\server\\client\\src\\actions\\axiosConfig.tsx":"18","C:\\projects\\kijiji\\server\\client\\src\\CookieService.tsx":"19","C:\\projects\\kijiji\\server\\client\\src\\reducers\\categoryReducer.tsx":"20","C:\\projects\\kijiji\\server\\client\\src\\reducers\\listingReducer.tsx":"21","C:\\projects\\kijiji\\server\\client\\src\\components\\PostAdForm.tsx":"22","C:\\projects\\kijiji\\server\\client\\src\\actions\\listing.tsx":"23","C:\\projects\\kijiji\\server\\client\\src\\components\\Loading.tsx":"24","C:\\projects\\kijiji\\server\\client\\src\\constants.tsx":"25","C:\\projects\\kijiji\\server\\client\\src\\components\\Listings.tsx":"26","C:\\projects\\kijiji\\server\\client\\src\\components\\Listing.tsx":"27","C:\\projects\\kijiji\\server\\client\\src\\components\\Pagination.tsx":"28"},{"size":317,"mtime":1608593598124,"results":"29","hashOfConfig":"30"},{"size":364,"mtime":1607913470313,"results":"31","hashOfConfig":"30"},{"size":89,"mtime":1607912608008,"results":"32","hashOfConfig":"30"},{"size":734,"mtime":1609805866961,"results":"33","hashOfConfig":"30"},{"size":2712,"mtime":1609367265369,"results":"34","hashOfConfig":"30"},{"size":1832,"mtime":1608593598103,"results":"35","hashOfConfig":"30"},{"size":683,"mtime":1609793139356,"results":"36","hashOfConfig":"30"},{"size":1486,"mtime":1609799663362,"results":"37","hashOfConfig":"30"},{"size":2281,"mtime":1608593598112,"results":"38","hashOfConfig":"30"},{"size":1789,"mtime":1608593598116,"results":"39","hashOfConfig":"30"},{"size":954,"mtime":1609367265394,"results":"40","hashOfConfig":"30"},{"size":1791,"mtime":1608593598118,"results":"41","hashOfConfig":"30"},{"size":6636,"mtime":1609367265379,"results":"42","hashOfConfig":"30"},{"size":5098,"mtime":1608593598117,"results":"43","hashOfConfig":"30"},{"size":79,"mtime":1609367265360,"results":"44","hashOfConfig":"30"},{"size":824,"mtime":1609615203933,"results":"45","hashOfConfig":"30"},{"size":3441,"mtime":1609367265353,"results":"46","hashOfConfig":"30"},{"size":3816,"mtime":1609367265357,"results":"47","hashOfConfig":"30"},{"size":1288,"mtime":1608593598101,"results":"48","hashOfConfig":"30"},{"size":457,"mtime":1609367265397,"results":"49","hashOfConfig":"30"},{"size":740,"mtime":1609793114034,"results":"50","hashOfConfig":"30"},{"size":14590,"mtime":1609370611484,"results":"51","hashOfConfig":"30"},{"size":6019,"mtime":1609813731922,"results":"52","hashOfConfig":"30"},{"size":244,"mtime":1609367265371,"results":"53","hashOfConfig":"30"},{"size":10816,"mtime":1609367265381,"results":"54","hashOfConfig":"30"},{"size":4954,"mtime":1609813774868,"results":"55","hashOfConfig":"30"},{"size":1526,"mtime":1609625973257,"results":"56","hashOfConfig":"30"},{"size":2104,"mtime":1609809417967,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"1pba2ji",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"60"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"60"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"60"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"60"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"60"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"106","messages":"107","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"60"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"60"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"60"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\projects\\kijiji\\server\\client\\src\\index.tsx",[],["123","124"],"C:\\projects\\kijiji\\server\\client\\src\\components\\App.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\browserHistory.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\components\\Routes.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\components\\Header.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\Root.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\reducers\\index.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\components\\PostAd.tsx",["125","126","127","128","129"],"C:\\projects\\kijiji\\server\\client\\src\\components\\Register.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\components\\SignIn.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\reducers\\authReducer.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\components\\requireAuth.tsx",["130"],"import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { StoreState } from \"../reducers\";\r\nimport { History } from \"history\";\r\nimport { validateToken } from \"../actions\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nimport history from \"../browserHistory\";\r\n\r\nexport interface IHoc {\r\n    authStatus?: string | null;\r\n    history: History;\r\n    validateToken(path: string, retriedCalling: boolean): void;\r\n}\r\n\r\nconst hoc = (ChildComponent: any) => {\r\n    class ComposedComponent extends Component<IHoc> {\r\n        // Our component just got rendered\r\n        //Check for redux store's authStatus\r\n        componentDidMount() {\r\n            this.shouldNavigateAway();\r\n        }\r\n\r\n        // Our component just got updated\r\n        //If our redux store's authStatus changes\r\n        componentDidUpdate() {\r\n            this.shouldNavigateAway();\r\n        }\r\n\r\n        shouldNavigateAway() {\r\n            if (!this.props.authStatus) {\r\n                //if authStatus is empty string\r\n                //history is automatically passed due to React-router\r\n                //If done loading\r\n                this.props.history.push(\"/\");\r\n            } else {\r\n                //When user enter a page,\r\n                //validate access token, if it's not valid, redux's authStatus would be empty\r\n\r\n                this.props.validateToken(history.location.pathname, false);\r\n            }\r\n        }\r\n\r\n        render() {\r\n            return <ChildComponent {...this.props} />;\r\n        }\r\n    }\r\n\r\n    function mapStateToProps(state: StoreState) {\r\n        return {\r\n            authStatus: state.authStatus.authenticated,\r\n        };\r\n    }\r\n\r\n    return connect(mapStateToProps, { validateToken })(ComposedComponent);\r\n};\r\n\r\nexport default hoc;\r\n","C:\\projects\\kijiji\\server\\client\\src\\components\\RegisterForm.tsx",["131","132","133","134","135"],"import React, { ComponentType, useEffect } from \"react\";\r\nimport {\r\n    Field,\r\n    reduxForm,\r\n    reset,\r\n    change,\r\n    FormErrors,\r\n    InjectedFormProps,\r\n} from \"redux-form\";\r\n//compose is used to make it easier to \"organize\" mapStateToProps and redux form\r\nimport { StoreState } from \"../reducers\";\r\nimport { connect } from \"react-redux\";\r\nimport { RegisterFormProps } from \"./Register\";\r\n//Re-usable component\r\nexport interface RegisterFormValues {\r\n    email: string;\r\n    firstName: string;\r\n    lastName: string;\r\n    password: string;\r\n}\r\n\r\n//Typescriptand redux form:\r\n//https://levelup.gitconnected.com/react-js-typescript-redux-redux-form-jest-e522995ebe36\r\n\r\n//Need to hoist render methods up or else it will give error where it will unfocus after first characther is typed\r\n//https://stackoverflow.com/questions/39839051/using-redux-form-im-losing-focus-after-typing-the-first-character\r\n\r\nconst renderError = ({ error, touched }: any) => {\r\n    if (touched && error) {\r\n        //Touched (for input) will be false at first\r\n        //When clicked and then clicked otuside of the input, it will be true\r\n        return <div className=\"errorText\">{error}</div>;\r\n    }\r\n};\r\n\r\nconst renderTextInput = ({ input, label, meta, placeHolder }: any) => {\r\n    //\"component\" property automatically passes props to argument, it has {input properties and meta properties}\r\n    //\"label\" automatically passes props to arguments\r\n    return (\r\n        <div>\r\n            <label>{label}</label>\r\n            <input\r\n                data-testid=\"registerTextInput\"\r\n                className=\"createAuthInputs\"\r\n                {...input}\r\n                autoComplete=\"off\"\r\n            />\r\n            {renderError(meta)}\r\n        </div>\r\n    );\r\n    //{..input} is shortcut for redux-form; where you take all the input from \"component's\" props and pass it as\r\n    //props to <input>\r\n};\r\n\r\nconst renderPasswordInput = ({ input, label, meta, placeHolder }: any) => {\r\n    return (\r\n        <div>\r\n            <label>{label}</label>\r\n            <input\r\n                className=\"createAuthInputs\"\r\n                type=\"password\"\r\n                {...input}\r\n                autoComplete=\"off\"\r\n            />\r\n            {renderError(meta)}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst RegisterForm: React.FC<\r\n    RegisterFormProps & InjectedFormProps<{}, RegisterFormProps>\r\n> = (props) => {\r\n    const onSubmit = (formValues: any, dispatch: any) => {\r\n        //onSubmit's default param is any\r\n        //event.preventDefault() is automatically called with handleSubmit, a redux-form property\r\n        //form values are the values from the fields that redux-form automatiacally passes\r\n        //after clicking the submit button\r\n        //dispatch(reset(\"registerForm\"));\r\n        props.onSubmit(formValues);\r\n\r\n        //dispatch(change(\"registerForm\", \"password\", \"\"));\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <form className=\"authForm\" onSubmit={props.handleSubmit(onSubmit)}>\r\n                <h1>Register</h1>\r\n                <div className=\"authFieldSection\">\r\n                    <div className=\"authFormFieldTitleWrap\">\r\n                        <h1>Email</h1>\r\n                        <h3 className=\"authFormFieldTitleEmailInUse\">\r\n                            {props.authStatus}\r\n                        </h3>\r\n                    </div>\r\n                    <Field\r\n                        name=\"email\"\r\n                        type=\"text\"\r\n                        component={renderTextInput}\r\n                    />\r\n                </div>\r\n                <div className=\"authFieldSection\">\r\n                    <div className=\"authFormFieldTitleWrap\">\r\n                        <h1>First Name</h1>\r\n                        <h3 className=\"authFormFieldTitleEmailInUse\">\r\n                            {props.authStatus}\r\n                        </h3>\r\n                    </div>\r\n                    <Field\r\n                        name=\"firstName\"\r\n                        type=\"text\"\r\n                        component={renderTextInput}\r\n                    />\r\n                </div>\r\n                <div className=\"authFieldSection\">\r\n                    <div className=\"authFormFieldTitleWrap\">\r\n                        <h1>Last Name</h1>\r\n                        <h3 className=\"authFormFieldTitleEmailInUse\">\r\n                            {props.authStatus}\r\n                        </h3>\r\n                    </div>\r\n                    <Field\r\n                        name=\"lastName\"\r\n                        type=\"text\"\r\n                        component={renderTextInput}\r\n                    />\r\n                </div>\r\n                <div className=\"authFieldSection\">\r\n                    <div className=\"authFormFieldTitleWrap\">\r\n                        <h1>Password</h1>\r\n                        <h3 className=\"authFormFieldTitleEmailInUse\">\r\n                            {props.authStatus}\r\n                        </h3>\r\n                    </div>\r\n                    <Field\r\n                        name=\"password\"\r\n                        type=\"password\"\r\n                        component={renderPasswordInput}\r\n                    />\r\n                </div>\r\n\r\n                <button data-testid=\"registerButton\" className=\"authButton\">\r\n                    Register\r\n                </button>\r\n            </form>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nconst validate = (\r\n    formValues: RegisterFormValues\r\n): FormErrors<RegisterFormValues> => {\r\n    //MUST BE NAMED VALIDATE! Other names would be ignored by reduxForm(..)\r\n    const errors: FormErrors<RegisterFormValues> = {};\r\n    //If you return an empty object, redux form will assume everything is ok\r\n    if (!formValues.email) {\r\n        //user did not enter title, so undefined\r\n        errors.email = \"You must enter an email\";\r\n        //Must be the same name as field name! The \"error\" property in {meta} would receive this\r\n    }\r\n\r\n    if (!formValues.firstName) {\r\n        errors.firstName = \"You must enter your first name\";\r\n    }\r\n\r\n    if (!formValues.lastName) {\r\n        errors.lastName = \"You must enter your last name\";\r\n    }\r\n    if (!formValues.password) {\r\n        errors.password = \"You must enter a password\";\r\n    }\r\n\r\n    return errors;\r\n    //Erors is going to be passed to renderInput's meta\r\n};\r\n\r\n// const mapStateToProps = (state: StoreState) => {\r\n//     return {\r\n//         authStatus: state.authStatus.errorMessage,\r\n//     };\r\n// };\r\n\r\nexport default connect()(\r\n    reduxForm<{}, RegisterFormProps>({\r\n        form: \"registerForm\",\r\n        validate,\r\n    })(RegisterForm)\r\n);\r\n","C:\\projects\\kijiji\\server\\client\\src\\components\\SignInForm.tsx",["136","137","138","139"],"import React, { ComponentType, useEffect } from \"react\";\r\nimport {\r\n    Field,\r\n    reduxForm,\r\n    reset,\r\n    change,\r\n    FormErrors,\r\n    InjectedFormProps,\r\n} from \"redux-form\";\r\n//compose is used to make it easier to \"organize\" mapStateToProps and redux form\r\nimport { StoreState } from \"../reducers\";\r\nimport { connect } from \"react-redux\";\r\nimport { SignInFormProps } from \"./SignIn\";\r\n//Re-usable component\r\nexport interface SignInFormValues {\r\n    email: string;\r\n    password: string;\r\n}\r\n\r\n//Typescriptand redux form:\r\n//https://levelup.gitconnected.com/react-js-typescript-redux-redux-form-jest-e522995ebe36\r\n\r\n//Need to hoist render methods up or else it will give error where it will unfocus after first characther is typed\r\n//https://stackoverflow.com/questions/39839051/using-redux-form-im-losing-focus-after-typing-the-first-character\r\n\r\nconst renderError = ({ error, touched }: any) => {\r\n    if (touched && error) {\r\n        //Touched (for input) will be false at first\r\n        //When clicked and then clicked otuside of the input, it will be true\r\n        return <div className=\"errorText\">{error}</div>;\r\n    }\r\n};\r\n\r\nconst renderTextInput = ({ input, label, meta, placeHolder }: any) => {\r\n    //\"component\" property automatically passes props to argument, it has {input properties and meta properties}\r\n    //\"label\" automatically passes props to arguments\r\n    return (\r\n        <div>\r\n            <label>{label}</label>\r\n            <input className=\"createAuthInputs\" {...input} autoComplete=\"off\" />\r\n            {renderError(meta)}\r\n        </div>\r\n    );\r\n    //{..input} is shortcut for redux-form; where you take all the input from \"component's\" props and pass it as\r\n    //props to <input>\r\n};\r\n\r\nconst renderPasswordInput = ({ input, label, meta, placeHolder }: any) => {\r\n    return (\r\n        <div>\r\n            <label>{label}</label>\r\n            <input\r\n                className=\"createAuthInputs\"\r\n                type=\"password\"\r\n                {...input}\r\n                autoComplete=\"off\"\r\n            />\r\n            {renderError(meta)}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst SignInForm: React.FC<\r\n    SignInFormProps & InjectedFormProps<{}, SignInFormProps>\r\n> = (props) => {\r\n    const onSubmit = (formValues: any, dispatch: any) => {\r\n        //onSubmit's default param is any\r\n        //event.preventDefault() is automatically called with handleSubmit, a redux-form property\r\n        //form values are the values from the fields that redux-form automatiacally passes\r\n        //after clicking the submit button\r\n        //dispatch(reset(\"registerForm\"));\r\n        props.onSubmit(formValues);\r\n        // dispatch(change(\"signInForm\", \"password\", \"\"));\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <form className=\"authForm\" onSubmit={props.handleSubmit(onSubmit)}>\r\n                <h1>Sign In</h1>\r\n                <div className=\"authFieldSection\">\r\n                    <div className=\"authFormFieldTitleWrap\">\r\n                        <h1>Email</h1>\r\n                        <h3 className=\"authFormFieldTitleEmailInUse\">\r\n                            {props.authStatus}\r\n                        </h3>\r\n                    </div>\r\n                    <Field\r\n                        name=\"email\"\r\n                        type=\"text\"\r\n                        component={renderTextInput}\r\n                    />\r\n                </div>\r\n                <div className=\"authFieldSection\">\r\n                    <div className=\"authFormFieldTitleWrap\">\r\n                        <h1>Password</h1>\r\n                        <h3 className=\"authFormFieldTitleEmailInUse\">\r\n                            {props.authStatus}\r\n                        </h3>\r\n                    </div>\r\n                    <Field\r\n                        name=\"password\"\r\n                        type=\"password\"\r\n                        component={renderPasswordInput}\r\n                    />\r\n                </div>\r\n\r\n                <button className=\"authButton\">Sign In</button>\r\n            </form>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nconst validate = (\r\n    formValues: SignInFormValues\r\n): FormErrors<SignInFormValues> => {\r\n    //MUST BE NAMED VALIDATE! Other names would be ignored by reduxForm(..)\r\n    const errors: FormErrors<SignInFormValues> = {};\r\n    //If you return an empty object, redux form will assume everything is ok\r\n    if (!formValues.email) {\r\n        //user did not enter title, so undefined\r\n        errors.email = \"You must enter an email\";\r\n        //Must be the same name as field name! The \"error\" property in {meta} would receive this\r\n    }\r\n    if (!formValues.password) {\r\n        errors.password = \"You must enter a password\";\r\n    }\r\n    return errors;\r\n    //Erors is going to be passed to renderInput's meta\r\n};\r\n\r\nconst mapStateToProps = (state: StoreState) => {\r\n    return {\r\n        authStatus: state.authStatus.errorMessage,\r\n    };\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    {}\r\n)(\r\n    reduxForm<{}, SignInFormProps>({\r\n        form: \"signInForm\",\r\n        validate,\r\n    })(SignInForm)\r\n);\r\n","C:\\projects\\kijiji\\server\\client\\src\\actions\\index.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\actions\\types.tsx",["140"],"import {\r\n    AuthUserAction,\r\n    AuthErrorAction,\r\n    FetchCategoriesForListingAction,\r\n    FetchCategoriesForListingErrorAction,\r\n    UploadImageToCloudinaryAction,\r\n    CreateListingAction,\r\n    ListingErrorAction,\r\n    FetchListingsAction,\r\n} from \"../actions\";\r\nexport enum ActionTypes {\r\n    AUTH_USER,\r\n    AUTH_ERROR,\r\n    FETCH_CATEGORIES_FOR_LISTING,\r\n    FETCH_CATEGORIES_FOR_LISTING_ERROR,\r\n    UPLOAD_IMAGE_TO_CLOUDINARY,\r\n    CREATE_LISTING,\r\n    LISTING_ERROR,\r\n    FETCH_LISTINGS,\r\n}\r\nexport type AuthActions = AuthUserAction | AuthErrorAction;\r\nexport type FetchCategoriesActions =\r\n    | FetchCategoriesForListingAction\r\n    | FetchCategoriesForListingErrorAction;\r\nexport type ListingAction =\r\n    // | UploadImageToCloudinaryAction\r\n    CreateListingAction | ListingErrorAction | FetchListingsAction;\r\n","C:\\projects\\kijiji\\server\\client\\src\\actions\\auth.tsx",["141","142"],"import { ActionTypes } from \"./types\";\r\nimport auth from \"./axiosConfig\";\r\nimport { Dispatch } from \"redux\";\r\nimport history from \"../browserHistory\";\r\nimport CookieService from \"../CookieService\";\r\n\r\nexport interface JWTType {\r\n    token: string;\r\n}\r\nexport interface AuthUserAction {\r\n    type: ActionTypes.AUTH_USER;\r\n    payload: JWTType;\r\n}\r\nexport interface AuthErrorAction {\r\n    type: ActionTypes.AUTH_ERROR;\r\n    payload: string;\r\n}\r\n\r\nexport const signUp = (formValues: any) => async (dispatch: Dispatch) => {\r\n    try {\r\n        const response = await auth.post<JWTType>(\"/signup\", formValues);\r\n        dispatch<AuthUserAction>({\r\n            type: ActionTypes.AUTH_USER,\r\n            payload: response.data,\r\n        });\r\n        //Save token to local storage so that we could persist login state, keep user log in\r\n        // localStorage.setItem(\"token\", response.data.token);\r\n        // history.push(\"/walkman\");\r\n    } catch (err) {\r\n        dispatch<AuthErrorAction>({\r\n            type: ActionTypes.AUTH_ERROR,\r\n            payload: \"- Email is in use\",\r\n        });\r\n    }\r\n};\r\nexport const signIn = (formValues: any) => async (dispatch: Dispatch) => {\r\n    try {\r\n        const response = await auth.post<JWTType>(\"/signin\", formValues);\r\n        dispatch<AuthUserAction>({\r\n            type: ActionTypes.AUTH_USER,\r\n            payload: response.data,\r\n        });\r\n        //Save token to local storage so that we could persist login state, keep user log in\r\n        //localStorage.setItem(\"token\", response.data.token);\r\n        //history.push(\"/walkman\");\r\n    } catch (err) {\r\n        // if (err.message === \"Network Error\") {\r\n        //     console.log(\"check error\", err);\r\n        // }\r\n\r\n        dispatch<AuthErrorAction>({\r\n            type: ActionTypes.AUTH_ERROR,\r\n            payload: \"- Invalid login credentials\",\r\n        });\r\n    }\r\n};\r\n\r\nexport const signOut = () => async (dispatch: Dispatch) => {\r\n    try {\r\n        const response = await auth.post<JWTType>(\"/signout\");\r\n        dispatch<AuthUserAction>({\r\n            type: ActionTypes.AUTH_USER,\r\n            payload: response.data,\r\n        });\r\n        alert(\"Logged out succesfully\");\r\n    } catch (err) {\r\n        alert(\"Log out failed, try again\");\r\n    }\r\n};\r\n\r\nexport const validateToken = (path: string, retriedCalling: boolean) => async (\r\n    dispatch: Dispatch\r\n) => {\r\n    try {\r\n        const response = await auth.post<JWTType>(\r\n            path,\r\n            {}\r\n            // { headers: { Authorization: cookieService.getAccessToken() } } //assigned in axios' interceptors.request\r\n        );\r\n        //Ensures that our current access token is the newest one; if a new access token is given,\r\n        //we will update our current access token\r\n\r\n        //requireAuth HOC relies on the dispatch below\r\n        dispatch<AuthUserAction>({\r\n            type: ActionTypes.AUTH_USER,\r\n            payload: response.data,\r\n        });\r\n    } catch (err) {\r\n        if (retriedCalling === true) {\r\n            // If it fails again with the new access token (might be a forged token)\r\n            // Invalid token, kick our users out from a certain resource only accecible to signed in users\r\n            // dispatch<AuthErrorAction>({\r\n            //     type: ActionTypes.AUTH_ERROR,\r\n            //     payload: \"\",\r\n            // });\r\n\r\n            //Log them out\r\n            dispatch(signOut() as any);\r\n        }\r\n    }\r\n};\r\n","C:\\projects\\kijiji\\server\\client\\src\\actions\\axiosConfig.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\CookieService.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\reducers\\categoryReducer.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\reducers\\listingReducer.tsx",["143","144"],"C:\\projects\\kijiji\\server\\client\\src\\components\\PostAdForm.tsx",["145","146"],"import React, { useRef, useEffect, useState } from \"react\";\r\nimport {\r\n    Field,\r\n    reduxForm,\r\n    reset,\r\n    change,\r\n    FormErrors,\r\n    InjectedFormProps,\r\n} from \"redux-form\";\r\n//compose is used to make it easier to \"organize\" mapStateToProps and redux form\r\nimport { StoreState } from \"../reducers\";\r\nimport { connect } from \"react-redux\";\r\nimport { PostAdFormProps } from \"./PostAd\";\r\nimport postAdListingImagePlaceHolder from \"../img/postAdListingImagePlaceHolder.png\";\r\nimport { CANADIAN_PROVINCES, CANADIAN_PROVINCE_AND_CITIES } from \"../constants\";\r\nimport { formValueSelector } from \"redux-form\";\r\nimport { fetchCategoriesForListing } from \"../actions\";\r\nimport Loading from \"./Loading\";\r\nexport interface PostAdFormValues {\r\n    title: string;\r\n    description: string;\r\n    category: string;\r\n    image: any;\r\n    province: string;\r\n    city: string;\r\n    street: string;\r\n    price: number;\r\n}\r\n\r\nconst renderError = ({ error, touched }: any) => {\r\n    if (touched && error) {\r\n        //Touched (for input) will be false at first\r\n        //When clicked and then clicked otuside of the input, it will be true\r\n        return <div className=\"errorText\">{error}</div>;\r\n    }\r\n};\r\n\r\nconst renderTextInput = ({ input, label, meta, placeHolder }: any) => {\r\n    //\"component\" property automatically passes props to argument, it has {input properties and meta properties}\r\n    //\"label\" automatically passes props to arguments\r\n    return (\r\n        <div>\r\n            {/* <label>{label}</label> */}\r\n            <input\r\n                className=\"createPostAdInputs\"\r\n                {...input}\r\n                autoComplete=\"off\"\r\n            />\r\n            {renderError(meta)}\r\n        </div>\r\n    );\r\n    //{..input} is shortcut for redux-form; where you take all the input from \"component's\" props and pass it as\r\n    //props to <input>\r\n};\r\n\r\nconst renderTextArea = ({ input, label, meta, placeHolder }: any) => {\r\n    return (\r\n        <div className=\"postAdTextAreaWrap\">\r\n            {/* <label>{label}</label> */}\r\n            <textarea\r\n                className=\"createPostAdTextArea\"\r\n                {...input}\r\n                autoComplete=\"off\"\r\n            />\r\n            {renderError(meta)}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst renderDropDown = ({\r\n    input,\r\n    label,\r\n    meta,\r\n    placeHolder,\r\n    optionValues,\r\n}: any) => {\r\n    return (\r\n        <div>\r\n            {/* <label>{label}</label> */}\r\n            <select\r\n                className=\"createPostAdDropDown\"\r\n                {...input}\r\n                autoComplete=\"off\"\r\n            >\r\n                <option></option>\r\n                {optionValues.map((val) => (\r\n                    <option key={val} value={val}>\r\n                        {val}\r\n                    </option>\r\n                ))}\r\n            </select>\r\n\r\n            {renderError(meta)}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst formatAmount = (input) => {\r\n    //For price input, from: https://blog.harveydelaney.com/redux-form-lifecycle-example/\r\n    if (!input) return;\r\n    if (isNaN(parseInt(input[input.length - 1], 10))) {\r\n        return input.slice(0, -1);\r\n    }\r\n    return input.replace(/,/g, \"\").replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n};\r\n\r\nconst normalizeAmount = (val) => {\r\n    //For price input, from: https://blog.harveydelaney.com/redux-form-lifecycle-example/\r\n    return val.replace(/,/g, \"\");\r\n};\r\n\r\nconst renderFieldSectionLayout = (title: string, children: JSX.Element) => {\r\n    return (\r\n        <div className=\"postAdFieldSection\">\r\n            <div className=\"postAdFieldTitleWrap\">\r\n                <h1>{title}</h1>\r\n            </div>\r\n            {children}\r\n        </div>\r\n    );\r\n};\r\nconst PostAdForm: React.FC<\r\n    PostAdFormProps & InjectedFormProps<{}, PostAdFormProps>\r\n> = (props) => {\r\n    const onSubmit = (formValues: any, dispatch: any) => {\r\n        props.onSubmit(formValues);\r\n    };\r\n\r\n    const renderFields = (): JSX.Element => {\r\n        if (props.categories.length === 0)\r\n            return (\r\n                <div className=\"loadingCenter\">\r\n                    <Loading />\r\n                </div>\r\n            );\r\n        else {\r\n            return (\r\n                <form\r\n                    className=\"postAdForm\"\r\n                    onSubmit={props.handleSubmit(onSubmit)}\r\n                >\r\n                    {renderFieldSectionLayout(\r\n                        \"Ad Title\",\r\n                        <Field\r\n                            name=\"title\"\r\n                            type=\"text\"\r\n                            // label=\"Ad Title\"\r\n                            component={renderTextInput}\r\n                        />\r\n                    )}\r\n\r\n                    {renderFieldSectionLayout(\r\n                        \"Description\",\r\n                        <Field\r\n                            name=\"description\"\r\n                            type=\"text\"\r\n                            component={renderTextArea}\r\n                        />\r\n                    )}\r\n\r\n                    {renderFieldSectionLayout(\r\n                        \"Category\",\r\n                        <Field\r\n                            name=\"category\"\r\n                            component={renderDropDown}\r\n                            optionValues={props.categories}\r\n                        ></Field>\r\n                    )}\r\n\r\n                    {renderFieldSectionLayout(\r\n                        \"Add a photo for your ad\",\r\n                        <React.Fragment>\r\n                            <Field\r\n                                name=\"image\"\r\n                                type=\"file\"\r\n                                component={renderImageUpload}\r\n                                ref={openFileExplorer}\r\n                                value={listingImage}\r\n                                onChange={(event) => {\r\n                                    //For some reason,\r\n                                    //The input's text dosen't change but the input is actually inserted (do formValues.image below)\r\n                                    setListingImage(\r\n                                        URL.createObjectURL(\r\n                                            event.target.files[0]\r\n                                        )\r\n                                    );\r\n                                    // console.log(\r\n                                    //     `Selected file - ${event.target.files[0].name}`\r\n                                    // );\r\n                                    //https://medium.com/@650egor/react-30-day-challenge-day-2-image-upload-preview-2d534f8eaaa\r\n                                }}\r\n                                withRef\r\n                            />\r\n                            <div className=\"imageUploadWrapper\">\r\n                                <input\r\n                                    type=\"button\"\r\n                                    value={listingImage ? \"\" : \"Choose Files!\"}\r\n                                    className=\"postAdChooseListingImage\"\r\n                                    onClick={() =>\r\n                                        openFileExplorer.current.click()\r\n                                    }\r\n                                    style={\r\n                                        listingImage\r\n                                            ? {\r\n                                                  backgroundImage: `url(${listingImage})`,\r\n                                                  backgroundPosition: \"center\",\r\n                                                  backgroundSize: \"cover\",\r\n                                                  backgroundColor: \"white\",\r\n                                              }\r\n                                            : {\r\n                                                  backgroundImage: `url(${postAdListingImagePlaceHolder})`,\r\n                                              }\r\n                                    }\r\n                                />\r\n                                {listingImage && (\r\n                                    <h3\r\n                                        className=\"removeUploadedImage\"\r\n                                        onClick={() => {\r\n                                            setListingImage(null);\r\n                                            props.dispatch(\r\n                                                change(\r\n                                                    \"postAdForm\",\r\n                                                    \"image\",\r\n                                                    null\r\n                                                )\r\n                                            );\r\n                                        }}\r\n                                    >\r\n                                        Remove\r\n                                    </h3>\r\n                                )}\r\n                            </div>\r\n                        </React.Fragment>\r\n                    )}\r\n                    {renderFieldSectionLayout(\r\n                        \"Province\",\r\n                        <Field\r\n                            name=\"province\"\r\n                            type=\"text\"\r\n                            component={renderDropDown}\r\n                            optionValues={CANADIAN_PROVINCES.map((province) => {\r\n                                return province.name;\r\n                            })}\r\n                        />\r\n                    )}\r\n\r\n                    {renderFieldSectionLayout(\r\n                        \"City\",\r\n                        <Field\r\n                            name=\"city\"\r\n                            type=\"text\"\r\n                            component={renderDropDown}\r\n                            optionValues={\r\n                                !props.provinceValue\r\n                                    ? []\r\n                                    : CANADIAN_PROVINCE_AND_CITIES.filter(\r\n                                          (provinceAndCity) =>\r\n                                              provinceAndCity.province ===\r\n                                              props.provinceValue\r\n                                      )[0].cities\r\n                            }\r\n                        />\r\n                    )}\r\n\r\n                    {renderFieldSectionLayout(\r\n                        \"Street\",\r\n                        <Field\r\n                            name=\"street\"\r\n                            type=\"text\"\r\n                            component={renderTextInput}\r\n                        />\r\n                    )}\r\n                    {renderFieldSectionLayout(\r\n                        \"Price ($ CAD)\",\r\n                        <Field\r\n                            name=\"price\"\r\n                            type=\"text\"\r\n                            format={formatAmount}\r\n                            normalize={normalizeAmount}\r\n                            component={renderTextInput}\r\n                        />\r\n                    )}\r\n\r\n                    <button className=\"postAdFormSubmit\">Post Your Ad</button>\r\n                </form>\r\n            );\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        props.fetchCategoriesForListing();\r\n        //props.dispatch(change(\"postAdForm\", \"image\", \"hi\"));\r\n        // props.dispatch(change(\"postAdForm\", \"description\", \"hi\"));\r\n    }, []);\r\n\r\n    const renderImageUpload = ({\r\n        input,\r\n        label,\r\n        meta,\r\n        placeHolder,\r\n        optionValues,\r\n    }: any) => {\r\n        //We cannot pass in {...input} (so that the input is submited when onSubmit button is clicked) like our other renders because <input> has type=\"file\"\r\n        //Must do this instead: https://github.com/redux-form/redux-form/issues/3686\r\n\r\n        return (\r\n            <input\r\n                type=\"file\"\r\n                accept=\"image/*\"\r\n                style={{ display: \"none\" }}\r\n                ref={openFileExplorer}\r\n                onChange={(...args) => {\r\n                    //The input's text dosen't change but the input is actually inserted (do formValues.image below)\r\n                    //  let event = args.map((val) => val.nativeEvent)[0];\r\n                    input.onChange(...args);\r\n                    //@ts-ignore\r\n                    // setListingImage(URL.createObjectURL(event.target.files[0]));\r\n                    //chagne also dosen't change the textbox input\r\n                    // props.dispatch(\r\n                    //     change(\"postAdForm\", \"image\", event.target.files[0])\r\n                    // );\r\n                }}\r\n            />\r\n        );\r\n    };\r\n\r\n    const [listingImage, setListingImage] = useState(null);\r\n\r\n    const openFileExplorer = useRef(null);\r\n\r\n    return <React.Fragment>{renderFields()}</React.Fragment>;\r\n};\r\n\r\nconst validate = (\r\n    formValues: PostAdFormValues\r\n): FormErrors<PostAdFormValues> => {\r\n    //MUST BE NAMED VALIDATE! Other names would be ignored by reduxForm(..)\r\n    const errors: FormErrors<PostAdFormValues> = {};\r\n    //If you return an empty object, redux form will assume everything is ok\r\n    // console.log(\"FILE UPLOAD VALUE\", formValues.image);\r\n    if (!formValues.title) {\r\n        //user did not enter title, so undefined\r\n        errors.title = \"You must enter a title\";\r\n        //Must be the same name as field name! The \"error\" property in {meta} would receive this\r\n    }\r\n\r\n    if (!formValues.description) {\r\n        errors.description = \"You must enter a description\";\r\n    }\r\n\r\n    if (!formValues.category) {\r\n        errors.category = \"You must enter a category\";\r\n    }\r\n\r\n    if (!formValues.province) {\r\n        errors.province = \"You must enter a province\";\r\n    }\r\n\r\n    if (!formValues.city) {\r\n        errors.city = \"You must enter a city\";\r\n    }\r\n\r\n    if (!formValues.street) {\r\n        errors.street = \"You must enter a street\";\r\n    }\r\n    if (!formValues.price) {\r\n        errors.price = \"You must enter a price\";\r\n    }\r\n\r\n    return errors;\r\n    //Erors is going to be passed to renderInput's meta\r\n};\r\nconst selector = formValueSelector(\"postAdForm\");\r\n//get form values with formvalueSelector\r\n//https://redux-form.com/6.6.0/docs/api/formvalueselector.md/\r\nconst mapStateToProps = (state: StoreState) => {\r\n    return {\r\n        categories: state.categories,\r\n        provinceValue: selector(state, \"province\"),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, { fetchCategoriesForListing })(\r\n    reduxForm<{}, PostAdFormProps>({\r\n        form: \"postAdForm\",\r\n        validate,\r\n    })(PostAdForm)\r\n);\r\n","C:\\projects\\kijiji\\server\\client\\src\\actions\\listing.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\components\\Loading.tsx",["147"],"import React from \"react\";\r\nimport { css } from \"@emotion/core\";\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\nconst Loading = (): JSX.Element => {\r\n    return <ClipLoader color={\"grey\"} loading={true} />;\r\n};\r\nexport default Loading;\r\n","C:\\projects\\kijiji\\server\\client\\src\\constants.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\components\\Listings.tsx",["148","149","150","151","152"],"C:\\projects\\kijiji\\server\\client\\src\\components\\Listing.tsx",["153","154"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { StoreState } from \"../reducers\";\r\nimport { Listing as ListingType } from \"../actions\";\r\nimport moment from \"moment\";\r\n\r\nconst Listing: React.FC<ListingType> = ({\r\n    listing_id,\r\n    listing_name,\r\n    listing_image,\r\n    listing_price,\r\n    listing_description,\r\n    listing_date,\r\n    province,\r\n    city,\r\n    street,\r\n}) => {\r\n    return (\r\n        <div className=\"listingPreviewContainer\">\r\n            <div className=\"listingPreviewImageContainer\">\r\n                <img src={listing_image} alt=\"listing\" />\r\n            </div>\r\n            <div className=\"listingPreviewInfoWrap\">\r\n                <div className=\"titleAndPriceWrap\">\r\n                    <h1 className=\"title\">{listing_name}</h1>\r\n                    <h1 className=\"price\">${listing_price}</h1>\r\n                </div>\r\n                <div className=\"locationAndDateWrap\">\r\n                    <h3 className=\"location\">{`${city}, ${province} at ${street} `}</h3>\r\n\r\n                    <h3 className=\"date\">\r\n                        {moment(listing_date).format(\"YYYY/MM/DD\")}\r\n                    </h3>\r\n                </div>\r\n                <p className=\"listingDescription\">{listing_description}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: StoreState) => {\r\n    return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, {})(Listing);\r\n","C:\\projects\\kijiji\\server\\client\\src\\components\\Pagination.tsx",["155","156","157","158"],{"ruleId":"159","replacedBy":"160"},{"ruleId":"161","replacedBy":"162"},{"ruleId":"163","severity":1,"message":"164","line":1,"column":28,"nodeType":"165","messageId":"166","endLine":1,"endColumn":36},{"ruleId":"163","severity":1,"message":"167","line":2,"column":10,"nodeType":"165","messageId":"166","endLine":2,"endColumn":14},{"ruleId":"163","severity":1,"message":"168","line":2,"column":16,"nodeType":"165","messageId":"166","endLine":2,"endColumn":27},{"ruleId":"163","severity":1,"message":"169","line":6,"column":10,"nodeType":"165","messageId":"166","endLine":6,"endColumn":20},{"ruleId":"163","severity":1,"message":"170","line":7,"column":25,"nodeType":"165","messageId":"166","endLine":7,"endColumn":32},{"ruleId":"163","severity":1,"message":"168","line":6,"column":10,"nodeType":"165","messageId":"166","endLine":6,"endColumn":21},{"ruleId":"163","severity":1,"message":"171","line":1,"column":17,"nodeType":"165","messageId":"166","endLine":1,"endColumn":30},{"ruleId":"163","severity":1,"message":"172","line":1,"column":32,"nodeType":"165","messageId":"166","endLine":1,"endColumn":41},{"ruleId":"163","severity":1,"message":"173","line":5,"column":5,"nodeType":"165","messageId":"166","endLine":5,"endColumn":10},{"ruleId":"163","severity":1,"message":"174","line":6,"column":5,"nodeType":"165","messageId":"166","endLine":6,"endColumn":11},{"ruleId":"163","severity":1,"message":"169","line":11,"column":10,"nodeType":"165","messageId":"166","endLine":11,"endColumn":20},{"ruleId":"163","severity":1,"message":"171","line":1,"column":17,"nodeType":"165","messageId":"166","endLine":1,"endColumn":30},{"ruleId":"163","severity":1,"message":"172","line":1,"column":32,"nodeType":"165","messageId":"166","endLine":1,"endColumn":41},{"ruleId":"163","severity":1,"message":"173","line":5,"column":5,"nodeType":"165","messageId":"166","endLine":5,"endColumn":10},{"ruleId":"163","severity":1,"message":"174","line":6,"column":5,"nodeType":"165","messageId":"166","endLine":6,"endColumn":11},{"ruleId":"163","severity":1,"message":"175","line":6,"column":5,"nodeType":"165","messageId":"166","endLine":6,"endColumn":34},{"ruleId":"163","severity":1,"message":"176","line":4,"column":8,"nodeType":"165","messageId":"166","endLine":4,"endColumn":15},{"ruleId":"163","severity":1,"message":"177","line":5,"column":8,"nodeType":"165","messageId":"166","endLine":5,"endColumn":21},{"ruleId":"163","severity":1,"message":"170","line":2,"column":10,"nodeType":"165","messageId":"166","endLine":2,"endColumn":17},{"ruleId":"163","severity":1,"message":"178","line":3,"column":8,"nodeType":"165","messageId":"166","endLine":3,"endColumn":9},{"ruleId":"163","severity":1,"message":"173","line":5,"column":5,"nodeType":"165","messageId":"166","endLine":5,"endColumn":10},{"ruleId":"179","severity":1,"message":"180","line":294,"column":8,"nodeType":"181","endLine":294,"endColumn":10,"suggestions":"182"},{"ruleId":"163","severity":1,"message":"183","line":2,"column":10,"nodeType":"165","messageId":"166","endLine":2,"endColumn":13},{"ruleId":"163","severity":1,"message":"164","line":1,"column":28,"nodeType":"165","messageId":"166","endLine":1,"endColumn":36},{"ruleId":"163","severity":1,"message":"167","line":2,"column":10,"nodeType":"165","messageId":"166","endLine":2,"endColumn":14},{"ruleId":"163","severity":1,"message":"184","line":3,"column":10,"nodeType":"165","messageId":"166","endLine":3,"endColumn":20},{"ruleId":"163","severity":1,"message":"185","line":36,"column":11,"nodeType":"165","messageId":"166","endLine":36,"endColumn":17},{"ruleId":"179","severity":1,"message":"180","line":105,"column":8,"nodeType":"181","endLine":105,"endColumn":10,"suggestions":"186"},{"ruleId":"163","severity":1,"message":"167","line":2,"column":10,"nodeType":"165","messageId":"166","endLine":2,"endColumn":14},{"ruleId":"163","severity":1,"message":"184","line":3,"column":10,"nodeType":"165","messageId":"166","endLine":3,"endColumn":20},{"ruleId":"163","severity":1,"message":"172","line":1,"column":17,"nodeType":"165","messageId":"166","endLine":1,"endColumn":26},{"ruleId":"163","severity":1,"message":"187","line":4,"column":10,"nodeType":"165","messageId":"166","endLine":4,"endColumn":17},{"ruleId":"163","severity":1,"message":"169","line":5,"column":10,"nodeType":"165","messageId":"166","endLine":5,"endColumn":20},{"ruleId":"163","severity":1,"message":"176","line":7,"column":8,"nodeType":"165","messageId":"166","endLine":7,"endColumn":15},"no-native-reassign",["188"],"no-negated-in-lhs",["189"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'useLocation' is defined but never used.","'StoreState' is defined but never used.","'Listing' is defined but never used.","'ComponentType' is defined but never used.","'useEffect' is defined but never used.","'reset' is defined but never used.","'change' is defined but never used.","'UploadImageToCloudinaryAction' is defined but never used.","'history' is defined but never used.","'CookieService' is defined but never used.","'_' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["190"],"'css' is defined but never used.","'useHistory' is defined but never used.","'values' is assigned a value but never used.",["191"],"'signOut' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"192","fix":"193"},{"desc":"192","fix":"194"},"Update the dependencies array to be: [props]",{"range":"195","text":"196"},{"range":"197","text":"196"},[11396,11398],"[props]",[4363,4365]]