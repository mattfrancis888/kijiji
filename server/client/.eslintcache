[{"C:\\projects\\kijiji\\server\\client\\src\\index.tsx":"1","C:\\projects\\kijiji\\server\\client\\src\\components\\App.tsx":"2","C:\\projects\\kijiji\\server\\client\\src\\browserHistory.tsx":"3","C:\\projects\\kijiji\\server\\client\\src\\components\\Routes.tsx":"4","C:\\projects\\kijiji\\server\\client\\src\\components\\Header.tsx":"5","C:\\projects\\kijiji\\server\\client\\src\\Root.tsx":"6","C:\\projects\\kijiji\\server\\client\\src\\reducers\\index.tsx":"7","C:\\projects\\kijiji\\server\\client\\src\\components\\PostAd.tsx":"8","C:\\projects\\kijiji\\server\\client\\src\\components\\Register.tsx":"9","C:\\projects\\kijiji\\server\\client\\src\\components\\SignIn.tsx":"10","C:\\projects\\kijiji\\server\\client\\src\\reducers\\authReducer.tsx":"11","C:\\projects\\kijiji\\server\\client\\src\\components\\requireAuth.tsx":"12","C:\\projects\\kijiji\\server\\client\\src\\components\\RegisterForm.tsx":"13","C:\\projects\\kijiji\\server\\client\\src\\components\\SignInForm.tsx":"14","C:\\projects\\kijiji\\server\\client\\src\\actions\\index.tsx":"15","C:\\projects\\kijiji\\server\\client\\src\\actions\\types.tsx":"16","C:\\projects\\kijiji\\server\\client\\src\\actions\\auth.tsx":"17","C:\\projects\\kijiji\\server\\client\\src\\actions\\axiosConfig.tsx":"18","C:\\projects\\kijiji\\server\\client\\src\\CookieService.tsx":"19","C:\\projects\\kijiji\\server\\client\\src\\reducers\\categoryReducer.tsx":"20","C:\\projects\\kijiji\\server\\client\\src\\reducers\\listingReducer.tsx":"21","C:\\projects\\kijiji\\server\\client\\src\\actions\\listing.tsx":"22","C:\\projects\\kijiji\\server\\client\\src\\components\\Loading.tsx":"23","C:\\projects\\kijiji\\server\\client\\src\\constants.tsx":"24","C:\\projects\\kijiji\\server\\client\\src\\components\\Listings.tsx":"25","C:\\projects\\kijiji\\server\\client\\src\\components\\Listing.tsx":"26","C:\\projects\\kijiji\\server\\client\\src\\components\\Pagination.tsx":"27","C:\\projects\\kijiji\\server\\client\\src\\components\\Searchbar.tsx":"28","C:\\projects\\kijiji\\server\\client\\src\\windowDimensions.tsx":"29","C:\\projects\\kijiji\\server\\client\\src\\components\\Modal.tsx":"30","C:\\projects\\kijiji\\server\\client\\src\\components\\SearchFilterForm.tsx":"31","C:\\projects\\kijiji\\server\\client\\src\\components\\LoadingDots.tsx":"32","C:\\projects\\kijiji\\server\\client\\src\\components\\ListingDetail.tsx":"33","C:\\projects\\kijiji\\server\\client\\src\\components\\Profile.tsx":"34","C:\\projects\\kijiji\\server\\client\\src\\reducers\\profileReducer.tsx":"35","C:\\projects\\kijiji\\server\\client\\src\\actions\\profile.tsx":"36","C:\\projects\\kijiji\\server\\client\\src\\components\\EditAd.tsx":"37","C:\\projects\\kijiji\\server\\client\\src\\components\\EditOrPostAdForm.tsx":"38"},{"size":317,"mtime":1608593598124,"results":"39","hashOfConfig":"40"},{"size":364,"mtime":1607913470313,"results":"41","hashOfConfig":"40"},{"size":89,"mtime":1607912608008,"results":"42","hashOfConfig":"40"},{"size":1071,"mtime":1610826989170,"results":"43","hashOfConfig":"40"},{"size":4061,"mtime":1610761461684,"results":"44","hashOfConfig":"40"},{"size":1832,"mtime":1608593598103,"results":"45","hashOfConfig":"40"},{"size":822,"mtime":1610761461699,"results":"46","hashOfConfig":"40"},{"size":1826,"mtime":1610913090777,"results":"47","hashOfConfig":"40"},{"size":2320,"mtime":1610399332837,"results":"48","hashOfConfig":"40"},{"size":1824,"mtime":1610399332841,"results":"49","hashOfConfig":"40"},{"size":954,"mtime":1609367265394,"results":"50","hashOfConfig":"40"},{"size":1791,"mtime":1608593598118,"results":"51","hashOfConfig":"40"},{"size":6636,"mtime":1609367265379,"results":"52","hashOfConfig":"40"},{"size":5098,"mtime":1608593598117,"results":"53","hashOfConfig":"40"},{"size":107,"mtime":1610646702147,"results":"54","hashOfConfig":"40"},{"size":1257,"mtime":1610824843734,"results":"55","hashOfConfig":"40"},{"size":3161,"mtime":1610761461680,"results":"56","hashOfConfig":"40"},{"size":3816,"mtime":1609367265357,"results":"57","hashOfConfig":"40"},{"size":1288,"mtime":1608593598101,"results":"58","hashOfConfig":"40"},{"size":457,"mtime":1609367265397,"results":"59","hashOfConfig":"40"},{"size":1073,"mtime":1610824814860,"results":"60","hashOfConfig":"40"},{"size":10175,"mtime":1611007968854,"results":"61","hashOfConfig":"40"},{"size":244,"mtime":1609367265371,"results":"62","hashOfConfig":"40"},{"size":11158,"mtime":1610761461693,"results":"63","hashOfConfig":"40"},{"size":9850,"mtime":1610761461687,"results":"64","hashOfConfig":"40"},{"size":2750,"mtime":1610765873028,"results":"65","hashOfConfig":"40"},{"size":1796,"mtime":1610399332832,"results":"66","hashOfConfig":"40"},{"size":6788,"mtime":1610649111345,"results":"67","hashOfConfig":"40"},{"size":727,"mtime":1610399332854,"results":"68","hashOfConfig":"40"},{"size":1189,"mtime":1610399332830,"results":"69","hashOfConfig":"40"},{"size":5955,"mtime":1610399332839,"results":"70","hashOfConfig":"40"},{"size":224,"mtime":1610399332829,"results":"71","hashOfConfig":"40"},{"size":6403,"mtime":1610761461685,"results":"72","hashOfConfig":"40"},{"size":3720,"mtime":1610825336414,"results":"73","hashOfConfig":"40"},{"size":641,"mtime":1610761461701,"results":"74","hashOfConfig":"40"},{"size":1391,"mtime":1610824602009,"results":"75","hashOfConfig":"40"},{"size":3628,"mtime":1610938087830,"results":"76","hashOfConfig":"40"},{"size":16837,"mtime":1611007779722,"results":"77","hashOfConfig":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},"1pba2ji",{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"80"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"80"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"80"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"80"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"80"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"80"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"80"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"80"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"80"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"80"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"80"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"80"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"80"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"80"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"80"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"80"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"80"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"80"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"171","messages":"172","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\projects\\kijiji\\server\\client\\src\\index.tsx",[],["173","174"],"C:\\projects\\kijiji\\server\\client\\src\\components\\App.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\browserHistory.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\components\\Routes.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\components\\Header.tsx",["175"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport history from \"../browserHistory\";\r\nimport { connect } from \"react-redux\";\r\nimport { signOut } from \"../actions\";\r\nimport { StoreState } from \"../reducers\";\r\nimport Searchbar from \"./Searchbar\";\r\nimport useWindowDimensions from \"../windowDimensions\";\r\nimport { MED_SCREEN_SIZE } from \"../constants\";\r\n\r\ninterface IHeader {\r\n    authStatus?: string | null;\r\n    signOut(): void;\r\n}\r\n\r\nconst Header: React.FC<IHeader> = (props) => {\r\n    const { width } = useWindowDimensions();\r\n\r\n    return (\r\n        <nav>\r\n            <div className=\"headerInfoWrap\">\r\n                <Link to=\"/\">\r\n                    <img\r\n                        className=\"logo\"\r\n                        src=\"https://i.gyazo.com/0a31f614433ad0e8d1ee0f13893d9f41.png\"\r\n                        alt=\"logo\"\r\n                    />\r\n                </Link>\r\n                <div\r\n                    className={\r\n                        width > MED_SCREEN_SIZE\r\n                            ? \"displaySearchbar\"\r\n                            : \"hideSearchbar\"\r\n                    }\r\n                >\r\n                    <Searchbar />\r\n                </div>\r\n                {/* {width > MED_SCREEN_SIZE ? <Searchbar /> : null} */}\r\n\r\n                <div className=\"headerProfileAndPostWrap\">\r\n                    <h1\r\n                        className={\r\n                            props.authStatus\r\n                                ? \"navAuthStatusHide\"\r\n                                : \"navAuthStatus\"\r\n                        }\r\n                        onClick={() => {\r\n                            history.push(\"/signup\");\r\n                        }}\r\n                    >\r\n                        Register\r\n                    </h1>\r\n                    <h1\r\n                        className={\r\n                            props.authStatus\r\n                                ? \"navAuthStatusHide\"\r\n                                : \"navAuthStatus\"\r\n                        }\r\n                        onClick={() => {\r\n                            history.push(\"/signin\");\r\n                        }}\r\n                    >\r\n                        Sign in\r\n                    </h1>\r\n                    <h1\r\n                        className={\r\n                            props.authStatus\r\n                                ? \"navAuthStatus\"\r\n                                : \"navAuthStatusHide\"\r\n                        }\r\n                        onClick={() => {\r\n                            props.signOut();\r\n                        }}\r\n                    >\r\n                        Sign Out\r\n                    </h1>\r\n                    <h1\r\n                        className={\r\n                            props.authStatus\r\n                                ? \"profileText\"\r\n                                : \"navAuthStatusHide\"\r\n                        }\r\n                        onClick={() => {\r\n                            history.push(\"/profile\");\r\n                        }}\r\n                    >\r\n                        Profile\r\n                    </h1>\r\n\r\n                    <button\r\n                        onClick={() => {\r\n                            history.push(\"/post-ad\");\r\n                        }}\r\n                        className=\"postAdButton\"\r\n                    >\r\n                        Post Ad\r\n                    </button>\r\n                </div>\r\n\r\n                <div\r\n                    className={\r\n                        width < MED_SCREEN_SIZE\r\n                            ? \"displaySearchbar\"\r\n                            : \"hideSearchbar\"\r\n                    }\r\n                >\r\n                    <Searchbar />\r\n                </div>\r\n\r\n                {/* {width < MED_SCREEN_SIZE ? <Searchbar /> : null} */}\r\n            </div>\r\n        </nav>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: StoreState) => {\r\n    return {\r\n        authStatus: state.authStatus.authenticated,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, { signOut })(Header);\r\n","C:\\projects\\kijiji\\server\\client\\src\\Root.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\reducers\\index.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\components\\PostAd.tsx",["176","177","178","179","180","181","182","183"],"import React, { useEffect, useState } from \"react\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport requireAuth from \"./requireAuth\";\r\nimport EditOrPostAdForm from \"./EditOrPostAdForm\";\r\nimport { connect } from \"react-redux\";\r\nimport { StoreState } from \"../reducers\";\r\nimport { createListing, Listing } from \"../actions/listing\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport CookieService from \"../CookieService\";\r\nimport { ListingDataResponse } from \"../reducers/listingReducer\";\r\nimport Loading from \"./Loading\";\r\n\r\nexport interface PostAdFormProps {\r\n    onSubmit(formValues: any): void;\r\n    fetchCategoriesForListing(): void;\r\n    initialValues: Object;\r\n    provinceValue: string;\r\n    categories: [];\r\n    dispatch: any;\r\n    cloudinaryImage: string;\r\n}\r\n\r\nexport interface PostAdProps {\r\n    createListing(formValues: any): void;\r\n    listingInfo: ListingDataResponse;\r\n}\r\n\r\nconst PostAd: React.FC<PostAdProps> = (props) => {\r\n    // useEffect(() => {\r\n    //     const cookieService = CookieService.getService();\r\n    //     console.log(\"JWT DECODE\", jwt_decode(cookieService.getAccessToken()));\r\n    // }, []);\r\n    const onSubmitPostListing = async (formValues: any) => {\r\n        props.createListing(formValues);\r\n    };\r\n    return (\r\n        <div className=\"postAdPageContainer\">\r\n            <h1>Post Your Ad, it's fast and easy</h1>\r\n            <EditOrPostAdForm\r\n                onSubmit={onSubmitPostListing}\r\n                // initialValues={{\r\n                //     title: \"bye\",\r\n                //     image: \"\",\r\n                // }}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: StoreState) => {\r\n    return {\r\n        listingInfo: state.listingInfo,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, { createListing })(requireAuth(PostAd));\r\n","C:\\projects\\kijiji\\server\\client\\src\\components\\Register.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\components\\SignIn.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\reducers\\authReducer.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\components\\requireAuth.tsx",["184"],"import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { StoreState } from \"../reducers\";\r\nimport { History } from \"history\";\r\nimport { validateToken } from \"../actions\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nimport history from \"../browserHistory\";\r\n\r\nexport interface IHoc {\r\n    authStatus?: string | null;\r\n    history: History;\r\n    validateToken(path: string, retriedCalling: boolean): void;\r\n}\r\n\r\nconst hoc = (ChildComponent: any) => {\r\n    class ComposedComponent extends Component<IHoc> {\r\n        // Our component just got rendered\r\n        //Check for redux store's authStatus\r\n        componentDidMount() {\r\n            this.shouldNavigateAway();\r\n        }\r\n\r\n        // Our component just got updated\r\n        //If our redux store's authStatus changes\r\n        componentDidUpdate() {\r\n            this.shouldNavigateAway();\r\n        }\r\n\r\n        shouldNavigateAway() {\r\n            if (!this.props.authStatus) {\r\n                //if authStatus is empty string\r\n                //history is automatically passed due to React-router\r\n                //If done loading\r\n                this.props.history.push(\"/\");\r\n            } else {\r\n                //When user enter a page,\r\n                //validate access token, if it's not valid, redux's authStatus would be empty\r\n\r\n                this.props.validateToken(history.location.pathname, false);\r\n            }\r\n        }\r\n\r\n        render() {\r\n            return <ChildComponent {...this.props} />;\r\n        }\r\n    }\r\n\r\n    function mapStateToProps(state: StoreState) {\r\n        return {\r\n            authStatus: state.authStatus.authenticated,\r\n        };\r\n    }\r\n\r\n    return connect(mapStateToProps, { validateToken })(ComposedComponent);\r\n};\r\n\r\nexport default hoc;\r\n","C:\\projects\\kijiji\\server\\client\\src\\components\\RegisterForm.tsx",["185","186","187","188","189"],"import React, { ComponentType, useEffect } from \"react\";\r\nimport {\r\n    Field,\r\n    reduxForm,\r\n    reset,\r\n    change,\r\n    FormErrors,\r\n    InjectedFormProps,\r\n} from \"redux-form\";\r\n//compose is used to make it easier to \"organize\" mapStateToProps and redux form\r\nimport { StoreState } from \"../reducers\";\r\nimport { connect } from \"react-redux\";\r\nimport { RegisterFormProps } from \"./Register\";\r\n//Re-usable component\r\nexport interface RegisterFormValues {\r\n    email: string;\r\n    firstName: string;\r\n    lastName: string;\r\n    password: string;\r\n}\r\n\r\n//Typescriptand redux form:\r\n//https://levelup.gitconnected.com/react-js-typescript-redux-redux-form-jest-e522995ebe36\r\n\r\n//Need to hoist render methods up or else it will give error where it will unfocus after first characther is typed\r\n//https://stackoverflow.com/questions/39839051/using-redux-form-im-losing-focus-after-typing-the-first-character\r\n\r\nconst renderError = ({ error, touched }: any) => {\r\n    if (touched && error) {\r\n        //Touched (for input) will be false at first\r\n        //When clicked and then clicked otuside of the input, it will be true\r\n        return <div className=\"errorText\">{error}</div>;\r\n    }\r\n};\r\n\r\nconst renderTextInput = ({ input, label, meta, placeHolder }: any) => {\r\n    //\"component\" property automatically passes props to argument, it has {input properties and meta properties}\r\n    //\"label\" automatically passes props to arguments\r\n    return (\r\n        <div>\r\n            <label>{label}</label>\r\n            <input\r\n                data-testid=\"registerTextInput\"\r\n                className=\"createAuthInputs\"\r\n                {...input}\r\n                autoComplete=\"off\"\r\n            />\r\n            {renderError(meta)}\r\n        </div>\r\n    );\r\n    //{..input} is shortcut for redux-form; where you take all the input from \"component's\" props and pass it as\r\n    //props to <input>\r\n};\r\n\r\nconst renderPasswordInput = ({ input, label, meta, placeHolder }: any) => {\r\n    return (\r\n        <div>\r\n            <label>{label}</label>\r\n            <input\r\n                className=\"createAuthInputs\"\r\n                type=\"password\"\r\n                {...input}\r\n                autoComplete=\"off\"\r\n            />\r\n            {renderError(meta)}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst RegisterForm: React.FC<\r\n    RegisterFormProps & InjectedFormProps<{}, RegisterFormProps>\r\n> = (props) => {\r\n    const onSubmit = (formValues: any, dispatch: any) => {\r\n        //onSubmit's default param is any\r\n        //event.preventDefault() is automatically called with handleSubmit, a redux-form property\r\n        //form values are the values from the fields that redux-form automatiacally passes\r\n        //after clicking the submit button\r\n        //dispatch(reset(\"registerForm\"));\r\n        props.onSubmit(formValues);\r\n\r\n        //dispatch(change(\"registerForm\", \"password\", \"\"));\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <form className=\"authForm\" onSubmit={props.handleSubmit(onSubmit)}>\r\n                <h1>Register</h1>\r\n                <div className=\"authFieldSection\">\r\n                    <div className=\"authFormFieldTitleWrap\">\r\n                        <h1>Email</h1>\r\n                        <h3 className=\"authFormFieldTitleEmailInUse\">\r\n                            {props.authStatus}\r\n                        </h3>\r\n                    </div>\r\n                    <Field\r\n                        name=\"email\"\r\n                        type=\"text\"\r\n                        component={renderTextInput}\r\n                    />\r\n                </div>\r\n                <div className=\"authFieldSection\">\r\n                    <div className=\"authFormFieldTitleWrap\">\r\n                        <h1>First Name</h1>\r\n                        <h3 className=\"authFormFieldTitleEmailInUse\">\r\n                            {props.authStatus}\r\n                        </h3>\r\n                    </div>\r\n                    <Field\r\n                        name=\"firstName\"\r\n                        type=\"text\"\r\n                        component={renderTextInput}\r\n                    />\r\n                </div>\r\n                <div className=\"authFieldSection\">\r\n                    <div className=\"authFormFieldTitleWrap\">\r\n                        <h1>Last Name</h1>\r\n                        <h3 className=\"authFormFieldTitleEmailInUse\">\r\n                            {props.authStatus}\r\n                        </h3>\r\n                    </div>\r\n                    <Field\r\n                        name=\"lastName\"\r\n                        type=\"text\"\r\n                        component={renderTextInput}\r\n                    />\r\n                </div>\r\n                <div className=\"authFieldSection\">\r\n                    <div className=\"authFormFieldTitleWrap\">\r\n                        <h1>Password</h1>\r\n                        <h3 className=\"authFormFieldTitleEmailInUse\">\r\n                            {props.authStatus}\r\n                        </h3>\r\n                    </div>\r\n                    <Field\r\n                        name=\"password\"\r\n                        type=\"password\"\r\n                        component={renderPasswordInput}\r\n                    />\r\n                </div>\r\n\r\n                <button data-testid=\"registerButton\" className=\"authButton\">\r\n                    Register\r\n                </button>\r\n            </form>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nconst validate = (\r\n    formValues: RegisterFormValues\r\n): FormErrors<RegisterFormValues> => {\r\n    //MUST BE NAMED VALIDATE! Other names would be ignored by reduxForm(..)\r\n    const errors: FormErrors<RegisterFormValues> = {};\r\n    //If you return an empty object, redux form will assume everything is ok\r\n    if (!formValues.email) {\r\n        //user did not enter title, so undefined\r\n        errors.email = \"You must enter an email\";\r\n        //Must be the same name as field name! The \"error\" property in {meta} would receive this\r\n    }\r\n\r\n    if (!formValues.firstName) {\r\n        errors.firstName = \"You must enter your first name\";\r\n    }\r\n\r\n    if (!formValues.lastName) {\r\n        errors.lastName = \"You must enter your last name\";\r\n    }\r\n    if (!formValues.password) {\r\n        errors.password = \"You must enter a password\";\r\n    }\r\n\r\n    return errors;\r\n    //Erors is going to be passed to renderInput's meta\r\n};\r\n\r\n// const mapStateToProps = (state: StoreState) => {\r\n//     return {\r\n//         authStatus: state.authStatus.errorMessage,\r\n//     };\r\n// };\r\n\r\nexport default connect()(\r\n    reduxForm<{}, RegisterFormProps>({\r\n        form: \"registerForm\",\r\n        validate,\r\n    })(RegisterForm)\r\n);\r\n","C:\\projects\\kijiji\\server\\client\\src\\components\\SignInForm.tsx",["190","191","192","193"],"import React, { ComponentType, useEffect } from \"react\";\r\nimport {\r\n    Field,\r\n    reduxForm,\r\n    reset,\r\n    change,\r\n    FormErrors,\r\n    InjectedFormProps,\r\n} from \"redux-form\";\r\n//compose is used to make it easier to \"organize\" mapStateToProps and redux form\r\nimport { StoreState } from \"../reducers\";\r\nimport { connect } from \"react-redux\";\r\nimport { SignInFormProps } from \"./SignIn\";\r\n//Re-usable component\r\nexport interface SignInFormValues {\r\n    email: string;\r\n    password: string;\r\n}\r\n\r\n//Typescriptand redux form:\r\n//https://levelup.gitconnected.com/react-js-typescript-redux-redux-form-jest-e522995ebe36\r\n\r\n//Need to hoist render methods up or else it will give error where it will unfocus after first characther is typed\r\n//https://stackoverflow.com/questions/39839051/using-redux-form-im-losing-focus-after-typing-the-first-character\r\n\r\nconst renderError = ({ error, touched }: any) => {\r\n    if (touched && error) {\r\n        //Touched (for input) will be false at first\r\n        //When clicked and then clicked otuside of the input, it will be true\r\n        return <div className=\"errorText\">{error}</div>;\r\n    }\r\n};\r\n\r\nconst renderTextInput = ({ input, label, meta, placeHolder }: any) => {\r\n    //\"component\" property automatically passes props to argument, it has {input properties and meta properties}\r\n    //\"label\" automatically passes props to arguments\r\n    return (\r\n        <div>\r\n            <label>{label}</label>\r\n            <input className=\"createAuthInputs\" {...input} autoComplete=\"off\" />\r\n            {renderError(meta)}\r\n        </div>\r\n    );\r\n    //{..input} is shortcut for redux-form; where you take all the input from \"component's\" props and pass it as\r\n    //props to <input>\r\n};\r\n\r\nconst renderPasswordInput = ({ input, label, meta, placeHolder }: any) => {\r\n    return (\r\n        <div>\r\n            <label>{label}</label>\r\n            <input\r\n                className=\"createAuthInputs\"\r\n                type=\"password\"\r\n                {...input}\r\n                autoComplete=\"off\"\r\n            />\r\n            {renderError(meta)}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst SignInForm: React.FC<\r\n    SignInFormProps & InjectedFormProps<{}, SignInFormProps>\r\n> = (props) => {\r\n    const onSubmit = (formValues: any, dispatch: any) => {\r\n        //onSubmit's default param is any\r\n        //event.preventDefault() is automatically called with handleSubmit, a redux-form property\r\n        //form values are the values from the fields that redux-form automatiacally passes\r\n        //after clicking the submit button\r\n        //dispatch(reset(\"registerForm\"));\r\n        props.onSubmit(formValues);\r\n        // dispatch(change(\"signInForm\", \"password\", \"\"));\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <form className=\"authForm\" onSubmit={props.handleSubmit(onSubmit)}>\r\n                <h1>Sign In</h1>\r\n                <div className=\"authFieldSection\">\r\n                    <div className=\"authFormFieldTitleWrap\">\r\n                        <h1>Email</h1>\r\n                        <h3 className=\"authFormFieldTitleEmailInUse\">\r\n                            {props.authStatus}\r\n                        </h3>\r\n                    </div>\r\n                    <Field\r\n                        name=\"email\"\r\n                        type=\"text\"\r\n                        component={renderTextInput}\r\n                    />\r\n                </div>\r\n                <div className=\"authFieldSection\">\r\n                    <div className=\"authFormFieldTitleWrap\">\r\n                        <h1>Password</h1>\r\n                        <h3 className=\"authFormFieldTitleEmailInUse\">\r\n                            {props.authStatus}\r\n                        </h3>\r\n                    </div>\r\n                    <Field\r\n                        name=\"password\"\r\n                        type=\"password\"\r\n                        component={renderPasswordInput}\r\n                    />\r\n                </div>\r\n\r\n                <button className=\"authButton\">Sign In</button>\r\n            </form>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nconst validate = (\r\n    formValues: SignInFormValues\r\n): FormErrors<SignInFormValues> => {\r\n    //MUST BE NAMED VALIDATE! Other names would be ignored by reduxForm(..)\r\n    const errors: FormErrors<SignInFormValues> = {};\r\n    //If you return an empty object, redux form will assume everything is ok\r\n    if (!formValues.email) {\r\n        //user did not enter title, so undefined\r\n        errors.email = \"You must enter an email\";\r\n        //Must be the same name as field name! The \"error\" property in {meta} would receive this\r\n    }\r\n    if (!formValues.password) {\r\n        errors.password = \"You must enter a password\";\r\n    }\r\n    return errors;\r\n    //Erors is going to be passed to renderInput's meta\r\n};\r\n\r\nconst mapStateToProps = (state: StoreState) => {\r\n    return {\r\n        authStatus: state.authStatus.errorMessage,\r\n    };\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    {}\r\n)(\r\n    reduxForm<{}, SignInFormProps>({\r\n        form: \"signInForm\",\r\n        validate,\r\n    })(SignInForm)\r\n);\r\n","C:\\projects\\kijiji\\server\\client\\src\\actions\\index.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\actions\\types.tsx",["194"],"import {\r\n    AuthUserAction,\r\n    AuthErrorAction,\r\n    FetchCategoriesForListingAction,\r\n    FetchCategoriesForListingErrorAction,\r\n    UploadImageToCloudinaryAction,\r\n    CreateListingAction,\r\n    ListingErrorAction,\r\n    FetchListingsAction,\r\n    FetchListingDetailAction,\r\n} from \"../actions\";\r\nimport { EditListingAction } from \"./listing\";\r\nimport { FetchUserProfileAction, FetchUserProfileErrorAction } from \"./profile\";\r\nexport enum ActionTypes {\r\n    AUTH_USER,\r\n    AUTH_ERROR,\r\n    FETCH_CATEGORIES_FOR_LISTING,\r\n    FETCH_CATEGORIES_FOR_LISTING_ERROR,\r\n    UPLOAD_IMAGE_TO_CLOUDINARY,\r\n    CREATE_LISTING,\r\n    LISTING_ERROR,\r\n    FETCH_LISTINGS,\r\n    FETCH_LISTING_DETAIL,\r\n    FETCH_USER_PROFILE,\r\n    FETCH_USER_PROFILE_ERROR,\r\n    EDIT_LISTING,\r\n}\r\nexport type AuthActions = AuthUserAction | AuthErrorAction;\r\nexport type FetchCategoriesActions =\r\n    | FetchCategoriesForListingAction\r\n    | FetchCategoriesForListingErrorAction;\r\nexport type ListingAction =\r\n    // | UploadImageToCloudinaryAction\r\n    | CreateListingAction\r\n    | ListingErrorAction\r\n    | FetchListingsAction\r\n    | FetchListingDetailAction\r\n    | EditListingAction;\r\n\r\nexport type UserProfileAction =\r\n    | FetchUserProfileAction\r\n    | FetchUserProfileErrorAction;\r\n","C:\\projects\\kijiji\\server\\client\\src\\actions\\auth.tsx",["195"],"import { ActionTypes } from \"./types\";\r\nimport auth from \"./axiosConfig\";\r\nimport { Dispatch } from \"redux\";\r\nimport history from \"../browserHistory\";\r\nimport CookieService from \"../CookieService\";\r\n\r\nexport interface JWTType {\r\n    token: string;\r\n}\r\nexport interface AuthUserAction {\r\n    type: ActionTypes.AUTH_USER;\r\n    payload: JWTType;\r\n}\r\nexport interface AuthErrorAction {\r\n    type: ActionTypes.AUTH_ERROR;\r\n    payload: string;\r\n}\r\n\r\nexport const signUp = (formValues: any) => async (dispatch: Dispatch) => {\r\n    try {\r\n        const response = await auth.post<JWTType>(\"/signup\", formValues);\r\n        dispatch<AuthUserAction>({\r\n            type: ActionTypes.AUTH_USER,\r\n            payload: response.data,\r\n        });\r\n        //Save token to local storage so that we could persist login state, keep user log in\r\n        // localStorage.setItem(\"token\", response.data.token);\r\n        // history.push(\"/walkman\");\r\n    } catch (err) {\r\n        dispatch<AuthErrorAction>({\r\n            type: ActionTypes.AUTH_ERROR,\r\n            payload: \"- Email is in use\",\r\n        });\r\n    }\r\n};\r\nexport const signIn = (formValues: any) => async (dispatch: Dispatch) => {\r\n    try {\r\n        const response = await auth.post<JWTType>(\"/signin\", formValues);\r\n        dispatch<AuthUserAction>({\r\n            type: ActionTypes.AUTH_USER,\r\n            payload: response.data,\r\n        });\r\n        //Save token to local storage so that we could persist login state, keep user log in\r\n        //localStorage.setItem(\"token\", response.data.token);\r\n        //history.push(\"/walkman\");\r\n    } catch (err) {\r\n        // if (err.message === \"Network Error\") {\r\n        //     console.log(\"check error\", err);\r\n        // }\r\n\r\n        dispatch<AuthErrorAction>({\r\n            type: ActionTypes.AUTH_ERROR,\r\n            payload: \"- Invalid login credentials\",\r\n        });\r\n    }\r\n};\r\n\r\nexport const signOut = () => async (dispatch: Dispatch) => {\r\n    try {\r\n        const response = await auth.post<JWTType>(\"/signout\");\r\n        dispatch<AuthUserAction>({\r\n            type: ActionTypes.AUTH_USER,\r\n            payload: response.data,\r\n        });\r\n        alert(\"Logged out succesfully\");\r\n    } catch (err) {\r\n        alert(\"Log out failed, try again\");\r\n    }\r\n};\r\n\r\nexport const validateToken = (path: string, retriedCalling: boolean) => async (\r\n    dispatch: Dispatch\r\n) => {\r\n    try {\r\n        const response = await auth.post<JWTType>(\r\n            path,\r\n            {}\r\n            // { headers: { Authorization: cookieService.getAccessToken() } } //assigned in axios' interceptors.request\r\n        );\r\n        //Ensures that our current access token is the newest one; if a new access token is given,\r\n        //we will update our current access token\r\n\r\n        //requireAuth HOC relies on the dispatch below\r\n        dispatch<AuthUserAction>({\r\n            type: ActionTypes.AUTH_USER,\r\n            payload: response.data,\r\n        });\r\n    } catch (err) {\r\n        if (retriedCalling === true) {\r\n            // If it fails again with the new access token (might be a forged token)\r\n            // Invalid token, kick our users out from a certain resource only accecible to signed in users\r\n            // dispatch<AuthErrorAction>({\r\n            //     type: ActionTypes.AUTH_ERROR,\r\n            //     payload: \"\",\r\n            // });\r\n\r\n            //Log them out\r\n            dispatch(signOut() as any);\r\n        }\r\n    }\r\n};\r\n","C:\\projects\\kijiji\\server\\client\\src\\actions\\axiosConfig.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\CookieService.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\reducers\\categoryReducer.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\reducers\\listingReducer.tsx",["196","197"],"import { ActionTypes, ListingAction, ServerError } from \"../actions\";\r\nimport { Listing, FetchListingResponse, ListingDetail } from \"../actions\";\r\nimport _ from \"lodash\";\r\n\r\nexport interface ListingDataResponse {\r\n    data?: FetchListingResponse | ListingDetail | ServerError;\r\n}\r\n\r\nconst listingReducer = (\r\n    state: ListingDataResponse = {},\r\n    action: ListingAction\r\n) => {\r\n    switch (action.type) {\r\n        case ActionTypes.CREATE_LISTING:\r\n            return { ...state, data: action.payload };\r\n        case ActionTypes.LISTING_ERROR:\r\n            return { ...state, data: action.payload };\r\n        case ActionTypes.FETCH_LISTINGS:\r\n            return { ...state, data: action.payload };\r\n        //    return { ...state, ..._.mapKeys(action.payload, \"listing_id\") };\r\n        case ActionTypes.FETCH_LISTING_DETAIL:\r\n            return { ...state, data: action.payload };\r\n        case ActionTypes.EDIT_LISTING:\r\n            return { ...state, data: action.payload };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default listingReducer;\r\n","C:\\projects\\kijiji\\server\\client\\src\\actions\\listing.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\components\\Loading.tsx",["198"],"import React from \"react\";\r\nimport { css } from \"@emotion/core\";\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\nconst Loading = (): JSX.Element => {\r\n    return <ClipLoader color={\"grey\"} loading={true} />;\r\n};\r\nexport default Loading;\r\n","C:\\projects\\kijiji\\server\\client\\src\\constants.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\components\\Listings.tsx",["199","200","201","202","203"],"import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport history from \"../browserHistory\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n    fetchListingsByOldestDate,\r\n    fetchListingsByNewestDate,\r\n    fetchListingsByLowestPrice,\r\n    fetchListingsByHighestPrice,\r\n    Listing as ListingType,\r\n} from \"../actions\";\r\nimport { StoreState } from \"../reducers\";\r\nimport Listing from \"./Listing\";\r\nimport Loading from \"./Loading\";\r\nimport Pagination from \"./Pagination\";\r\nimport queryString from \"query-string\";\r\nimport { useLocation, useParams } from \"react-router-dom\";\r\nconst ORDER_BY_OLDEST_DATE = \"Posted: oldest first\";\r\nconst ORDER_BY_NEWEST_DATE = \"Posted: newest first\";\r\nconst ORDER_BY_LOWEST_PRICE = \" Price: lowest first\";\r\nconst ORDER_BY_HIGHEST_PRICE = \"Price: highest first\";\r\n\r\ninterface IListings {\r\n    fetchListingsByOldestDate(pageNumber: number, queryPath: string): void;\r\n    fetchListingsByNewestDate(pageNumber: number, queryPath: string): void;\r\n    fetchListingsByLowestPrice(pageNumber: number, queryPath: string): void;\r\n    fetchListingsByHighestPrice(pageNumber: number, queryPath: string): void;\r\n    listingInfo: any;\r\n    match: any;\r\n}\r\n\r\nconst Listings: React.FC<IListings> = (props) => {\r\n    const [currentPage, setCurrentPage] = useState(props.match.params.page);\r\n    const [selectedSort, setSelectedSort] = useState(ORDER_BY_OLDEST_DATE);\r\n    //For Query Strings:\r\n    const { search } = useLocation();\r\n\r\n    const renderShowingText = () => {\r\n        if (props.listingInfo.totalListings < props.listingInfo.limitPerPage) {\r\n            return props.listingInfo.totalListings;\r\n        } else if (\r\n            props.listingInfo.limitPerPage * props.listingInfo.page >\r\n            props.listingInfo.totalListings\r\n        ) {\r\n            return props.listingInfo.totalListings;\r\n        } else {\r\n            return props.listingInfo.limitPerPage * props.listingInfo.page;\r\n        }\r\n    };\r\n\r\n    const handleDropdownChange = (event) => {\r\n        let valueOfSelectedOption = event.target.value;\r\n        if (valueOfSelectedOption === ORDER_BY_OLDEST_DATE) {\r\n            setSelectedSort(ORDER_BY_OLDEST_DATE);\r\n            props.fetchListingsByOldestDate(currentPage, search);\r\n        } else if (valueOfSelectedOption === ORDER_BY_NEWEST_DATE) {\r\n            setSelectedSort(ORDER_BY_NEWEST_DATE);\r\n            props.fetchListingsByNewestDate(currentPage, search);\r\n        } else if (valueOfSelectedOption === ORDER_BY_LOWEST_PRICE) {\r\n            setSelectedSort(ORDER_BY_LOWEST_PRICE);\r\n            props.fetchListingsByLowestPrice(currentPage, search);\r\n        } else if (valueOfSelectedOption === ORDER_BY_HIGHEST_PRICE) {\r\n            setSelectedSort(ORDER_BY_HIGHEST_PRICE);\r\n            props.fetchListingsByHighestPrice(currentPage, search);\r\n        }\r\n    };\r\n    const pageNumberClicked = (pageNumber: number) => {\r\n        //We don't use currentPage becaause oru useEffect does not has [currentPage]\r\n        //setting it to currentPage causes rendering issues where the page is not updating properly\r\n\r\n        if (selectedSort === ORDER_BY_OLDEST_DATE) {\r\n            props.fetchListingsByOldestDate(pageNumber, search);\r\n        } else if (selectedSort === ORDER_BY_NEWEST_DATE) {\r\n            props.fetchListingsByNewestDate(pageNumber, search);\r\n        } else if (selectedSort === ORDER_BY_LOWEST_PRICE) {\r\n            props.fetchListingsByLowestPrice(pageNumber, search);\r\n        } else if (selectedSort === ORDER_BY_HIGHEST_PRICE) {\r\n            props.fetchListingsByHighestPrice(pageNumber, search);\r\n        }\r\n    };\r\n\r\n    const renderListings = () => {\r\n        if (!props.listingInfo) {\r\n            return (\r\n                <div className=\"loadingCenter\">\r\n                    <Loading />\r\n                </div>\r\n            );\r\n        } else if (props.listingInfo.error) {\r\n            return (\r\n                <div className=\"serverErrorContainer\">\r\n                    <h3 className=\"serverErrorText\">\r\n                        {props.listingInfo.error}\r\n                    </h3>\r\n                </div>\r\n            );\r\n        } else if (!props.listingInfo.listings) {\r\n            //Important: we use .listings here because listingInfo change it's state\r\n            //if user clicks the listing (<ListingDetail> is triggered); there is no .listings\r\n            //when it's triggered, so it will cause an undefined error at the else statement if we click back button\r\n            return (\r\n                <div className=\"loadingCenter\">\r\n                    <Loading />\r\n                </div>\r\n            );\r\n        } else {\r\n            if (props.listingInfo.listings.length === 0) {\r\n                //When users enter an invalid page number in the url\r\n                return (\r\n                    <h2 className=\"nothingToShow\">\r\n                        There seems to be nothing to show here...\r\n                    </h2>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <React.Fragment>\r\n                    <div className=\"listingsContainer\">\r\n                        <div className=\"showingAdsTitleAndDropdownWrap\">\r\n                            <h1 className=\"showingAdsTitle\">{`Showing ${renderShowingText()} out of ${\r\n                                props.listingInfo.totalListings\r\n                            } ads:`}</h1>\r\n                            <div className=\"dropdownWrap\">\r\n                                <h3>Sort by</h3>\r\n                                <select\r\n                                    className=\"sortByDropdown\"\r\n                                    onChange={handleDropdownChange}\r\n                                >\r\n                                    <option value={ORDER_BY_OLDEST_DATE}>\r\n                                        {ORDER_BY_OLDEST_DATE}\r\n                                    </option>\r\n                                    <option value={ORDER_BY_NEWEST_DATE}>\r\n                                        {ORDER_BY_NEWEST_DATE}\r\n                                    </option>\r\n                                    <option value={ORDER_BY_LOWEST_PRICE}>\r\n                                        {ORDER_BY_LOWEST_PRICE}\r\n                                    </option>\r\n                                    <option value={ORDER_BY_HIGHEST_PRICE}>\r\n                                        {ORDER_BY_HIGHEST_PRICE}\r\n                                    </option>\r\n                                </select>\r\n                            </div>\r\n                        </div>\r\n                        {props.listingInfo.listings.map(\r\n                            (listing: ListingType) => (\r\n                                <Listing\r\n                                    key={listing.listing_id}\r\n                                    {...listing}\r\n                                />\r\n                            )\r\n                        )}\r\n                        <Pagination\r\n                            totalItems={props.listingInfo.totalListings}\r\n                            itemLimit={props.listingInfo.limitPerPage}\r\n                            currentPage={currentPage}\r\n                            onClickCallback={pageNumberClicked}\r\n                            query={search}\r\n                        />\r\n                    </div>\r\n                </React.Fragment>\r\n            );\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        //When we click the back button, fetchListing does not get rendered\r\n        //So we intercept the back button and forward button with:\r\n        let backAndForwardButtonClicked = false;\r\n        window.onpopstate = (e) => {\r\n            backAndForwardButtonClicked = true;\r\n            console.log(\"back button\", selectedSort);\r\n            if (selectedSort === ORDER_BY_OLDEST_DATE) {\r\n                props.fetchListingsByOldestDate(currentPage, search);\r\n            } else if (selectedSort === ORDER_BY_NEWEST_DATE) {\r\n                props.fetchListingsByNewestDate(currentPage, search);\r\n            } else if (selectedSort === ORDER_BY_LOWEST_PRICE) {\r\n                props.fetchListingsByLowestPrice(currentPage, search);\r\n            } else if (selectedSort === ORDER_BY_HIGHEST_PRICE) {\r\n                props.fetchListingsByHighestPrice(currentPage, search);\r\n            }\r\n        };\r\n        if (backAndForwardButtonClicked === false) {\r\n            if (selectedSort === ORDER_BY_OLDEST_DATE) {\r\n                props.fetchListingsByOldestDate(\r\n                    props.match.params.page,\r\n                    search\r\n                );\r\n            } else if (selectedSort === ORDER_BY_NEWEST_DATE) {\r\n                props.fetchListingsByNewestDate(\r\n                    props.match.params.page,\r\n                    search\r\n                );\r\n            } else if (selectedSort === ORDER_BY_LOWEST_PRICE) {\r\n                props.fetchListingsByLowestPrice(\r\n                    props.match.params.page,\r\n                    search\r\n                );\r\n            } else if (selectedSort === ORDER_BY_HIGHEST_PRICE) {\r\n                props.fetchListingsByHighestPrice(\r\n                    props.match.params.page,\r\n                    search\r\n                );\r\n            }\r\n        }\r\n        setCurrentPage(props.match.params.page); //hook renders after everything in useffect is executed\r\n    }, [props.match.params.page, search]);\r\n\r\n    return <React.Fragment>{renderListings()}</React.Fragment>;\r\n};\r\n\r\nconst mapStateToProps = (state: StoreState) => {\r\n    // return { listings: Object.values(state.listings) };\r\n    return { listingInfo: state.listingInfo.data };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n    fetchListingsByOldestDate,\r\n    fetchListingsByNewestDate,\r\n    fetchListingsByLowestPrice,\r\n    fetchListingsByHighestPrice,\r\n})(Listings);\r\n","C:\\projects\\kijiji\\server\\client\\src\\components\\Listing.tsx",["204"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport history from \"../browserHistory\";\r\nimport { connect } from \"react-redux\";\r\nimport { StoreState } from \"../reducers\";\r\nimport { Listing as ListingType } from \"../actions\";\r\nimport moment from \"moment\";\r\nimport postAdListingImagePlaceHolder from \"../img/postAdListingImagePlaceHolder.png\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nconst Listing: React.FC<ListingType> = ({\r\n    listing_id,\r\n    listing_name,\r\n    listing_image,\r\n    listing_price,\r\n    listing_description,\r\n    listing_date,\r\n    province,\r\n    city,\r\n    street,\r\n}) => {\r\n    const location = useLocation();\r\n    return (\r\n        <div\r\n            className=\"listingPreviewContainer\"\r\n            onClick={() => {\r\n                history.push(`/listing/${listing_id}`);\r\n            }}\r\n        >\r\n            {location.pathname === \"/profile\" ? (\r\n                <FontAwesomeIcon className=\"pencilIcon\" icon={faPencilAlt} />\r\n            ) : (\r\n                \"\"\r\n            )}\r\n\r\n            <div className=\"listingPreviewImageContainer\">\r\n                <img\r\n                    src={\r\n                        !listing_image\r\n                            ? postAdListingImagePlaceHolder\r\n                            : listing_image\r\n                    }\r\n                    //If image that we get from cloudinary is no longer valid / broken for some reason, resort to default image\r\n                    onError={(e) => {\r\n                        e.target.src = postAdListingImagePlaceHolder; // some replacement image\r\n                        // e.target.style = 'padding: 8px; margin: 16px' // inline styles in html format\r\n                    }}\r\n                    alt=\"listing\"\r\n                />\r\n            </div>\r\n            <div className=\"listingPreviewInfoWrap\">\r\n                <div className=\"titleAndPriceWrap\">\r\n                    <h1 className=\"title\">{listing_name}</h1>\r\n                    <h1 className=\"price\">${listing_price}</h1>\r\n                </div>\r\n                <div className=\"locationAndDateWrap\">\r\n                    <h3 className=\"location\">{`${city}, ${province} at ${street} `}</h3>\r\n\r\n                    <h3 className=\"date\">\r\n                        {moment(listing_date).format(\"YYYY/MM/DD\")}\r\n                    </h3>\r\n                </div>\r\n                <p className=\"listingDescription\">{listing_description}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: StoreState) => {\r\n    return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, {})(Listing);\r\n","C:\\projects\\kijiji\\server\\client\\src\\components\\Pagination.tsx",["205","206"],"import React, { useState } from \"react\";\r\nimport history from \"../browserHistory\";\r\n\r\ninterface PaginationProps {\r\n    totalItems: number;\r\n    itemLimit: number;\r\n    currentPage: number;\r\n    onClickCallback(pageNumber: number): void;\r\n    query: string;\r\n}\r\n\r\nconst Pagination: React.FC<PaginationProps> = (props) => {\r\n    const renderPageItems = (totalItems: number, itemLimit: number) => {\r\n        let numberOfPageItems = Math.ceil(totalItems / itemLimit); //rounds up\r\n        let pageItems = [];\r\n        for (let i = 0; i < numberOfPageItems; i++) {\r\n            pageItems.push(i + 1);\r\n        }\r\n\r\n        return (\r\n            <ul className=\"pagination\">\r\n                {pageItems.map((pageNumber) => {\r\n                    return (\r\n                        <li\r\n                            key={pageNumber}\r\n                            onClick={() => {\r\n                                props.onClickCallback(pageNumber);\r\n                                history.push({\r\n                                    pathname: `/listings/${pageNumber}`,\r\n                                    search: `${props.query}`,\r\n                                });\r\n                            }}\r\n                            className={\r\n                                props.currentPage == pageNumber\r\n                                    ? \"pageItemSelected\"\r\n                                    : \"pageItem\"\r\n                            }\r\n                        >\r\n                            {pageNumber}\r\n                        </li>\r\n                    );\r\n                })}\r\n            </ul>\r\n        );\r\n    };\r\n    return (\r\n        <React.Fragment>\r\n            {renderPageItems(props.totalItems, props.itemLimit)}\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Pagination;\r\n","C:\\projects\\kijiji\\server\\client\\src\\components\\Searchbar.tsx",["207","208","209","210","211","212"],"import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport history from \"../browserHistory\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSlidersH, faSearch } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Modal from \"./Modal\";\r\nimport SearchFilterForm, { SearchFilterFormValues } from \"./SearchFilterForm\";\r\n\r\nimport queryString from \"query-string\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { filter, initial } from \"lodash\";\r\n\r\nexport interface SearchFilterFormProps {\r\n    handleSubmit(formValues: SearchFilterFormValues): void;\r\n    onCancel(): void;\r\n    categories: [];\r\n    onDropdownChange(): void;\r\n}\r\n\r\nconst Searchbar: React.FC<{}> = () => {\r\n    const [showFilterModal, setShowFilterModal] = useState(false);\r\n    const [filterQueries, setFilterQueries] = useState(null);\r\n    const [searchValue, setSearchValue] = useState(null);\r\n    const [initialLoad, setInitialLoad] = useState(true);\r\n\r\n    const onSubmitFilter = async (formValues: SearchFilterFormValues) => {\r\n        console.log(\"onsubmitfilter\", formValues);\r\n        //If we didn't fill out the city field:\r\n        //{category: \"Sportings Goods\", province: \"Manitoba\"}\r\n\r\n        //If we entered the city field, but then change it back to an empty field\r\n        //{category: \"Sportings Goods\", province: \"Alberta\", city: \"\"}\r\n\r\n        if (formValues.category || formValues.category === \"\") {\r\n            setFilterCategory(formValues.category);\r\n        }\r\n        if (formValues.province || formValues.province === \"\") {\r\n            setFilterProvince(formValues.province);\r\n        }\r\n        if (formValues.city || formValues.city === \"\") {\r\n            setFilterCity(formValues.city);\r\n        }\r\n\r\n        const keyNames = Object.keys(formValues);\r\n        let filterQuery = \"\";\r\n        keyNames.map((name) => {\r\n            if (formValues[name] !== \"\") {\r\n                filterQuery += `${name}=${formValues[name]}&`;\r\n            }\r\n        });\r\n        const editedFilterQuery = filterQuery.slice(0, -1); //remove last &\r\n        setFilterQueries(editedFilterQuery);\r\n\r\n        setShowFilterModal(false);\r\n    };\r\n    const onCancelFilter = () => {\r\n        setShowFilterModal(false);\r\n    };\r\n\r\n    const renderModalContent = () => {\r\n        return (\r\n            <SearchFilterForm\r\n                onSubmit={onSubmitFilter}\r\n                onCancel={onCancelFilter}\r\n                initialValues={renderInitialValuesForFilter()}\r\n            />\r\n        );\r\n    };\r\n\r\n    const renderModal = () => {\r\n        if (!showFilterModal) return null;\r\n        else {\r\n            return (\r\n                <Modal\r\n                    title=\"Filter Your Results\"\r\n                    content={renderModalContent()}\r\n                    // actions={renderModalActions()}\r\n                    onDismiss={onCancelFilter}\r\n                />\r\n            );\r\n        }\r\n    };\r\n\r\n    const [filterCategory, setFilterCategory] = useState(null);\r\n    const [filterProvince, setFilterProvince] = useState(null);\r\n    const [filterCity, setFilterCity] = useState(null);\r\n\r\n    //For Query Strings:\r\n    const { search } = useLocation();\r\n    const queryValues: SearchFilterFormValues = queryString.parse(search);\r\n\r\n    useEffect(() => {\r\n        setFilterCategory(queryValues.category);\r\n        setFilterProvince(queryValues.province);\r\n        setFilterCity(queryValues.city);\r\n        setSearchValue(queryValues.search);\r\n    }, []);\r\n\r\n    const renderInitialValuesForFilter = () => {\r\n        console.log(\"renderInitialVal\", filterProvince);\r\n        const initialValues: any = {};\r\n        if (initialLoad) {\r\n            Object.keys(queryValues).map((val) => {\r\n                if (val === \"category\") {\r\n                    initialValues.category = filterCategory;\r\n                } else if (val === \"province\") {\r\n                    initialValues.province = filterProvince;\r\n                } else if (val === \"city\") {\r\n                    initialValues.city = filterCity;\r\n                }\r\n            });\r\n            setInitialLoad(false);\r\n        } else {\r\n            if (filterCategory || filterCategory === \"\") {\r\n                initialValues.category = filterCategory;\r\n            }\r\n            if (filterProvince || filterProvince === \"\") {\r\n                initialValues.province = filterProvince;\r\n            }\r\n            if (filterCity || filterCity === \"\") {\r\n                initialValues.city = filterCity;\r\n            }\r\n        }\r\n        return initialValues;\r\n    };\r\n\r\n    const directToListingsPage = () => {\r\n        if (filterQueries && searchValue) {\r\n            // history.push(`/listings/1?search=${searchValue}&${filterQueries}`);\r\n            history.push({\r\n                pathname: \"/listings/1\",\r\n                search: `?search=${searchValue}&${filterQueries}`,\r\n            });\r\n        } else if (filterQueries) {\r\n            // history.push(`/listings/1?${filterQueries}`);\r\n            history.push({\r\n                pathname: \"/listings/1\",\r\n                search: `?${filterQueries}`,\r\n            });\r\n        } else if (searchValue) {\r\n            //history.push(`/listings/1?search=${searchValue}`);\r\n            history.push({\r\n                pathname: \"/listings/1\",\r\n                search: `?search=${searchValue}`,\r\n            });\r\n        } else {\r\n            history.push(`/listings/1`);\r\n        }\r\n    };\r\n\r\n    const handleKeyDown = (event) => {\r\n        //https://stackoverflow.com/questions/31272207/to-call-onchange-event-after-pressing-enter-key\r\n        if (event.key === \"Enter\") {\r\n            event.preventDefault(); //so ?search= won't automatically be inserted in the query when enter is clicked\r\n            directToListingsPage();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <form className=\"searchBarForm\">\r\n            <FontAwesomeIcon\r\n                className=\"searchBarIcons\"\r\n                icon={faSlidersH}\r\n                onClick={() => setShowFilterModal(true)}\r\n            />\r\n            <input\r\n                className=\"searchBarInput\"\r\n                type=\"search\"\r\n                placeholder=\"Search...\"\r\n                // aria-label=\"Search\"\r\n                value={searchValue}\r\n                name=\"search\"\r\n                onChange={(event) => setSearchValue(event.target.value.trim())}\r\n                onKeyDown={handleKeyDown}\r\n                autoComplete=\"off\"\r\n            />\r\n            <FontAwesomeIcon\r\n                className=\"searchBarIcons\"\r\n                icon={faSearch}\r\n                onClick={() => {\r\n                    directToListingsPage();\r\n                }}\r\n            />\r\n            {renderModal()}\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default Searchbar;\r\n","C:\\projects\\kijiji\\server\\client\\src\\windowDimensions.tsx",["213"],"import React from \"react\";\r\n\r\nimport { useState, useEffect } from \"react\";\r\n\r\nconst getWindowDimensions = () => {\r\n    const { innerWidth: width, innerHeight: height } = window;\r\n    return {\r\n        width,\r\n        height,\r\n    };\r\n};\r\n\r\nconst useWindowDimensions = () => {\r\n    const [windowDimensions, setWindowDimensions] = useState(\r\n        getWindowDimensions()\r\n    );\r\n\r\n    useEffect(() => {\r\n        function handleResize() {\r\n            setWindowDimensions(getWindowDimensions());\r\n        }\r\n\r\n        window.addEventListener(\"resize\", handleResize);\r\n        return () => window.removeEventListener(\"resize\", handleResize);\r\n    }, []);\r\n\r\n    return windowDimensions;\r\n};\r\nexport default useWindowDimensions;\r\n","C:\\projects\\kijiji\\server\\client\\src\\components\\Modal.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\components\\SearchFilterForm.tsx",["214","215","216"],"import React, { ComponentType, useState, useEffect } from \"react\";\r\nimport {\r\n    Field,\r\n    reduxForm,\r\n    InjectedFormProps,\r\n    formValueSelector,\r\n} from \"redux-form\";\r\n//compose is used to make it easier to \"organize\" mapStateToProps and redux form\r\nimport { StoreState } from \"../reducers\";\r\nimport { connect } from \"react-redux\";\r\nimport { SearchFilterFormProps } from \"./Searchbar\";\r\nimport { fetchCategoriesForListing } from \"../actions\";\r\nimport LoadingDots from \"./LoadingDots\";\r\nimport { CANADIAN_PROVINCES, CANADIAN_PROVINCE_AND_CITIES } from \"../constants\";\r\n\r\n//Typescriptand redux form:\r\n//https://levelup.gitconnected.com/react-js-typescript-redux-redux-form-jest-e522995ebe36\r\n\r\n//Need to hoist render methods up or else it will give error where it will unfocus after first characther is typed\r\n//https://stackoverflow.com/questions/39839051/using-redux-form-im-losing-focus-after-typing-the-first-character\r\n\r\nexport interface SearchFilterFormValues {\r\n    search?: string;\r\n    category?: string;\r\n    province?: string;\r\n    city?: string;\r\n}\r\n\r\nconst SearchFilterForm: React.FC<\r\n    SearchFilterFormProps & InjectedFormProps<{}, SearchFilterFormProps>\r\n> = (props) => {\r\n    const renderDropDown = ({\r\n        name,\r\n        input,\r\n        label,\r\n        meta,\r\n        placeHolder,\r\n        optionValues,\r\n    }: any) => {\r\n        return (\r\n            <select\r\n                className=\"modalFilterCategoriesDropdown\"\r\n                autoComplete=\"off\"\r\n                {...input}\r\n            >\r\n                <option value=\"\"></option>\r\n                {optionValues.map((val) => (\r\n                    <option key={val} value={val}>\r\n                        {val}\r\n                    </option>\r\n                ))}\r\n            </select>\r\n        );\r\n    };\r\n\r\n    const onSubmit = (formValues: SearchFilterFormValues, dispatch: any) => {\r\n        if (!formValues.province) {\r\n            //City field does not get reseted to \" \" if user makes province an empty field first\r\n            formValues.city = \"\";\r\n        }\r\n        props.onSubmit(formValues);\r\n    };\r\n\r\n    useEffect(() => {\r\n        props.fetchCategoriesForListing();\r\n    }, []);\r\n\r\n    const renderFields = () => {\r\n        if (props.categories.length === 0) {\r\n            return (\r\n                <div className=\"centerLoadingForModal\">\r\n                    <LoadingDots />\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <form onSubmit={props.handleSubmit(onSubmit)}>\r\n                    <h3>Categories</h3>\r\n                    <Field\r\n                        type=\"text\"\r\n                        name=\"category\"\r\n                        label=\"category\"\r\n                        component={renderDropDown}\r\n                        optionValues={props.categories}\r\n                    />\r\n                    <div className=\"modalFilterLocationWrap\">\r\n                        <div className=\"modalLocationDropdownWrap\">\r\n                            <h3>Province</h3>\r\n                            <Field\r\n                                name=\"province\"\r\n                                label=\"province\"\r\n                                type=\"text\"\r\n                                component={renderDropDown}\r\n                                optionValues={CANADIAN_PROVINCES.map(\r\n                                    (province) => {\r\n                                        return province.name;\r\n                                    }\r\n                                )}\r\n                            />\r\n                        </div>\r\n                        <div className=\"modalLocationDropdownWrap\">\r\n                            <h3>City</h3>\r\n                            <Field\r\n                                name=\"city\"\r\n                                label=\"city\"\r\n                                type=\"text\"\r\n                                component={renderDropDown}\r\n                                optionValues={\r\n                                    !props.provinceValue\r\n                                        ? []\r\n                                        : CANADIAN_PROVINCE_AND_CITIES.filter(\r\n                                              (provinceAndCity) =>\r\n                                                  provinceAndCity.province ===\r\n                                                  props.provinceValue\r\n                                          )[0].cities\r\n                                }\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <button className=\"modalAcceptButton\">Accept</button>\r\n                    {/* https://stackoverflow.com/questions/41590766/redux-form-always-validates-even-on-a-normal-button-press */}\r\n                    {/* By adding type=\"button\" the button will not be a \"submit\" button */}\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"modalCancelButton\"\r\n                        onClick={props.onCancel}\r\n                    >\r\n                        Cancel\r\n                    </button>\r\n                </form>\r\n            );\r\n        }\r\n    };\r\n    return <React.Fragment>{renderFields()}</React.Fragment>;\r\n};\r\n\r\nconst validate = (formValues: SearchFilterFormValues) => {\r\n    //MUST BE NAMED VALIDATE! Other names would be ignored by reduxForm(..)\r\n    const errors = {};\r\n    //If you return an empty object, redux form will assume everything is ok\r\n    return errors;\r\n};\r\n\r\nconst selector = formValueSelector(\"searchFilterForm\");\r\nconst mapStateToProps = (state: StoreState) => {\r\n    return {\r\n        categories: state.categories,\r\n        provinceValue: selector(state, \"province\"),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, { fetchCategoriesForListing })(\r\n    reduxForm<{}, SearchFilterFormProps>({\r\n        form: \"searchFilterForm\",\r\n        validate,\r\n    })(SearchFilterForm)\r\n);\r\n","C:\\projects\\kijiji\\server\\client\\src\\components\\LoadingDots.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\components\\ListingDetail.tsx",["217","218","219","220","221"],"import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport history from \"../browserHistory\";\r\nimport { connect } from \"react-redux\";\r\nimport { StoreState } from \"../reducers\";\r\nimport {\r\n    ListingDetail as ListingDetailType,\r\n    fetchListingDetail,\r\n    ServerError,\r\n} from \"../actions\";\r\nimport postAdListingImagePlaceHolder from \"../img/postAdListingImagePlaceHolder.png\";\r\nimport defaultProfilePic from \"../img/defaultProfilePic.jpg\";\r\nimport Loading from \"./Loading\";\r\nimport moment from \"moment\";\r\n\r\ninterface ListingDetailProps {\r\n    fetchListingDetail(listingId: string): void;\r\n    listingDetail: ListingDetailType;\r\n    match: any;\r\n}\r\nconst ListingDetail: React.FC<ListingDetailProps> = (props) => {\r\n    const [showMore, setShowMore] = useState(false);\r\n    useEffect(() => {\r\n        props.fetchListingDetail(props.match.params.id);\r\n    }, []);\r\n\r\n    const renderListingDetail = () => {\r\n        if (!props.listingDetail) {\r\n            return (\r\n                <div className=\"loadingCenter\">\r\n                    <Loading />\r\n                </div>\r\n            );\r\n            //too lazy to fix ts error, but I get the idea\r\n        } else if (props.listingDetail.error) {\r\n            return (\r\n                <div className=\"serverErrorContainer\">\r\n                    <h3 className=\"serverErrorText\">\r\n                        {props.listingDetail.error}\r\n                    </h3>\r\n                </div>\r\n            );\r\n        } else {\r\n            const {\r\n                first_name,\r\n                last_name,\r\n                member_since,\r\n                email,\r\n                listing_id,\r\n                listing_name,\r\n                listing_price,\r\n                listing_description,\r\n                category_name,\r\n                listing_image,\r\n                province,\r\n                city,\r\n                street,\r\n                listing_date,\r\n            } = props.listingDetail;\r\n\r\n            return (\r\n                <React.Fragment>\r\n                    <div className=\"listingDetailCategories\">\r\n                        <h3>{`${province} > ${city} > ${street} > ${category_name}`}</h3>\r\n                    </div>\r\n                    <div className=\"listingDetailTitleAndPriceContainer\">\r\n                        <h3 className=\"listingDetailTitle\">{listing_name}</h3>\r\n                        <h3 className=\"listingDetailPrice\">{`$${listing_price}`}</h3>\r\n                    </div>\r\n                    <div className=\"listingDetailInfoAndContactContainer\">\r\n                        <div className=\"listingDetailContainer\">\r\n                            <div className=\"listingDetailImageContainer\">\r\n                                <img\r\n                                    // src={postAdListingImagePlaceHolder}\r\n                                    src={\r\n                                        !listing_image\r\n                                            ? postAdListingImagePlaceHolder\r\n                                            : listing_image\r\n                                    }\r\n                                    onError={(e) => {\r\n                                        e.target.src = postAdListingImagePlaceHolder;\r\n                                    }}\r\n                                    alt=\"listing\"\r\n                                />\r\n                            </div>\r\n                            <div className=\"listingDetailDescriptionContainer\">\r\n                                <div className=\"listingDescriptionTextWrap\">\r\n                                    <h3 className=\"listingDetailPostedOn\">\r\n                                        {`Posted On:  ${moment(\r\n                                            listing_date\r\n                                        ).format(\"YYYY/MM/DD\")}`}\r\n                                    </h3>\r\n                                    <h3 className=\"locationOfPost\">{`${province}, ${city}, ${street}`}</h3>\r\n                                    <h3 className=\"listingDetailDescriptionTitle\">\r\n                                        Description\r\n                                    </h3>\r\n\r\n                                    <p>{listing_description}</p>\r\n                                </div>\r\n                                <div\r\n                                    className={\r\n                                        showMore\r\n                                            ? \"\"\r\n                                            : \"listingDetailDescriptionFade\"\r\n                                    }\r\n                                ></div>\r\n                                <h3\r\n                                    className={\r\n                                        showMore\r\n                                            ? \"listingDetailShowMoreTextHide\"\r\n                                            : \"listingDetailShowMoreText\"\r\n                                    }\r\n                                    onClick={() => setShowMore(true)}\r\n                                >\r\n                                    Show More\r\n                                </h3>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"listingDetailContactContainer\">\r\n                            <div className=\"listingDetailProfileImageAndNameWrap\">\r\n                                <img src={defaultProfilePic} alt=\"profile\" />\r\n                                <h3>\r\n                                    {`${first_name}\r\n                                    ${last_name}`}\r\n                                </h3>\r\n                            </div>\r\n                            <div className=\"contactAndMemberWrap\">\r\n                                <h3>{`Contact at: ${email}`}</h3>\r\n                                <h3>{`Member Since: ${moment(\r\n                                    member_since\r\n                                ).format(\"YYYY/MM/DD\")} `}</h3>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </React.Fragment>\r\n            );\r\n        }\r\n    };\r\n    return <React.Fragment>{renderListingDetail()}</React.Fragment>;\r\n};\r\n\r\nconst mapStateToProps = (state: StoreState) => {\r\n    return { listingDetail: state.listingInfo.data };\r\n};\r\n\r\nexport default connect(mapStateToProps, { fetchListingDetail })(ListingDetail);\r\n","C:\\projects\\kijiji\\server\\client\\src\\components\\Profile.tsx",["222","223","224","225","226","227"],"import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport history from \"../browserHistory\";\r\nimport { connect } from \"react-redux\";\r\nimport { StoreState } from \"../reducers\";\r\nimport { ListingDetail as ListingDetailType } from \"../actions\";\r\nimport postAdListingImagePlaceHolder from \"../img/postAdListingImagePlaceHolder.png\";\r\nimport defaultProfilePic from \"../img/defaultProfilePic.jpg\";\r\nimport Loading from \"./Loading\";\r\nimport moment from \"moment\";\r\nimport emptyBox from \"../img/emptyBox.svg\";\r\nimport { fetchUserProfile } from \"../actions\";\r\nimport Listing from \"./Listing\";\r\nimport { Listing as ListingType } from \"../actions\";\r\nimport requireAuth from \"./requireAuth\";\r\ninterface ProfileProps {\r\n    fetchUserProfile(): void;\r\n    profileInfo: any;\r\n}\r\nconst Profile: React.FC<ProfileProps> = (props) => {\r\n    useEffect(() => {\r\n        props.fetchUserProfile();\r\n    }, []);\r\n\r\n    const renderListings = (listings) => {\r\n        if (listings.length === 0) {\r\n            return (\r\n                <div className=\"userListingContainerEmpty\">\r\n                    <h3 className=\"userListingText\">0 listings</h3>\r\n\r\n                    <img className=\"emptyBox\" src={emptyBox} alt=\"empty box\" />\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div className=\"userListingContainerFilled\">\r\n                    <h3>Your Listings :</h3>\r\n                    {listings.map((listing: ListingType) => {\r\n                        return (\r\n                            <Listing key={listing.listing_id} {...listing} />\r\n                        );\r\n                    })}\r\n                </div>\r\n            );\r\n        }\r\n    };\r\n    const renderListingDetail = () => {\r\n        if (!props.profileInfo) {\r\n            return (\r\n                <div className=\"loadingCenter\">\r\n                    <Loading />\r\n                </div>\r\n            );\r\n        } else if (props.profileInfo.error) {\r\n            return (\r\n                <div className=\"serverErrorContainer\">\r\n                    <h3 className=\"serverErrorText\">\r\n                        {props.profileInfo.error}\r\n                    </h3>\r\n                </div>\r\n            );\r\n        } else {\r\n            const {\r\n                first_name,\r\n                last_name,\r\n                member_since,\r\n                listings,\r\n            } = props.profileInfo;\r\n\r\n            return (\r\n                <React.Fragment>\r\n                    <div className=\"profileInfoAndListingContainer\">\r\n                        <div className=\"profileInfoContainer\">\r\n                            <div className=\"profileBannerContainer\">\r\n                                <div className=\"purpleBanner\"></div>\r\n                                <img src={defaultProfilePic} alt=\"profie\"></img>\r\n                                <div className=\"whiteBanner\"></div>\r\n                            </div>\r\n                            <h3>{` ${first_name} ${last_name}`}</h3>\r\n                            <h3>\r\n                                {`Member Since: ${moment(member_since).format(\r\n                                    \"YYYY/MM/DD\"\r\n                                )}`}\r\n                            </h3>\r\n                        </div>\r\n                        {renderListings(listings)}\r\n                    </div>\r\n                </React.Fragment>\r\n            );\r\n        }\r\n    };\r\n    return <React.Fragment>{renderListingDetail()}</React.Fragment>;\r\n};\r\n\r\nconst mapStateToProps = (state: StoreState) => {\r\n    return { profileInfo: state.profileInfo.data };\r\n};\r\n\r\nexport default connect(mapStateToProps, { fetchUserProfile })(\r\n    requireAuth(Profile)\r\n);\r\n","C:\\projects\\kijiji\\server\\client\\src\\reducers\\profileReducer.tsx",["228"],"import { ActionTypes, UserProfileAction } from \"../actions\";\r\nimport { UserProfile } from \"../actions\";\r\nimport _ from \"lodash\";\r\n\r\nexport interface UserProfileDataResponse {\r\n    data?: UserProfile;\r\n}\r\n\r\nconst listingReducer = (\r\n    state: UserProfileDataResponse = {},\r\n    action: UserProfileAction\r\n) => {\r\n    switch (action.type) {\r\n        case ActionTypes.FETCH_USER_PROFILE:\r\n            return { ...state, data: action.payload };\r\n        case ActionTypes.FETCH_USER_PROFILE_ERROR:\r\n            return { ...state, data: action.payload };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default listingReducer;\r\n","C:\\projects\\kijiji\\server\\client\\src\\actions\\profile.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\components\\EditAd.tsx",["229","230","231","232","233","234","235","236","237"],"C:\\projects\\kijiji\\server\\client\\src\\components\\EditOrPostAdForm.tsx",["238","239","240"],{"ruleId":"241","replacedBy":"242"},{"ruleId":"243","replacedBy":"244"},{"ruleId":"245","severity":1,"message":"246","line":2,"column":10,"nodeType":"247","messageId":"248","endLine":2,"endColumn":14},{"ruleId":"245","severity":1,"message":"249","line":1,"column":17,"nodeType":"247","messageId":"248","endLine":1,"endColumn":26},{"ruleId":"245","severity":1,"message":"250","line":1,"column":28,"nodeType":"247","messageId":"248","endLine":1,"endColumn":36},{"ruleId":"245","severity":1,"message":"246","line":2,"column":10,"nodeType":"247","messageId":"248","endLine":2,"endColumn":14},{"ruleId":"245","severity":1,"message":"251","line":2,"column":16,"nodeType":"247","messageId":"248","endLine":2,"endColumn":27},{"ruleId":"245","severity":1,"message":"252","line":7,"column":25,"nodeType":"247","messageId":"248","endLine":7,"endColumn":32},{"ruleId":"245","severity":1,"message":"253","line":8,"column":8,"nodeType":"247","messageId":"248","endLine":8,"endColumn":18},{"ruleId":"245","severity":1,"message":"254","line":9,"column":8,"nodeType":"247","messageId":"248","endLine":9,"endColumn":21},{"ruleId":"245","severity":1,"message":"255","line":11,"column":8,"nodeType":"247","messageId":"248","endLine":11,"endColumn":15},{"ruleId":"245","severity":1,"message":"251","line":6,"column":10,"nodeType":"247","messageId":"248","endLine":6,"endColumn":21},{"ruleId":"245","severity":1,"message":"256","line":1,"column":17,"nodeType":"247","messageId":"248","endLine":1,"endColumn":30},{"ruleId":"245","severity":1,"message":"249","line":1,"column":32,"nodeType":"247","messageId":"248","endLine":1,"endColumn":41},{"ruleId":"245","severity":1,"message":"257","line":5,"column":5,"nodeType":"247","messageId":"248","endLine":5,"endColumn":10},{"ruleId":"245","severity":1,"message":"258","line":6,"column":5,"nodeType":"247","messageId":"248","endLine":6,"endColumn":11},{"ruleId":"245","severity":1,"message":"259","line":11,"column":10,"nodeType":"247","messageId":"248","endLine":11,"endColumn":20},{"ruleId":"245","severity":1,"message":"256","line":1,"column":17,"nodeType":"247","messageId":"248","endLine":1,"endColumn":30},{"ruleId":"245","severity":1,"message":"249","line":1,"column":32,"nodeType":"247","messageId":"248","endLine":1,"endColumn":41},{"ruleId":"245","severity":1,"message":"257","line":5,"column":5,"nodeType":"247","messageId":"248","endLine":5,"endColumn":10},{"ruleId":"245","severity":1,"message":"258","line":6,"column":5,"nodeType":"247","messageId":"248","endLine":6,"endColumn":11},{"ruleId":"245","severity":1,"message":"260","line":6,"column":5,"nodeType":"247","messageId":"248","endLine":6,"endColumn":34},{"ruleId":"245","severity":1,"message":"254","line":5,"column":8,"nodeType":"247","messageId":"248","endLine":5,"endColumn":21},{"ruleId":"245","severity":1,"message":"252","line":2,"column":10,"nodeType":"247","messageId":"248","endLine":2,"endColumn":17},{"ruleId":"245","severity":1,"message":"261","line":3,"column":8,"nodeType":"247","messageId":"248","endLine":3,"endColumn":9},{"ruleId":"245","severity":1,"message":"262","line":2,"column":10,"nodeType":"247","messageId":"248","endLine":2,"endColumn":13},{"ruleId":"245","severity":1,"message":"246","line":2,"column":10,"nodeType":"247","messageId":"248","endLine":2,"endColumn":14},{"ruleId":"245","severity":1,"message":"263","line":3,"column":8,"nodeType":"247","messageId":"248","endLine":3,"endColumn":15},{"ruleId":"245","severity":1,"message":"264","line":16,"column":8,"nodeType":"247","messageId":"248","endLine":16,"endColumn":19},{"ruleId":"245","severity":1,"message":"265","line":17,"column":23,"nodeType":"247","messageId":"248","endLine":17,"endColumn":32},{"ruleId":"266","severity":1,"message":"267","line":206,"column":8,"nodeType":"268","endLine":206,"endColumn":41,"suggestions":"269"},{"ruleId":"245","severity":1,"message":"246","line":2,"column":10,"nodeType":"247","messageId":"248","endLine":2,"endColumn":14},{"ruleId":"245","severity":1,"message":"250","line":1,"column":17,"nodeType":"247","messageId":"248","endLine":1,"endColumn":25},{"ruleId":"270","severity":1,"message":"271","line":34,"column":51,"nodeType":"272","messageId":"273","endLine":34,"endColumn":53},{"ruleId":"245","severity":1,"message":"246","line":2,"column":10,"nodeType":"247","messageId":"248","endLine":2,"endColumn":14},{"ruleId":"245","severity":1,"message":"274","line":11,"column":10,"nodeType":"247","messageId":"248","endLine":11,"endColumn":16},{"ruleId":"245","severity":1,"message":"275","line":11,"column":18,"nodeType":"247","messageId":"248","endLine":11,"endColumn":25},{"ruleId":"276","severity":1,"message":"277","line":46,"column":29,"nodeType":"278","messageId":"279","endLine":46,"endColumn":31},{"ruleId":"266","severity":1,"message":"280","line":97,"column":8,"nodeType":"268","endLine":97,"endColumn":10,"suggestions":"281"},{"ruleId":"276","severity":1,"message":"277","line":103,"column":48,"nodeType":"278","messageId":"279","endLine":103,"endColumn":50},{"ruleId":"245","severity":1,"message":"282","line":1,"column":8,"nodeType":"247","messageId":"248","endLine":1,"endColumn":13},{"ruleId":"245","severity":1,"message":"256","line":1,"column":17,"nodeType":"247","messageId":"248","endLine":1,"endColumn":30},{"ruleId":"245","severity":1,"message":"250","line":1,"column":32,"nodeType":"247","messageId":"248","endLine":1,"endColumn":40},{"ruleId":"266","severity":1,"message":"283","line":66,"column":8,"nodeType":"268","endLine":66,"endColumn":10,"suggestions":"284"},{"ruleId":"245","severity":1,"message":"246","line":2,"column":10,"nodeType":"247","messageId":"248","endLine":2,"endColumn":14},{"ruleId":"245","severity":1,"message":"263","line":3,"column":8,"nodeType":"247","messageId":"248","endLine":3,"endColumn":15},{"ruleId":"245","severity":1,"message":"285","line":9,"column":5,"nodeType":"247","messageId":"248","endLine":9,"endColumn":16},{"ruleId":"266","severity":1,"message":"283","line":25,"column":8,"nodeType":"268","endLine":25,"endColumn":10,"suggestions":"286"},{"ruleId":"245","severity":1,"message":"287","line":49,"column":17,"nodeType":"247","messageId":"248","endLine":49,"endColumn":27},{"ruleId":"245","severity":1,"message":"250","line":1,"column":28,"nodeType":"247","messageId":"248","endLine":1,"endColumn":36},{"ruleId":"245","severity":1,"message":"246","line":2,"column":10,"nodeType":"247","messageId":"248","endLine":2,"endColumn":14},{"ruleId":"245","severity":1,"message":"263","line":3,"column":8,"nodeType":"247","messageId":"248","endLine":3,"endColumn":15},{"ruleId":"245","severity":1,"message":"288","line":6,"column":27,"nodeType":"247","messageId":"248","endLine":6,"endColumn":44},{"ruleId":"245","severity":1,"message":"289","line":7,"column":8,"nodeType":"247","messageId":"248","endLine":7,"endColumn":37},{"ruleId":"266","severity":1,"message":"283","line":23,"column":8,"nodeType":"268","endLine":23,"endColumn":10,"suggestions":"290"},{"ruleId":"245","severity":1,"message":"261","line":3,"column":8,"nodeType":"247","messageId":"248","endLine":3,"endColumn":9},{"ruleId":"245","severity":1,"message":"250","line":1,"column":28,"nodeType":"247","messageId":"248","endLine":1,"endColumn":36},{"ruleId":"245","severity":1,"message":"246","line":2,"column":10,"nodeType":"247","messageId":"248","endLine":2,"endColumn":14},{"ruleId":"245","severity":1,"message":"251","line":2,"column":16,"nodeType":"247","messageId":"248","endLine":2,"endColumn":27},{"ruleId":"245","severity":1,"message":"291","line":3,"column":8,"nodeType":"247","messageId":"248","endLine":3,"endColumn":19},{"ruleId":"245","severity":1,"message":"253","line":7,"column":8,"nodeType":"247","messageId":"248","endLine":7,"endColumn":18},{"ruleId":"245","severity":1,"message":"254","line":8,"column":8,"nodeType":"247","messageId":"248","endLine":8,"endColumn":21},{"ruleId":"245","severity":1,"message":"292","line":10,"column":10,"nodeType":"247","messageId":"248","endLine":10,"endColumn":29},{"ruleId":"245","severity":1,"message":"285","line":16,"column":5,"nodeType":"247","messageId":"248","endLine":16,"endColumn":16},{"ruleId":"266","severity":1,"message":"283","line":82,"column":8,"nodeType":"268","endLine":82,"endColumn":10,"suggestions":"293"},{"ruleId":"245","severity":1,"message":"257","line":5,"column":5,"nodeType":"247","messageId":"248","endLine":5,"endColumn":10},{"ruleId":"245","severity":1,"message":"275","line":20,"column":10,"nodeType":"247","messageId":"248","endLine":20,"endColumn":17},{"ruleId":"266","severity":1,"message":"283","line":157,"column":8,"nodeType":"268","endLine":157,"endColumn":10,"suggestions":"294"},"no-native-reassign",["295"],"no-negated-in-lhs",["296"],"@typescript-eslint/no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useState' is defined but never used.","'useLocation' is defined but never used.","'Listing' is defined but never used.","'jwt_decode' is defined but never used.","'CookieService' is defined but never used.","'Loading' is defined but never used.","'ComponentType' is defined but never used.","'reset' is defined but never used.","'change' is defined but never used.","'StoreState' is defined but never used.","'UploadImageToCloudinaryAction' is defined but never used.","'_' is defined but never used.","'css' is defined but never used.","'history' is defined but never used.","'queryString' is defined but never used.","'useParams' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'currentPage', 'props', and 'selectedSort'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["297"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'filter' is defined but never used.","'initial' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'queryValues.category', 'queryValues.city', 'queryValues.province', and 'queryValues.search'. Either include them or remove the dependency array.",["298"],"'React' is defined but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["299"],"'ServerError' is defined but never used.",["300"],"'listing_id' is assigned a value but never used.","'ListingDetailType' is defined but never used.","'postAdListingImagePlaceHolder' is defined but never used.",["301"],"'requireAuth' is defined but never used.","'ListingDataResponse' is defined but never used.",["302"],["303"],"no-global-assign","no-unsafe-negation",{"desc":"304","fix":"305"},{"desc":"306","fix":"307"},{"desc":"308","fix":"309"},{"desc":"308","fix":"310"},{"desc":"308","fix":"311"},{"desc":"308","fix":"312"},{"desc":"308","fix":"313"},"Update the dependencies array to be: [currentPage, props, props.match.params.page, search, selectedSort]",{"range":"314","text":"315"},"Update the dependencies array to be: [queryValues.category, queryValues.city, queryValues.province, queryValues.search]",{"range":"316","text":"317"},"Update the dependencies array to be: [props]",{"range":"318","text":"319"},{"range":"320","text":"319"},{"range":"321","text":"319"},{"range":"322","text":"319"},{"range":"323","text":"319"},[9382,9415],"[currentPage, props, props.match.params.page, search, selectedSort]",[3505,3507],"[queryValues.category, queryValues.city, queryValues.province, queryValues.search]",[2181,2183],"[props]",[901,903],[925,927],[2696,2698],[5149,5151]]