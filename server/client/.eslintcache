[{"C:\\projects\\kijiji\\server\\client\\src\\index.tsx":"1","C:\\projects\\kijiji\\server\\client\\src\\components\\App.tsx":"2","C:\\projects\\kijiji\\server\\client\\src\\browserHistory.tsx":"3","C:\\projects\\kijiji\\server\\client\\src\\components\\Routes.tsx":"4","C:\\projects\\kijiji\\server\\client\\src\\components\\Header.tsx":"5","C:\\projects\\kijiji\\server\\client\\src\\Root.tsx":"6","C:\\projects\\kijiji\\server\\client\\src\\reducers\\index.tsx":"7","C:\\projects\\kijiji\\server\\client\\src\\components\\PostAd.tsx":"8","C:\\projects\\kijiji\\server\\client\\src\\components\\Register.tsx":"9","C:\\projects\\kijiji\\server\\client\\src\\components\\SignIn.tsx":"10","C:\\projects\\kijiji\\server\\client\\src\\reducers\\authReducer.tsx":"11","C:\\projects\\kijiji\\server\\client\\src\\components\\requireAuth.tsx":"12","C:\\projects\\kijiji\\server\\client\\src\\components\\RegisterForm.tsx":"13","C:\\projects\\kijiji\\server\\client\\src\\components\\SignInForm.tsx":"14","C:\\projects\\kijiji\\server\\client\\src\\actions\\index.tsx":"15","C:\\projects\\kijiji\\server\\client\\src\\actions\\types.tsx":"16","C:\\projects\\kijiji\\server\\client\\src\\actions\\auth.tsx":"17","C:\\projects\\kijiji\\server\\client\\src\\actions\\axiosConfig.tsx":"18","C:\\projects\\kijiji\\server\\client\\src\\CookieService.tsx":"19","C:\\projects\\kijiji\\server\\client\\src\\reducers\\categoryReducer.tsx":"20","C:\\projects\\kijiji\\server\\client\\src\\reducers\\listingReducer.tsx":"21","C:\\projects\\kijiji\\server\\client\\src\\actions\\listing.tsx":"22","C:\\projects\\kijiji\\server\\client\\src\\components\\Loading.tsx":"23","C:\\projects\\kijiji\\server\\client\\src\\constants.tsx":"24","C:\\projects\\kijiji\\server\\client\\src\\components\\Listings.tsx":"25","C:\\projects\\kijiji\\server\\client\\src\\components\\Listing.tsx":"26","C:\\projects\\kijiji\\server\\client\\src\\components\\Pagination.tsx":"27","C:\\projects\\kijiji\\server\\client\\src\\components\\Searchbar.tsx":"28","C:\\projects\\kijiji\\server\\client\\src\\windowDimensions.tsx":"29","C:\\projects\\kijiji\\server\\client\\src\\components\\Modal.tsx":"30","C:\\projects\\kijiji\\server\\client\\src\\components\\SearchFilterForm.tsx":"31","C:\\projects\\kijiji\\server\\client\\src\\components\\LoadingDots.tsx":"32","C:\\projects\\kijiji\\server\\client\\src\\components\\ListingDetail.tsx":"33","C:\\projects\\kijiji\\server\\client\\src\\components\\Profile.tsx":"34","C:\\projects\\kijiji\\server\\client\\src\\reducers\\profileReducer.tsx":"35","C:\\projects\\kijiji\\server\\client\\src\\actions\\profile.tsx":"36","C:\\projects\\kijiji\\server\\client\\src\\components\\EditAd.tsx":"37","C:\\projects\\kijiji\\server\\client\\src\\components\\EditOrPostAdForm.tsx":"38"},{"size":317,"mtime":1608593598124,"results":"39","hashOfConfig":"40"},{"size":364,"mtime":1607913470313,"results":"41","hashOfConfig":"40"},{"size":89,"mtime":1607912608008,"results":"42","hashOfConfig":"40"},{"size":1071,"mtime":1611097135824,"results":"43","hashOfConfig":"40"},{"size":4327,"mtime":1611526383314,"results":"44","hashOfConfig":"40"},{"size":1832,"mtime":1608593598103,"results":"45","hashOfConfig":"40"},{"size":817,"mtime":1611190971629,"results":"46","hashOfConfig":"40"},{"size":1878,"mtime":1611197135775,"results":"47","hashOfConfig":"40"},{"size":2879,"mtime":1611284873330,"results":"48","hashOfConfig":"40"},{"size":2369,"mtime":1611286246190,"results":"49","hashOfConfig":"40"},{"size":954,"mtime":1609367265394,"results":"50","hashOfConfig":"40"},{"size":1791,"mtime":1608593598118,"results":"51","hashOfConfig":"40"},{"size":6935,"mtime":1611282242208,"results":"52","hashOfConfig":"40"},{"size":5490,"mtime":1611286503356,"results":"53","hashOfConfig":"40"},{"size":107,"mtime":1610646702147,"results":"54","hashOfConfig":"40"},{"size":1331,"mtime":1611178746903,"results":"55","hashOfConfig":"40"},{"size":3155,"mtime":1611281379944,"results":"56","hashOfConfig":"40"},{"size":3816,"mtime":1609367265357,"results":"57","hashOfConfig":"40"},{"size":1320,"mtime":1611198167132,"results":"58","hashOfConfig":"40"},{"size":476,"mtime":1611190354518,"results":"59","hashOfConfig":"40"},{"size":1381,"mtime":1611190949768,"results":"60","hashOfConfig":"40"},{"size":13118,"mtime":1611367570241,"results":"61","hashOfConfig":"40"},{"size":244,"mtime":1609367265371,"results":"62","hashOfConfig":"40"},{"size":11158,"mtime":1610761461693,"results":"63","hashOfConfig":"40"},{"size":9890,"mtime":1611531586892,"results":"64","hashOfConfig":"40"},{"size":3033,"mtime":1611530889218,"results":"65","hashOfConfig":"40"},{"size":1796,"mtime":1611454871254,"results":"66","hashOfConfig":"40"},{"size":7442,"mtime":1611515602796,"results":"67","hashOfConfig":"40"},{"size":727,"mtime":1610399332854,"results":"68","hashOfConfig":"40"},{"size":1281,"mtime":1611348625853,"results":"69","hashOfConfig":"40"},{"size":6077,"mtime":1611348439909,"results":"70","hashOfConfig":"40"},{"size":224,"mtime":1610399332829,"results":"71","hashOfConfig":"40"},{"size":6530,"mtime":1611193949481,"results":"72","hashOfConfig":"40"},{"size":3735,"mtime":1611527385052,"results":"73","hashOfConfig":"40"},{"size":662,"mtime":1611198200352,"results":"74","hashOfConfig":"40"},{"size":1427,"mtime":1611190830051,"results":"75","hashOfConfig":"40"},{"size":5140,"mtime":1611280802018,"results":"76","hashOfConfig":"40"},{"size":17600,"mtime":1611197114603,"results":"77","hashOfConfig":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},"1pba2ji",{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"80"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"80"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"80"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"80"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"80"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"80"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"80"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"80"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"80"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"80"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"141","messages":"142","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"143","messages":"144","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"80"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"80"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"80"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"80"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"80"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"80"},"C:\\projects\\kijiji\\server\\client\\src\\index.tsx",[],["171","172"],"C:\\projects\\kijiji\\server\\client\\src\\components\\App.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\browserHistory.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\components\\Routes.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\components\\Header.tsx",["173"],"C:\\projects\\kijiji\\server\\client\\src\\Root.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\reducers\\index.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\components\\PostAd.tsx",["174","175","176","177","178","179","180","181"],"import React, { useEffect, useState } from \"react\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport requireAuth from \"./requireAuth\";\r\nimport EditOrPostAdForm from \"./EditOrPostAdForm\";\r\nimport { connect } from \"react-redux\";\r\nimport { StoreState } from \"../reducers\";\r\nimport { createListing, Listing } from \"../actions/listing\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport CookieService from \"../CookieService\";\r\nimport { ListingDataResponse } from \"../reducers/listingReducer\";\r\nimport Loading from \"./Loading\";\r\n\r\nexport interface EditOrPostAdFormProps {\r\n    onSubmit(formValues: any): void;\r\n    onDelete?(formValues: any): void;\r\n    fetchCategoriesForListing(): void;\r\n    initialValues?: any;\r\n    provinceValue?: string;\r\n    categories: string[];\r\n    dispatch?: any;\r\n    cloudinaryImage?: string;\r\n}\r\n\r\nexport interface PostAdProps {\r\n    createListing(formValues: any): void;\r\n    listingInfo: ListingDataResponse;\r\n}\r\n\r\nconst PostAd: React.FC<PostAdProps> = (props) => {\r\n    // useEffect(() => {\r\n    //     const cookieService = CookieService.getService();\r\n    //     console.log(\"JWT DECODE\", jwt_decode(cookieService.getAccessToken()));\r\n    // }, []);\r\n    const onSubmitPostListing = async (formValues: any) => {\r\n        props.createListing(formValues);\r\n    };\r\n    return (\r\n        <div className=\"postAdPageContainer\">\r\n            <h1>Post Your Ad, it's fast and easy</h1>\r\n            <EditOrPostAdForm\r\n                onSubmit={onSubmitPostListing}\r\n                // initialValues={{\r\n                //     title: \"bye\",\r\n                //     image: \"\",\r\n                // }}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: StoreState) => {\r\n    return {\r\n        listingInfo: state.listingInfo,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, { createListing })(requireAuth(PostAd));\r\n","C:\\projects\\kijiji\\server\\client\\src\\components\\Register.tsx",["182"],"import React, { useEffect } from \"react\";\r\nimport RegisterForm, { RegisterFormValues } from \"./RegisterForm\";\r\nimport { StoreState } from \"../reducers\";\r\nimport { signUp } from \"../actions\";\r\nimport { connect } from \"react-redux\";\r\nimport history from \"../browserHistory\";\r\n\r\nexport interface RegisterFormProps {\r\n    onSubmit(formValues: any): void;\r\n    authStatus?: string | null;\r\n}\r\n\r\nexport interface RegisterProps {\r\n    signUp(formValues: any): void;\r\n    authStatus?: string | null;\r\n}\r\n\r\nconst Register: React.FC<RegisterProps> = (props) => {\r\n    //const history = useHistory();\r\n    const onSubmitRegister = async (formValues: RegisterFormValues) => {\r\n        props.signUp(formValues);\r\n    };\r\n\r\n    useEffect(() => {\r\n        //If user is already logged in, they should be unable to visit this page\r\n        if (props.authStatus) {\r\n            history.push(\"/listings/1\");\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"registerContainer\">\r\n            <div className=\"registerFormWrap\">\r\n                <RegisterForm\r\n                    onSubmit={(formValues: any) => onSubmitRegister(formValues)}\r\n                />\r\n            </div>\r\n            <div className=\"registerMiscWrap\">\r\n                <div className=\"alreadyRegisteredContainer\">\r\n                    <h1>Already Registered?</h1>\r\n                    <p>Sign in to post your ad</p>\r\n                    <button\r\n                        data-testid=\"alreadyRegisteredButton\"\r\n                        className=\"alreadyRegisteredButton\"\r\n                        onClick={() => history.push(\"/signin\")}\r\n                    >\r\n                        Sign in\r\n                    </button>\r\n                </div>\r\n                <div className=\"whyRegisterContainer\">\r\n                    <h1>Why Register?</h1>\r\n                    <p>\r\n                        To enhance your Kijiji experience and help you stay safe\r\n                        and secure, you now need to register to:\r\n                    </p>\r\n                    <ul>\r\n                        <li>Post, edit and manage ads</li>\r\n                        <li>\r\n                            Access saved ads in your Favourites from all of your\r\n                            devices\r\n                        </li>\r\n                        <li>\r\n                            Easily promote multiple ads to gain more visibility\r\n                            and view order history\r\n                        </li>\r\n                        <li>Reserve your own nickname</li>\r\n                        <li>And much more!</li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: StoreState) => {\r\n    return {\r\n        authStatus: state.authStatus.authenticated,\r\n    };\r\n};\r\nexport default connect(mapStateToProps, { signUp })(Register);\r\n","C:\\projects\\kijiji\\server\\client\\src\\components\\SignIn.tsx",["183"],"import React, { useEffect } from \"react\";\r\nimport SignInForm, { SignInFormValues } from \"./SignInForm\";\r\nimport { signIn } from \"../actions\";\r\nimport { StoreState } from \"../reducers\";\r\nimport { connect } from \"react-redux\";\r\nimport history from \"../browserHistory\";\r\nexport interface SignInFormProps {\r\n    onSubmit(formValues: any): void;\r\n    authStatus?: string | null;\r\n}\r\n\r\nexport interface SignInProps {\r\n    signIn(formValues: any): void;\r\n    authStatus?: string | null;\r\n}\r\n\r\nconst SignIn: React.FC<SignInProps> = (props) => {\r\n    //const history = useHistory();\r\n    const onSubmitSignIn = async (formValues: SignInFormValues) => {\r\n        props.signIn(formValues);\r\n    };\r\n\r\n    useEffect(() => {\r\n        //If user is already logged in, they should be unable to visit this page\r\n        if (props.authStatus) {\r\n            history.push(\"/listings/1\");\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"signInContainer\">\r\n            <div className=\"signInFormWrap\">\r\n                <SignInForm\r\n                    onSubmit={(formValues: any) => onSubmitSignIn(formValues)}\r\n                />\r\n            </div>\r\n            <div className=\"signInMiscWrap\">\r\n                <div className=\"registerNowContainer\">\r\n                    <h1>Not registered yet?</h1>\r\n                    <p>\r\n                        Register now to post, edit, and manage ads. It’s quick,\r\n                        easy, and free!\r\n                    </p>\r\n                    <button\r\n                        data-testid=\"registerNowButton\"\r\n                        className=\"registerNowButton\"\r\n                        onClick={() => history.push(\"/\")}\r\n                    >\r\n                        Register Now\r\n                    </button>\r\n                </div>\r\n                <div>\r\n                    <h1>Protect Your Account</h1>\r\n                    <p>\r\n                        Ensure that whenever you sign in to Kijiji, the web\r\n                        address in your browser starts with\r\n                        https://www.kijiji.ca/\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: StoreState) => {\r\n    return {\r\n        authStatus: state.authStatus.authenticated,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, { signIn })(SignIn);\r\n","C:\\projects\\kijiji\\server\\client\\src\\reducers\\authReducer.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\components\\requireAuth.tsx",["184"],"import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { StoreState } from \"../reducers\";\r\nimport { History } from \"history\";\r\nimport { validateToken } from \"../actions\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nimport history from \"../browserHistory\";\r\n\r\nexport interface IHoc {\r\n    authStatus?: string | null;\r\n    history: History;\r\n    validateToken(path: string, retriedCalling: boolean): void;\r\n}\r\n\r\nconst hoc = (ChildComponent: any) => {\r\n    class ComposedComponent extends Component<IHoc> {\r\n        // Our component just got rendered\r\n        //Check for redux store's authStatus\r\n        componentDidMount() {\r\n            this.shouldNavigateAway();\r\n        }\r\n\r\n        // Our component just got updated\r\n        //If our redux store's authStatus changes\r\n        componentDidUpdate() {\r\n            this.shouldNavigateAway();\r\n        }\r\n\r\n        shouldNavigateAway() {\r\n            if (!this.props.authStatus) {\r\n                //if authStatus is empty string\r\n                //history is automatically passed due to React-router\r\n                //If done loading\r\n                this.props.history.push(\"/\");\r\n            } else {\r\n                //When user enter a page,\r\n                //validate access token, if it's not valid, redux's authStatus would be empty\r\n\r\n                this.props.validateToken(history.location.pathname, false);\r\n            }\r\n        }\r\n\r\n        render() {\r\n            return <ChildComponent {...this.props} />;\r\n        }\r\n    }\r\n\r\n    function mapStateToProps(state: StoreState) {\r\n        return {\r\n            authStatus: state.authStatus.authenticated,\r\n        };\r\n    }\r\n\r\n    return connect(mapStateToProps, { validateToken })(ComposedComponent);\r\n};\r\n\r\nexport default hoc;\r\n","C:\\projects\\kijiji\\server\\client\\src\\components\\RegisterForm.tsx",["185","186","187","188","189"],"import React, { ComponentType, useEffect } from \"react\";\r\nimport {\r\n    Field,\r\n    reduxForm,\r\n    reset,\r\n    change,\r\n    FormErrors,\r\n    InjectedFormProps,\r\n} from \"redux-form\";\r\n//compose is used to make it easier to \"organize\" mapStateToProps and redux form\r\nimport { StoreState } from \"../reducers\";\r\nimport { connect } from \"react-redux\";\r\nimport { RegisterFormProps } from \"./Register\";\r\n//Re-usable component\r\nexport interface RegisterFormValues {\r\n    email: string;\r\n    firstName: string;\r\n    lastName: string;\r\n    password: string;\r\n}\r\n\r\n//Typescriptand redux form:\r\n//https://levelup.gitconnected.com/react-js-typescript-redux-redux-form-jest-e522995ebe36\r\n\r\n//Need to hoist render methods up or else it will give error where it will unfocus after first characther is typed\r\n//https://stackoverflow.com/questions/39839051/using-redux-form-im-losing-focus-after-typing-the-first-character\r\n\r\nconst renderError = ({ error, touched }: any) => {\r\n    if (touched && error) {\r\n        //Touched (for input) will be false at first\r\n        //When clicked and then clicked otuside of the input, it will be true\r\n        return <div className=\"errorText\">{error}</div>;\r\n    }\r\n};\r\n\r\nconst renderTextInput = ({ input, label, meta, placeHolder }: any) => {\r\n    //\"component\" property automatically passes props to argument, it has {input properties and meta properties}\r\n    //\"label\" automatically passes props to arguments\r\n    return (\r\n        <div>\r\n            {/* <label>{label}</label> */}\r\n            <input\r\n                data-testid={label}\r\n                className=\"createAuthInputs\"\r\n                {...input}\r\n                autoComplete=\"off\"\r\n            />\r\n            {renderError(meta)}\r\n        </div>\r\n    );\r\n    //{..input} is shortcut for redux-form; where you take all the input from \"component's\" props and pass it as\r\n    //props to <input>\r\n};\r\n\r\nconst renderPasswordInput = ({ input, label, meta, placeHolder }: any) => {\r\n    return (\r\n        <div>\r\n            {/* <label>{label}</label> */}\r\n            <input\r\n                data-testid={label}\r\n                className=\"createAuthInputs\"\r\n                type=\"password\"\r\n                {...input}\r\n                autoComplete=\"off\"\r\n            />\r\n            {renderError(meta)}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst RegisterForm: React.FC<\r\n    RegisterFormProps & InjectedFormProps<{}, RegisterFormProps>\r\n> = (props) => {\r\n    const onSubmit = (formValues: any, dispatch: any) => {\r\n        //onSubmit's default param is any\r\n        //event.preventDefault() is automatically called with handleSubmit, a redux-form property\r\n        //form values are the values from the fields that redux-form automatiacally passes\r\n        //after clicking the submit button\r\n        //dispatch(reset(\"registerForm\"));\r\n        props.onSubmit(formValues);\r\n\r\n        //dispatch(change(\"registerForm\", \"password\", \"\"));\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <form\r\n                className=\"authForm\"\r\n                data-testid=\"registerForm\"\r\n                onSubmit={props.handleSubmit(onSubmit)}\r\n            >\r\n                <h1>Register</h1>\r\n                <div className=\"authFieldSection\">\r\n                    <div className=\"authFormFieldTitleWrap\">\r\n                        <h1>Email</h1>\r\n                        <h3 className=\"authFormFieldTitleEmailInUse\">\r\n                            {props.authStatus}\r\n                        </h3>\r\n                    </div>\r\n                    <Field\r\n                        name=\"email\"\r\n                        label=\"email\"\r\n                        type=\"text\"\r\n                        component={renderTextInput}\r\n                    />\r\n                </div>\r\n                <div className=\"authFieldSection\">\r\n                    <div className=\"authFormFieldTitleWrap\">\r\n                        <h1>First Name</h1>\r\n                        <h3 className=\"authFormFieldTitleEmailInUse\">\r\n                            {props.authStatus}\r\n                        </h3>\r\n                    </div>\r\n                    <Field\r\n                        name=\"firstName\"\r\n                        label=\"firstName\"\r\n                        type=\"text\"\r\n                        component={renderTextInput}\r\n                    />\r\n                </div>\r\n                <div className=\"authFieldSection\">\r\n                    <div className=\"authFormFieldTitleWrap\">\r\n                        <h1>Last Name</h1>\r\n                        <h3 className=\"authFormFieldTitleEmailInUse\">\r\n                            {props.authStatus}\r\n                        </h3>\r\n                    </div>\r\n                    <Field\r\n                        name=\"lastName\"\r\n                        label=\"lastName\"\r\n                        type=\"text\"\r\n                        component={renderTextInput}\r\n                    />\r\n                </div>\r\n                <div className=\"authFieldSection\">\r\n                    <div className=\"authFormFieldTitleWrap\">\r\n                        <h1>Password</h1>\r\n                        <h3 className=\"authFormFieldTitleEmailInUse\">\r\n                            {props.authStatus}\r\n                        </h3>\r\n                    </div>\r\n                    <Field\r\n                        name=\"password\"\r\n                        label=\"password\"\r\n                        type=\"password\"\r\n                        component={renderPasswordInput}\r\n                    />\r\n                </div>\r\n\r\n                <button data-testid=\"registerButton\" className=\"authButton\">\r\n                    Register\r\n                </button>\r\n            </form>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nconst validate = (\r\n    formValues: RegisterFormValues\r\n): FormErrors<RegisterFormValues> => {\r\n    //MUST BE NAMED VALIDATE! Other names would be ignored by reduxForm(..)\r\n    const errors: FormErrors<RegisterFormValues> = {};\r\n    //If you return an empty object, redux form will assume everything is ok\r\n    if (!formValues.email) {\r\n        //user did not enter title, so undefined\r\n        errors.email = \"You must enter an email\";\r\n        //Must be the same name as field name! The \"error\" property in {meta} would receive this\r\n    }\r\n\r\n    if (!formValues.firstName) {\r\n        errors.firstName = \"You must enter your first name\";\r\n    }\r\n\r\n    if (!formValues.lastName) {\r\n        errors.lastName = \"You must enter your last name\";\r\n    }\r\n    if (!formValues.password) {\r\n        errors.password = \"You must enter a password\";\r\n    }\r\n\r\n    return errors;\r\n    //Erors is going to be passed to renderInput's meta\r\n};\r\n\r\n// const mapStateToProps = (state: StoreState) => {\r\n//     return {\r\n//         authStatus: state.authStatus.errorMessage,\r\n//     };\r\n// };\r\n\r\nexport default connect()(\r\n    reduxForm<{}, RegisterFormProps>({\r\n        form: \"registerForm\",\r\n        validate,\r\n    })(RegisterForm)\r\n);\r\n","C:\\projects\\kijiji\\server\\client\\src\\components\\SignInForm.tsx",["190","191","192","193"],"import React, { ComponentType, useEffect } from \"react\";\r\nimport {\r\n    Field,\r\n    reduxForm,\r\n    reset,\r\n    change,\r\n    FormErrors,\r\n    InjectedFormProps,\r\n} from \"redux-form\";\r\n//compose is used to make it easier to \"organize\" mapStateToProps and redux form\r\nimport { StoreState } from \"../reducers\";\r\nimport { connect } from \"react-redux\";\r\nimport { SignInFormProps } from \"./SignIn\";\r\n//Re-usable component\r\nexport interface SignInFormValues {\r\n    email: string;\r\n    password: string;\r\n}\r\n\r\n//Typescriptand redux form:\r\n//https://levelup.gitconnected.com/react-js-typescript-redux-redux-form-jest-e522995ebe36\r\n\r\n//Need to hoist render methods up or else it will give error where it will unfocus after first characther is typed\r\n//https://stackoverflow.com/questions/39839051/using-redux-form-im-losing-focus-after-typing-the-first-character\r\n\r\nconst renderError = ({ error, touched }: any) => {\r\n    if (touched && error) {\r\n        //Touched (for input) will be false at first\r\n        //When clicked and then clicked otuside of the input, it will be true\r\n        return <div className=\"errorText\">{error}</div>;\r\n    }\r\n};\r\n\r\nconst renderTextInput = ({ input, label, meta, placeHolder }: any) => {\r\n    //\"component\" property automatically passes props to argument, it has {input properties and meta properties}\r\n    //\"label\" automatically passes props to arguments\r\n    return (\r\n        <div>\r\n            {/* <label>{label}</label> */}\r\n            <input\r\n                className=\"createAuthInputs\"\r\n                data-testid={label}\r\n                {...input}\r\n                autoComplete=\"off\"\r\n            />\r\n            {renderError(meta)}\r\n        </div>\r\n    );\r\n    //{..input} is shortcut for redux-form; where you take all the input from \"component's\" props and pass it as\r\n    //props to <input>\r\n};\r\n\r\nconst renderPasswordInput = ({ input, label, meta, placeHolder }: any) => {\r\n    return (\r\n        <div>\r\n            {/* <label>{label}</label> */}\r\n            <input\r\n                className=\"createAuthInputs\"\r\n                data-testid={label}\r\n                type=\"password\"\r\n                {...input}\r\n                autoComplete=\"off\"\r\n            />\r\n            {renderError(meta)}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst SignInForm: React.FC<\r\n    SignInFormProps & InjectedFormProps<{}, SignInFormProps>\r\n> = (props) => {\r\n    const onSubmit = (formValues: any, dispatch: any) => {\r\n        //onSubmit's default param is any\r\n        //event.preventDefault() is automatically called with handleSubmit, a redux-form property\r\n        //form values are the values from the fields that redux-form automatiacally passes\r\n        //after clicking the submit button\r\n        //dispatch(reset(\"registerForm\"));\r\n        props.onSubmit(formValues);\r\n        // dispatch(change(\"signInForm\", \"password\", \"\"));\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <form\r\n                className=\"authForm\"\r\n                data-testid=\"signInForm\"\r\n                onSubmit={props.handleSubmit(onSubmit)}\r\n            >\r\n                <h1>Sign In</h1>\r\n                <div className=\"authFieldSection\">\r\n                    <div className=\"authFormFieldTitleWrap\">\r\n                        <h1>Email</h1>\r\n                        <h3 className=\"authFormFieldTitleEmailInUse\">\r\n                            {props.authStatus}\r\n                        </h3>\r\n                    </div>\r\n                    <Field\r\n                        name=\"email\"\r\n                        label=\"email\"\r\n                        type=\"text\"\r\n                        component={renderTextInput}\r\n                    />\r\n                </div>\r\n                <div className=\"authFieldSection\">\r\n                    <div className=\"authFormFieldTitleWrap\">\r\n                        <h1>Password</h1>\r\n                        <h3 className=\"authFormFieldTitleEmailInUse\">\r\n                            {props.authStatus}\r\n                        </h3>\r\n                    </div>\r\n                    <Field\r\n                        name=\"password\"\r\n                        label=\"password\"\r\n                        type=\"password\"\r\n                        component={renderPasswordInput}\r\n                    />\r\n                </div>\r\n\r\n                <button className=\"authButton\" data-testid=\"signInButton\">\r\n                    Sign In\r\n                </button>\r\n            </form>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nconst validate = (\r\n    formValues: SignInFormValues\r\n): FormErrors<SignInFormValues> => {\r\n    //MUST BE NAMED VALIDATE! Other names would be ignored by reduxForm(..)\r\n    const errors: FormErrors<SignInFormValues> = {};\r\n    //If you return an empty object, redux form will assume everything is ok\r\n    if (!formValues.email) {\r\n        //user did not enter title, so undefined\r\n        errors.email = \"You must enter an email\";\r\n        //Must be the same name as field name! The \"error\" property in {meta} would receive this\r\n    }\r\n    if (!formValues.password) {\r\n        errors.password = \"You must enter a password\";\r\n    }\r\n    return errors;\r\n    //Erors is going to be passed to renderInput's meta\r\n};\r\n\r\nconst mapStateToProps = (state: StoreState) => {\r\n    return {\r\n        authStatus: state.authStatus.errorMessage,\r\n    };\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    {}\r\n)(\r\n    reduxForm<{}, SignInFormProps>({\r\n        form: \"signInForm\",\r\n        validate,\r\n    })(SignInForm)\r\n);\r\n","C:\\projects\\kijiji\\server\\client\\src\\actions\\index.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\actions\\types.tsx",["194"],"import {\r\n    AuthUserAction,\r\n    AuthErrorAction,\r\n    FetchCategoriesForListingAction,\r\n    FetchCategoriesForListingErrorAction,\r\n    UploadImageToCloudinaryAction,\r\n    CreateListingAction,\r\n    ListingErrorAction,\r\n    FetchListingsAction,\r\n    FetchListingDetailAction,\r\n    DeleteListingAction,\r\n} from \"../actions\";\r\nimport { EditListingAction } from \"./listing\";\r\nimport { FetchUserProfileAction, FetchUserProfileErrorAction } from \"./profile\";\r\nexport enum ActionTypes {\r\n    AUTH_USER,\r\n    AUTH_ERROR,\r\n    FETCH_CATEGORIES_FOR_LISTING,\r\n    FETCH_CATEGORIES_FOR_LISTING_ERROR,\r\n    UPLOAD_IMAGE_TO_CLOUDINARY,\r\n    CREATE_LISTING,\r\n    LISTING_ERROR,\r\n    FETCH_LISTINGS,\r\n    FETCH_LISTING_DETAIL,\r\n    FETCH_USER_PROFILE,\r\n    FETCH_USER_PROFILE_ERROR,\r\n    EDIT_LISTING,\r\n    DELETE_LISTING,\r\n}\r\nexport type AuthActions = AuthUserAction | AuthErrorAction;\r\nexport type FetchCategoriesActions =\r\n    | FetchCategoriesForListingAction\r\n    | FetchCategoriesForListingErrorAction;\r\nexport type ListingAction =\r\n    // | UploadImageToCloudinaryAction\r\n    | CreateListingAction\r\n    | ListingErrorAction\r\n    | FetchListingsAction\r\n    | FetchListingDetailAction\r\n    | EditListingAction\r\n    | DeleteListingAction;\r\n\r\nexport type UserProfileAction =\r\n    | FetchUserProfileAction\r\n    | FetchUserProfileErrorAction;\r\n","C:\\projects\\kijiji\\server\\client\\src\\actions\\auth.tsx",["195"],"import { ActionTypes } from \"./types\";\r\nimport auth from \"./axiosConfig\";\r\nimport { Dispatch } from \"redux\";\r\nimport history from \"../browserHistory\";\r\nimport CookieService from \"../CookieService\";\r\n\r\nexport interface JWTType {\r\n    token: string;\r\n}\r\nexport interface AuthUserAction {\r\n    type: ActionTypes.AUTH_USER;\r\n    payload: JWTType;\r\n}\r\nexport interface AuthErrorAction {\r\n    type: ActionTypes.AUTH_ERROR;\r\n    payload: string;\r\n}\r\n\r\nexport const signUp = (formValues: any) => async (dispatch: Dispatch) => {\r\n    try {\r\n        const response = await auth.post<JWTType>(\"/signup\", formValues);\r\n        dispatch<AuthUserAction>({\r\n            type: ActionTypes.AUTH_USER,\r\n            payload: response.data,\r\n        });\r\n        history.push(\"/listings/1\");\r\n    } catch (err) {\r\n        dispatch<AuthErrorAction>({\r\n            type: ActionTypes.AUTH_ERROR,\r\n            payload: \"- Email is in use\",\r\n        });\r\n    }\r\n};\r\nexport const signIn = (formValues: any) => async (dispatch: Dispatch) => {\r\n    try {\r\n        const response = await auth.post<JWTType>(\"/signin\", formValues);\r\n        dispatch<AuthUserAction>({\r\n            type: ActionTypes.AUTH_USER,\r\n            payload: response.data,\r\n        });\r\n        history.push(\"/listings/1\");\r\n    } catch (err) {\r\n        // if (err.message === \"Network Error\") {\r\n        //     console.log(\"check error\", err);\r\n        // }\r\n\r\n        dispatch<AuthErrorAction>({\r\n            type: ActionTypes.AUTH_ERROR,\r\n            payload: \"- Invalid login credentials\",\r\n        });\r\n    }\r\n};\r\n\r\nexport const signOut = () => async (dispatch: Dispatch) => {\r\n    try {\r\n        const response = await auth.post<JWTType>(\"/signout\");\r\n        dispatch<AuthUserAction>({\r\n            type: ActionTypes.AUTH_USER,\r\n            payload: response.data,\r\n        });\r\n        history.push(\"/\");\r\n        alert(\"Logged out succesfully\");\r\n    } catch (err) {\r\n        alert(\"Log out failed, try again\");\r\n    }\r\n};\r\n\r\nexport const validateToken = (path: string, retriedCalling: boolean) => async (\r\n    dispatch: Dispatch\r\n) => {\r\n    try {\r\n        const response = await auth.post<JWTType>(\r\n            path,\r\n            {}\r\n            // { headers: { Authorization: cookieService.getAccessToken() } } //assigned in axios' interceptors.request\r\n        );\r\n        //Ensures that our current access token is the newest one; if a new access token is given,\r\n        //we will update our current access token\r\n\r\n        //requireAuth HOC relies on the dispatch below\r\n        dispatch<AuthUserAction>({\r\n            type: ActionTypes.AUTH_USER,\r\n            payload: response.data,\r\n        });\r\n    } catch (err) {\r\n        if (retriedCalling === true) {\r\n            // If it fails again with the new access token (might be a forged token)\r\n            // Invalid token, kick our users out from a certain resource only accecible to signed in users\r\n            // dispatch<AuthErrorAction>({\r\n            //     type: ActionTypes.AUTH_ERROR,\r\n            //     payload: \"\",\r\n            // });\r\n\r\n            //Log them out\r\n            dispatch(signOut() as any);\r\n        }\r\n    }\r\n};\r\n","C:\\projects\\kijiji\\server\\client\\src\\actions\\axiosConfig.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\CookieService.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\reducers\\categoryReducer.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\reducers\\listingReducer.tsx",["196"],"import { ActionTypes, ListingAction } from \"../actions\";\r\nimport {\r\n    Listing,\r\n    FetchListingResponse,\r\n    ListingDetail,\r\n    ServerError,\r\n} from \"../actions\";\r\nimport _ from \"lodash\";\r\n\r\nexport interface ListingDataResponse {\r\n    data?: Listing | FetchListingResponse | ListingDetail | ServerError;\r\n}\r\n\r\nconst listingReducer = (\r\n    state: ListingDataResponse = {},\r\n    action: ListingAction\r\n) => {\r\n    switch (action.type) {\r\n        case ActionTypes.CREATE_LISTING:\r\n            return { ...state, data: action.payload };\r\n        case ActionTypes.LISTING_ERROR:\r\n            return { ...state, data: action.payload };\r\n        case ActionTypes.FETCH_LISTINGS:\r\n            return { ...state, data: action.payload };\r\n        //    return { ...state, ..._.mapKeys(action.payload, \"listing_id\") };\r\n        case ActionTypes.FETCH_LISTING_DETAIL:\r\n            return { ...state, data: action.payload };\r\n        case ActionTypes.EDIT_LISTING:\r\n            return { ...state, data: action.payload };\r\n        case ActionTypes.DELETE_LISTING:\r\n            // return _.omit(state, action.payload);\r\n            //Since we are re direcitng user that uses a different\r\n            //reducer, it dosent matter what we return\r\n            return { ...state, data: action.payload };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default listingReducer;\r\n","C:\\projects\\kijiji\\server\\client\\src\\actions\\listing.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\components\\Loading.tsx",["197"],"import React from \"react\";\r\nimport { css } from \"@emotion/core\";\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\nconst Loading = (): JSX.Element => {\r\n    return <ClipLoader color={\"grey\"} loading={true} />;\r\n};\r\nexport default Loading;\r\n","C:\\projects\\kijiji\\server\\client\\src\\constants.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\components\\Listings.tsx",["198","199","200","201","202"],"C:\\projects\\kijiji\\server\\client\\src\\components\\Listing.tsx",["203"],"C:\\projects\\kijiji\\server\\client\\src\\components\\Pagination.tsx",["204","205"],"C:\\projects\\kijiji\\server\\client\\src\\components\\Searchbar.tsx",["206","207","208","209","210","211"],"C:\\projects\\kijiji\\server\\client\\src\\windowDimensions.tsx",["212"],"import React from \"react\";\r\n\r\nimport { useState, useEffect } from \"react\";\r\n\r\nconst getWindowDimensions = () => {\r\n    const { innerWidth: width, innerHeight: height } = window;\r\n    return {\r\n        width,\r\n        height,\r\n    };\r\n};\r\n\r\nconst useWindowDimensions = () => {\r\n    const [windowDimensions, setWindowDimensions] = useState(\r\n        getWindowDimensions()\r\n    );\r\n\r\n    useEffect(() => {\r\n        function handleResize() {\r\n            setWindowDimensions(getWindowDimensions());\r\n        }\r\n\r\n        window.addEventListener(\"resize\", handleResize);\r\n        return () => window.removeEventListener(\"resize\", handleResize);\r\n    }, []);\r\n\r\n    return windowDimensions;\r\n};\r\nexport default useWindowDimensions;\r\n","C:\\projects\\kijiji\\server\\client\\src\\components\\Modal.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\components\\SearchFilterForm.tsx",["213","214","215"],"import React, { ComponentType, useState, useEffect } from \"react\";\r\nimport {\r\n    Field,\r\n    reduxForm,\r\n    InjectedFormProps,\r\n    formValueSelector,\r\n} from \"redux-form\";\r\n//compose is used to make it easier to \"organize\" mapStateToProps and redux form\r\nimport { StoreState } from \"../reducers\";\r\nimport { connect } from \"react-redux\";\r\nimport { SearchFilterFormProps } from \"./Searchbar\";\r\nimport { fetchCategoriesForListing } from \"../actions\";\r\nimport LoadingDots from \"./LoadingDots\";\r\nimport { CANADIAN_PROVINCES, CANADIAN_PROVINCE_AND_CITIES } from \"../constants\";\r\n\r\n//Typescriptand redux form:\r\n//https://levelup.gitconnected.com/react-js-typescript-redux-redux-form-jest-e522995ebe36\r\n\r\n//Need to hoist render methods up or else it will give error where it will unfocus after first characther is typed\r\n//https://stackoverflow.com/questions/39839051/using-redux-form-im-losing-focus-after-typing-the-first-character\r\n\r\nexport interface SearchFilterFormValues {\r\n    search?: string;\r\n    category?: string;\r\n    province?: string;\r\n    city?: string;\r\n}\r\n\r\nconst SearchFilterForm: React.FC<\r\n    SearchFilterFormProps & InjectedFormProps<{}, SearchFilterFormProps>\r\n> = (props) => {\r\n    const renderDropDown = ({\r\n        name,\r\n        input,\r\n        label,\r\n        meta,\r\n        placeHolder,\r\n        optionValues,\r\n    }: any) => {\r\n        return (\r\n            <select\r\n                className=\"modalFilterCategoriesDropdown\"\r\n                autoComplete=\"off\"\r\n                {...input}\r\n            >\r\n                <option value=\"\"></option>\r\n                {optionValues.map((val: string) => (\r\n                    <option key={val} value={val}>\r\n                        {val}\r\n                    </option>\r\n                ))}\r\n            </select>\r\n        );\r\n    };\r\n\r\n    const onSubmit = (formValues: SearchFilterFormValues, dispatch: any) => {\r\n        if (!formValues.province) {\r\n            //City field does not get reseted to \" \" if user makes province an empty field first\r\n            formValues.city = \"\";\r\n        }\r\n        props.onSubmit(formValues);\r\n    };\r\n\r\n    useEffect(() => {\r\n        props.fetchCategoriesForListing();\r\n    }, []);\r\n\r\n    const renderFields = () => {\r\n        if (props.categories.length === 0) {\r\n            return (\r\n                <div className=\"centerLoadingForModal\">\r\n                    <LoadingDots />\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <form onSubmit={props.handleSubmit(onSubmit)}>\r\n                    <h3>Categories</h3>\r\n                    <Field\r\n                        type=\"text\"\r\n                        name=\"category\"\r\n                        label=\"category\"\r\n                        component={renderDropDown}\r\n                        optionValues={props.categories}\r\n                    />\r\n                    <div className=\"modalFilterLocationWrap\">\r\n                        <div className=\"modalLocationDropdownWrap\">\r\n                            <h3>Province</h3>\r\n                            <Field\r\n                                name=\"province\"\r\n                                label=\"province\"\r\n                                type=\"text\"\r\n                                component={renderDropDown}\r\n                                optionValues={CANADIAN_PROVINCES.map(\r\n                                    (province) => {\r\n                                        return province.name;\r\n                                    }\r\n                                )}\r\n                            />\r\n                        </div>\r\n                        <div className=\"modalLocationDropdownWrap\">\r\n                            <h3>City</h3>\r\n                            <Field\r\n                                name=\"city\"\r\n                                label=\"city\"\r\n                                type=\"text\"\r\n                                component={renderDropDown}\r\n                                optionValues={\r\n                                    //@ts-ignore\r\n                                    !props.provinceValue\r\n                                        ? []\r\n                                        : CANADIAN_PROVINCE_AND_CITIES.filter(\r\n                                              (provinceAndCity) =>\r\n                                                  provinceAndCity.province ===\r\n                                                  //@ts-ignore\r\n                                                  props.provinceValue\r\n                                          )[0].cities\r\n                                }\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <button className=\"modalAcceptButton\">Accept</button>\r\n                    {/* https://stackoverflow.com/questions/41590766/redux-form-always-validates-even-on-a-normal-button-press */}\r\n                    {/* By adding type=\"button\" the button will not be a \"submit\" button */}\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"modalCancelButton\"\r\n                        onClick={props.onCancel}\r\n                    >\r\n                        Cancel\r\n                    </button>\r\n                </form>\r\n            );\r\n        }\r\n    };\r\n    return <React.Fragment>{renderFields()}</React.Fragment>;\r\n};\r\n\r\nconst validate = (formValues: SearchFilterFormValues) => {\r\n    //MUST BE NAMED VALIDATE! Other names would be ignored by reduxForm(..)\r\n    const errors = {};\r\n    //If you return an empty object, redux form will assume everything is ok\r\n    return errors;\r\n};\r\n\r\nconst selector = formValueSelector(\"searchFilterForm\");\r\nconst mapStateToProps = (state: StoreState) => {\r\n    return {\r\n        categories: state.categories,\r\n        provinceValue: selector(state, \"province\"),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, { fetchCategoriesForListing })(\r\n    reduxForm<{}, SearchFilterFormProps>({\r\n        form: \"searchFilterForm\",\r\n        validate,\r\n    })(SearchFilterForm)\r\n);\r\n","C:\\projects\\kijiji\\server\\client\\src\\components\\LoadingDots.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\components\\ListingDetail.tsx",["216","217","218","219","220"],"import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport history from \"../browserHistory\";\r\nimport { connect } from \"react-redux\";\r\nimport { StoreState } from \"../reducers\";\r\nimport {\r\n    ListingDetail as ListingDetailType,\r\n    fetchListingDetail,\r\n} from \"../actions\";\r\nimport postAdListingImagePlaceHolder from \"../img/postAdListingImagePlaceHolder.png\";\r\nimport defaultProfilePic from \"../img/defaultProfilePic.jpg\";\r\nimport Loading from \"./Loading\";\r\nimport moment from \"moment\";\r\n\r\ninterface ListingDetailProps {\r\n    fetchListingDetail(listingId: string): void;\r\n    listingDetail: any;\r\n    match: any;\r\n}\r\nconst ListingDetail: React.FC<ListingDetailProps> = (props) => {\r\n    const [showMore, setShowMore] = useState(false);\r\n    useEffect(() => {\r\n        props.fetchListingDetail(props.match.params.id);\r\n    }, []);\r\n\r\n    const renderListingDetail = () => {\r\n        if (!props.listingDetail) {\r\n            return (\r\n                <div className=\"loadingCenter\">\r\n                    <Loading />\r\n                </div>\r\n            );\r\n            //@ts-ignore too lazy to fix ts error, but I get the idea\r\n        } else if (props.listingDetail.error) {\r\n            return (\r\n                <div className=\"serverErrorContainer\">\r\n                    <h3 className=\"serverErrorText\">\r\n                        {\r\n                            //@ts-ignore too lazy to fix ts error, but I get the idea\r\n                            props.listingDetail.error\r\n                        }\r\n                    </h3>\r\n                </div>\r\n            );\r\n        } else {\r\n            const {\r\n                first_name,\r\n                last_name,\r\n                member_since,\r\n                email,\r\n                listing_id,\r\n                listing_name,\r\n                listing_price,\r\n                listing_description,\r\n                category_name,\r\n                listing_image,\r\n                province,\r\n                city,\r\n                street,\r\n                listing_date,\r\n            } = props.listingDetail;\r\n\r\n            return (\r\n                <React.Fragment>\r\n                    <div className=\"listingDetailCategories\">\r\n                        <h3>{`${province} > ${city} > ${street} > ${category_name}`}</h3>\r\n                    </div>\r\n                    <div className=\"listingDetailTitleAndPriceContainer\">\r\n                        <h3 className=\"listingDetailTitle\">{listing_name}</h3>\r\n                        <h3 className=\"listingDetailPrice\">{`$${listing_price}`}</h3>\r\n                    </div>\r\n                    <div className=\"listingDetailInfoAndContactContainer\">\r\n                        <div className=\"listingDetailContainer\">\r\n                            <div className=\"listingDetailImageContainer\">\r\n                                <img\r\n                                    // src={postAdListingImagePlaceHolder}\r\n                                    src={\r\n                                        !listing_image\r\n                                            ? postAdListingImagePlaceHolder\r\n                                            : listing_image\r\n                                    }\r\n                                    onError={(e: any) => {\r\n                                        e.target.src = postAdListingImagePlaceHolder;\r\n                                    }}\r\n                                    alt=\"listing\"\r\n                                />\r\n                            </div>\r\n                            <div className=\"listingDetailDescriptionContainer\">\r\n                                <div className=\"listingDescriptionTextWrap\">\r\n                                    <h3 className=\"listingDetailPostedOn\">\r\n                                        {`Posted On:  ${moment(\r\n                                            listing_date\r\n                                        ).format(\"YYYY/MM/DD\")}`}\r\n                                    </h3>\r\n                                    <h3 className=\"locationOfPost\">{`${province}, ${city}, ${street}`}</h3>\r\n                                    <h3 className=\"listingDetailDescriptionTitle\">\r\n                                        Description\r\n                                    </h3>\r\n\r\n                                    <p>{listing_description}</p>\r\n                                </div>\r\n                                <div\r\n                                    className={\r\n                                        showMore\r\n                                            ? \"\"\r\n                                            : \"listingDetailDescriptionFade\"\r\n                                    }\r\n                                ></div>\r\n                                <h3\r\n                                    className={\r\n                                        showMore\r\n                                            ? \"listingDetailShowMoreTextHide\"\r\n                                            : \"listingDetailShowMoreText\"\r\n                                    }\r\n                                    onClick={() => setShowMore(true)}\r\n                                >\r\n                                    Show More\r\n                                </h3>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"listingDetailContactContainer\">\r\n                            <div className=\"listingDetailProfileImageAndNameWrap\">\r\n                                <img src={defaultProfilePic} alt=\"profile\" />\r\n                                <h3>\r\n                                    {`${first_name}\r\n                                    ${last_name}`}\r\n                                </h3>\r\n                            </div>\r\n                            <div className=\"contactAndMemberWrap\">\r\n                                <h3>{`Contact at: ${email}`}</h3>\r\n                                <h3>{`Member Since: ${moment(\r\n                                    member_since\r\n                                ).format(\"YYYY/MM/DD\")} `}</h3>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </React.Fragment>\r\n            );\r\n        }\r\n    };\r\n    return <React.Fragment>{renderListingDetail()}</React.Fragment>;\r\n};\r\n\r\nconst mapStateToProps = (state: StoreState) => {\r\n    return { listingDetail: state.listingInfo.data };\r\n};\r\n\r\nexport default connect(mapStateToProps, { fetchListingDetail })(ListingDetail);\r\n","C:\\projects\\kijiji\\server\\client\\src\\components\\Profile.tsx",["221","222","223","224","225","226"],"C:\\projects\\kijiji\\server\\client\\src\\reducers\\profileReducer.tsx",["227"],"import {\r\n    ActionTypes,\r\n    UserProfileAction,\r\n    UserProfile,\r\n    ServerError,\r\n} from \"../actions\";\r\n\r\nimport _ from \"lodash\";\r\n\r\nexport interface UserProfileDataResponse {\r\n    data?: UserProfile | ServerError;\r\n}\r\n\r\nconst listingReducer = (\r\n    state: UserProfileDataResponse = {},\r\n    action: UserProfileAction\r\n) => {\r\n    switch (action.type) {\r\n        case ActionTypes.FETCH_USER_PROFILE:\r\n            return { ...state, data: action.payload };\r\n        case ActionTypes.FETCH_USER_PROFILE_ERROR:\r\n            return { ...state, data: action.payload };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default listingReducer;\r\n","C:\\projects\\kijiji\\server\\client\\src\\actions\\profile.tsx",[],"C:\\projects\\kijiji\\server\\client\\src\\components\\EditAd.tsx",["228","229","230","231","232","233","234"],"import React, { useEffect, useState } from \"react\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport requireAuth from \"./requireAuth\";\r\nimport EditOrPostAdForm, { EditOrPostAdFormValues } from \"./EditOrPostAdForm\";\r\nimport { connect } from \"react-redux\";\r\nimport { StoreState } from \"../reducers\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport CookieService from \"../CookieService\";\r\nimport {\r\n    deleteListing,\r\n    editListing,\r\n    validateUserAndGetListingDetail,\r\n} from \"../actions/listing\";\r\nimport { ListingDataResponse } from \"../reducers/listingReducer\";\r\nimport Loading from \"./Loading\";\r\n\r\nimport { ListingDetail as ListingDetailType } from \"../actions\";\r\n\r\nexport interface EditAdProps {\r\n    fetchListingDetail(listingId: string): void;\r\n    editListing(\r\n        formValues: any,\r\n        listingId: string,\r\n        cloudinaryPublicId: string | null\r\n    ): void;\r\n    deleteListing(listingId: string, cloudinaryPublicId: string | null): void;\r\n    validateUserAndGetListingDetail(listingId: string): void;\r\n    match: any;\r\n    listingDetail: ListingDetailType;\r\n}\r\n\r\nconst EditAd: React.FC<EditAdProps> = (props) => {\r\n    useEffect(() => {\r\n        //We should validate if the listing actualy belongs to the user\r\n        props.validateUserAndGetListingDetail(props.match.params.id);\r\n    }, []);\r\n\r\n    const renderContent = () => {\r\n        if (!props.listingDetail) {\r\n            return (\r\n                <div className=\"loadingCenter\">\r\n                    <Loading />\r\n                </div>\r\n            );\r\n        }\r\n        // //too lazy to fix ts error, but I get the idea\r\n        //@ts-ignore\r\n        else if (props.listingDetail.error) {\r\n            return (\r\n                <div className=\"serverErrorContainer\">\r\n                    <h3 className=\"serverErrorText\">\r\n                        {\r\n                            //@ts-ignore\r\n                            props.listingDetail.error\r\n                        }\r\n                    </h3>\r\n                </div>\r\n            );\r\n        } else {\r\n            const {\r\n                listing_name,\r\n                listing_description,\r\n                category_name,\r\n                listing_image,\r\n                province,\r\n                city,\r\n                street,\r\n                listing_price,\r\n            } = props.listingDetail;\r\n\r\n            return (\r\n                <div className=\"editAdPageContainer\">\r\n                    <h1>`Edit Your Ad</h1>\r\n                    <EditOrPostAdForm\r\n                        onSubmit={(formValues: any) =>\r\n                            onEditListing(formValues)\r\n                        }\r\n                        onDelete={onDeleteListing}\r\n                        initialValues={{\r\n                            title: listing_name,\r\n                            description: listing_description,\r\n                            category: category_name,\r\n                            province,\r\n                            city,\r\n                            street,\r\n                            price: listing_price,\r\n                        }}\r\n                        cloudinaryImage={listing_image}\r\n                    />\r\n                </div>\r\n            );\r\n        }\r\n    };\r\n\r\n    const onEditListing = async (formValues: EditOrPostAdFormValues) => {\r\n        console.log(\"editAds\", formValues);\r\n\r\n        if (props.listingDetail.listing_image && formValues.image) {\r\n            let cloudinaryPaths = props.listingDetail.listing_image.split(\"/\");\r\n\r\n            let cloudinaryLastPath = cloudinaryPaths.pop();\r\n            //@ts-ignore, catch block will catch it at editListing, dont worry\r\n            let cloudinaryPublicId = cloudinaryLastPath.split(\".\")[0];\r\n            console.log(\"cloudinaryPublicId\", cloudinaryPublicId);\r\n            props.editListing(\r\n                formValues,\r\n                props.match.params.id,\r\n                cloudinaryPublicId\r\n            );\r\n        } else {\r\n            //If listing does not have initial cloudinary image link (because they made a listing without a picture beforehand\r\n            //or they removed their picture and want to edit their listing picture again)\r\n            //Upload cloudinary image\r\n            props.editListing(formValues, props.match.params.id, null);\r\n        }\r\n    };\r\n\r\n    const onDeleteListing = () => {\r\n        if (props.listingDetail.listing_image) {\r\n            let cloudinaryPaths = props.listingDetail.listing_image.split(\"/\");\r\n            let cloudinaryLastPath = cloudinaryPaths.pop();\r\n            //@ts-ignore\r\n            let cloudinaryPublicId = cloudinaryLastPath.split(\".\")[0];\r\n            props.deleteListing(props.match.params.id, cloudinaryPublicId);\r\n        } else {\r\n            props.deleteListing(props.match.params.id, null);\r\n        }\r\n    };\r\n\r\n    return renderContent();\r\n};\r\n\r\nconst mapStateToProps = (state: StoreState) => {\r\n    return {\r\n        listingDetail: state.listingInfo.data,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n    validateUserAndGetListingDetail,\r\n    deleteListing,\r\n    editListing,\r\n})(requireAuth(EditAd));\r\n","C:\\projects\\kijiji\\server\\client\\src\\components\\EditOrPostAdForm.tsx",["235","236"],"import React, { useRef, useEffect, useState } from \"react\";\r\nimport {\r\n    Field,\r\n    reduxForm,\r\n    reset,\r\n    change,\r\n    FormErrors,\r\n    InjectedFormProps,\r\n} from \"redux-form\";\r\n//compose is used to make it easier to \"organize\" mapStateToProps and redux form\r\nimport { StoreState } from \"../reducers\";\r\nimport { connect } from \"react-redux\";\r\nimport { EditOrPostAdFormProps } from \"./PostAd\";\r\nimport postAdListingImagePlaceHolder from \"../img/postAdListingImagePlaceHolder.png\";\r\nimport { CANADIAN_PROVINCES, CANADIAN_PROVINCE_AND_CITIES } from \"../constants\";\r\nimport { formValueSelector } from \"redux-form\";\r\nimport { fetchCategoriesForListing } from \"../actions\";\r\nimport Loading from \"./Loading\";\r\nimport { SERVER_ERROR_MESSAGE } from \"../constants\";\r\n\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport interface EditOrPostAdFormValues {\r\n    title: string;\r\n    description: string;\r\n    category: string;\r\n    image: any;\r\n    province: string;\r\n    city: string;\r\n    street: string;\r\n    price: number;\r\n}\r\n\r\nconst renderError = ({ error, touched }: any) => {\r\n    if (touched && error) {\r\n        //Touched (for input) will be false at first\r\n        //When clicked and then clicked otuside of the input, it will be true\r\n        return <div className=\"errorText\">{error}</div>;\r\n    }\r\n};\r\n\r\nconst renderAutoFocusTextInput = ({ input, label, meta, placeHolder }: any) => {\r\n    //I think there's a bug with the librrary\r\n    //If we have initialValues set for the form and then we don't have an autofocs on for a field\r\n    //refs such as openFileExplorer will not be generated until a text is actualy focused.\r\n    //If we remove the initialValues, refs will be rendered.\r\n    return (\r\n        <div>\r\n            {/* <label>{label}</label> */}\r\n            <input\r\n                className=\"createPostAdInputs\"\r\n                {...input}\r\n                autoComplete=\"off\"\r\n                autoFocus\r\n            />\r\n            {renderError(meta)}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst renderTextInput = ({ input, label, meta, placeHolder }: any) => {\r\n    //\"component\" property automatically passes props to argument, it has {input properties and meta properties}\r\n    //\"label\" automatically passes props to arguments\r\n    return (\r\n        <div>\r\n            {/* <label>{label}</label> */}\r\n            <input\r\n                className=\"createPostAdInputs\"\r\n                {...input}\r\n                autoComplete=\"off\"\r\n            />\r\n            {renderError(meta)}\r\n        </div>\r\n    );\r\n    //{..input} is shortcut for redux-form; where you take all the input from \"component's\" props and pass it as\r\n    //props to <input>\r\n};\r\n\r\nconst renderTextArea = ({ input, label, meta, placeHolder }: any) => {\r\n    return (\r\n        <div className=\"postAdTextAreaWrap\">\r\n            {/* <label>{label}</label> */}\r\n            <textarea\r\n                className=\"createPostAdTextArea\"\r\n                {...input}\r\n                autoComplete=\"off\"\r\n            />\r\n            {renderError(meta)}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst renderDropDown = ({\r\n    input,\r\n    label,\r\n    meta,\r\n    placeHolder,\r\n    optionValues,\r\n}: any) => {\r\n    return (\r\n        <div>\r\n            {/* <label>{label}</label> */}\r\n            <select\r\n                className=\"createPostAdDropDown\"\r\n                {...input}\r\n                autoComplete=\"off\"\r\n            >\r\n                <option></option>\r\n                {optionValues.map((val: string) => (\r\n                    <option key={val} value={val}>\r\n                        {val}\r\n                    </option>\r\n                ))}\r\n            </select>\r\n\r\n            {renderError(meta)}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst formatAmount = (input: string) => {\r\n    //For price input, from: https://blog.harveydelaney.com/redux-form-lifecycle-example/\r\n    if (!input) return;\r\n    if (isNaN(parseInt(input[input.length - 1], 10))) {\r\n        return input.slice(0, -1);\r\n    }\r\n    return input.replace(/,/g, \"\").replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n};\r\n\r\nconst normalizeAmount = (val: string) => {\r\n    //For price input, from: https://blog.harveydelaney.com/redux-form-lifecycle-example/\r\n    return val.replace(/,/g, \"\");\r\n};\r\n\r\nconst renderFieldSectionLayout = (title: string, children: JSX.Element) => {\r\n    return (\r\n        <div className=\"postAdFieldSection\">\r\n            <div className=\"postAdFieldTitleWrap\">\r\n                <h1>{title}</h1>\r\n            </div>\r\n            {children}\r\n        </div>\r\n    );\r\n};\r\nconst PostAdForm: React.FC<\r\n    EditOrPostAdFormProps & InjectedFormProps<{}, EditOrPostAdFormProps>\r\n> = (props) => {\r\n    const location = useLocation();\r\n    const openFileExplorer = useRef(null);\r\n    const [listingImage, setListingImage] = useState<string | null>(null);\r\n    const [cloudinaryImage, setCloudinaryImage] = useState<string | null>(null);\r\n    useEffect(() => {\r\n        props.fetchCategoriesForListing();\r\n        if (props.cloudinaryImage) setCloudinaryImage(props.cloudinaryImage);\r\n        //  props.dispatch(change(\"postAdForm\", \"price\", props.listingPrice));\r\n        // props.dispatch(change(\"postAdForm\", \"description\", \"hi\"));\r\n    }, []);\r\n\r\n    const onSubmit = (formValues: any, dispatch: any) => {\r\n        props.onSubmit(formValues);\r\n    };\r\n\r\n    const renderImageUpload = ({\r\n        input,\r\n        label,\r\n        meta,\r\n        placeHolder,\r\n        optionValues,\r\n    }: any) => {\r\n        //We cannot pass in {...input} (so that the input is submited when onSubmit button is clicked) like our other renders because <input> has type=\"file\"\r\n        //Must do this instead: https://github.com/redux-form/redux-form/issues/3686\r\n        //We do not have a name in <input> so that redux won't complain with validate (thus making this input optional)\r\n\r\n        return (\r\n            <input\r\n                type=\"file\"\r\n                accept=\"image/*\"\r\n                style={{ display: \"none\" }}\r\n                ref={openFileExplorer}\r\n                onChange={(...args) => {\r\n                    //The input's text dosen't change but the input is actually inserted (do formValues.image below)\r\n                    //  let event = args.map((val) => val.nativeEvent)[0];\r\n                    input.onChange(...args);\r\n                    //@ts-ignore\r\n                    // setListingImage(URL.createObjectURL(event.target.files[0]));\r\n                    //chagne also dosen't change the textbox input\r\n                    // props.dispatch(\r\n                    //     change(\"postAdForm\", \"image\", event.target.files[0])\r\n                    // );\r\n                }}\r\n            />\r\n        );\r\n    };\r\n\r\n    const renderImage = () => {\r\n        if (cloudinaryImage) {\r\n            return {\r\n                backgroundImage: `url(${cloudinaryImage}), url(${postAdListingImagePlaceHolder})`,\r\n                backgroundPosition: \"center\",\r\n                backgroundSize: \"cover\",\r\n                backgroundColor: \"white\",\r\n            };\r\n        } else if (!cloudinaryImage && listingImage) {\r\n            return {\r\n                backgroundImage: `url(${listingImage}), url(${postAdListingImagePlaceHolder})`,\r\n                backgroundPosition: \"center\",\r\n                backgroundSize: \"cover\",\r\n                backgroundColor: \"white\",\r\n            };\r\n        } else {\r\n            return {\r\n                backgroundImage: `url(${postAdListingImagePlaceHolder})`,\r\n            };\r\n        }\r\n    };\r\n\r\n    const renderFields = (): JSX.Element => {\r\n        if (props.categories.length === 0) {\r\n            return (\r\n                <div className=\"loadingCenter\">\r\n                    <Loading />\r\n                </div>\r\n            );\r\n        } else if (props.categories[0] === SERVER_ERROR_MESSAGE) {\r\n            return (\r\n                <div className=\"serverErrorContainer\">\r\n                    <h3 className=\"serverErrorText\">{props.categories[0]}</h3>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <form\r\n                    className=\"postAdForm\"\r\n                    onSubmit={props.handleSubmit(onSubmit)}\r\n                >\r\n                    {renderFieldSectionLayout(\r\n                        \"Ad Title\",\r\n                        <Field\r\n                            name=\"title\"\r\n                            type=\"text\"\r\n                            // label=\"Ad Title\"\r\n\r\n                            component={renderAutoFocusTextInput}\r\n                        />\r\n                    )}\r\n                    {renderFieldSectionLayout(\r\n                        \"Description\",\r\n                        <Field\r\n                            name=\"description\"\r\n                            type=\"text\"\r\n                            component={renderTextArea}\r\n                        />\r\n                    )}\r\n                    {renderFieldSectionLayout(\r\n                        \"Category\",\r\n                        <Field\r\n                            name=\"category\"\r\n                            component={renderDropDown}\r\n                            optionValues={props.categories}\r\n                        ></Field>\r\n                    )}\r\n\r\n                    {renderFieldSectionLayout(\r\n                        \"Add a photo for your ad\",\r\n                        <React.Fragment>\r\n                            <Field\r\n                                name=\"image\"\r\n                                type=\"file\"\r\n                                component={renderImageUpload}\r\n                                //@ts-ignore dont worry\r\n                                value={listingImage}\r\n                                ref={openFileExplorer}\r\n                                withRef\r\n                                onChange={(event: any) => {\r\n                                    //For some reason,\r\n                                    //The input's text dosen't change but the input is actually inserted (do formValues.image below)\r\n                                    setCloudinaryImage(null);\r\n                                    setListingImage(\r\n                                        URL.createObjectURL(\r\n                                            event.target.files[0]\r\n                                        )\r\n                                    );\r\n\r\n                                    // console.log(\r\n                                    //     `Selected file - ${event.target.files[0].name}`\r\n                                    // );\r\n                                    //https://medium.com/@650egor/react-30-day-challenge-day-2-image-upload-preview-2d534f8eaaa\r\n                                }}\r\n                            />\r\n                            <div className=\"imageUploadWrapper\">\r\n                                <input\r\n                                    type=\"button\"\r\n                                    value={\r\n                                        listingImage || cloudinaryImage\r\n                                            ? \"\"\r\n                                            : \"Choose Files!\"\r\n                                    }\r\n                                    className=\"postAdChooseListingImage\"\r\n                                    onClick={() => {\r\n                                        // @ts-ignore\r\n                                        openFileExplorer.current.click();\r\n                                    }}\r\n                                    style={renderImage()}\r\n                                />\r\n\r\n                                {(listingImage || props.cloudinaryImage) && (\r\n                                    <h3\r\n                                        className=\"removeUploadedImage\"\r\n                                        onClick={() => {\r\n                                            setListingImage(null);\r\n                                            setCloudinaryImage(null);\r\n                                            props.dispatch(\r\n                                                change(\r\n                                                    \"postAdForm\",\r\n                                                    \"image\",\r\n                                                    null\r\n                                                )\r\n                                            );\r\n                                        }}\r\n                                    >\r\n                                        Remove\r\n                                    </h3>\r\n                                )}\r\n                            </div>\r\n                        </React.Fragment>\r\n                    )}\r\n                    {renderFieldSectionLayout(\r\n                        \"Province\",\r\n                        <Field\r\n                            name=\"province\"\r\n                            type=\"text\"\r\n                            component={renderDropDown}\r\n                            optionValues={CANADIAN_PROVINCES.map((province) => {\r\n                                return province.name;\r\n                            })}\r\n                        />\r\n                    )}\r\n                    {renderFieldSectionLayout(\r\n                        \"City\",\r\n                        <Field\r\n                            name=\"city\"\r\n                            type=\"text\"\r\n                            component={renderDropDown}\r\n                            optionValues={\r\n                                !props.provinceValue\r\n                                    ? []\r\n                                    : CANADIAN_PROVINCE_AND_CITIES.filter(\r\n                                          (provinceAndCity) =>\r\n                                              provinceAndCity.province ===\r\n                                              props.provinceValue\r\n                                      )[0].cities\r\n                            }\r\n                        />\r\n                    )}\r\n                    {renderFieldSectionLayout(\r\n                        \"Street\",\r\n                        <Field\r\n                            name=\"street\"\r\n                            type=\"text\"\r\n                            component={renderTextInput}\r\n                        />\r\n                    )}\r\n\r\n                    {renderFieldSectionLayout(\r\n                        \"Price ($ CAD)\",\r\n                        <Field\r\n                            name=\"price\"\r\n                            type=\"text\"\r\n                            component={renderTextInput}\r\n                            format={formatAmount}\r\n                            normalize={normalizeAmount}\r\n                        />\r\n                    )}\r\n\r\n                    <button className=\"postAdFormSubmit\">\r\n                        {location.pathname === \"/post-ad\"\r\n                            ? \"Post Your Ad\"\r\n                            : \"Edit Your Ad\"}\r\n                    </button>\r\n                    {location.pathname === \"/post-ad\" ? (\r\n                        \"\"\r\n                    ) : (\r\n                        <button\r\n                            className=\"deleteAd\"\r\n                            type=\"button\"\r\n                            onClick={props.onDelete}\r\n                        >\r\n                            Delete Ad\r\n                        </button>\r\n                    )}\r\n                </form>\r\n            );\r\n        }\r\n    };\r\n\r\n    return <React.Fragment>{renderFields()}</React.Fragment>;\r\n};\r\n\r\nconst validate = (\r\n    formValues: EditOrPostAdFormValues\r\n): FormErrors<EditOrPostAdFormValues> => {\r\n    //MUST BE NAMED VALIDATE! Other names would be ignored by reduxForm(..)\r\n    const errors: FormErrors<EditOrPostAdFormValues> = {};\r\n    //If you return an empty object, redux form will assume everything is ok\r\n    // console.log(\"FILE UPLOAD VALUE\", formValues.image);\r\n    if (!formValues.title) {\r\n        //user did not enter title, so undefined\r\n        errors.title = \"You must enter a title\";\r\n        //Must be the same name as field name! The \"error\" property in {meta} would receive this\r\n    }\r\n\r\n    if (!formValues.description) {\r\n        errors.description = \"You must enter a description\";\r\n    }\r\n\r\n    if (!formValues.category) {\r\n        errors.category = \"You must enter a category\";\r\n    }\r\n\r\n    if (!formValues.province) {\r\n        errors.province = \"You must enter a province\";\r\n    }\r\n\r\n    if (!formValues.city) {\r\n        errors.city = \"You must enter a city\";\r\n    }\r\n\r\n    if (!formValues.street) {\r\n        errors.street = \"You must enter a street\";\r\n    }\r\n    if (!formValues.price) {\r\n        errors.price = \"You must enter a price\";\r\n    }\r\n\r\n    return errors;\r\n    //Erors is going to be passed to renderInput's meta\r\n};\r\nconst selector = formValueSelector(\"postAdForm\");\r\n//get form values with formvalueSelector\r\n//https://redux-form.com/6.6.0/docs/api/formvalueselector.md/\r\nconst mapStateToProps = (state: StoreState) => {\r\n    return {\r\n        categories: state.categories,\r\n        provinceValue: selector(state, \"province\"),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, { fetchCategoriesForListing })(\r\n    reduxForm<{}, EditOrPostAdFormProps>({\r\n        form: \"postAdForm\",\r\n        validate,\r\n        enableReinitialize: true,\r\n    })(PostAdForm)\r\n);\r\n\r\n//enableReinitialize: true is fo:\r\n//initialState does not re-render unless we eable enableReinitialize: true (pretty sure it has to do with the current redux version because\r\n//our music video stream project work without it)\r\n//https://stackoverflow.com/questions/38881324/redux-form-initialvalues-not-updating-with-state\r\n",{"ruleId":"237","replacedBy":"238"},{"ruleId":"239","replacedBy":"240"},{"ruleId":"241","severity":1,"message":"242","line":2,"column":10,"nodeType":"243","messageId":"244","endLine":2,"endColumn":14},{"ruleId":"241","severity":1,"message":"245","line":1,"column":17,"nodeType":"243","messageId":"244","endLine":1,"endColumn":26},{"ruleId":"241","severity":1,"message":"246","line":1,"column":28,"nodeType":"243","messageId":"244","endLine":1,"endColumn":36},{"ruleId":"241","severity":1,"message":"242","line":2,"column":10,"nodeType":"243","messageId":"244","endLine":2,"endColumn":14},{"ruleId":"241","severity":1,"message":"247","line":2,"column":16,"nodeType":"243","messageId":"244","endLine":2,"endColumn":27},{"ruleId":"241","severity":1,"message":"248","line":7,"column":25,"nodeType":"243","messageId":"244","endLine":7,"endColumn":32},{"ruleId":"241","severity":1,"message":"249","line":8,"column":8,"nodeType":"243","messageId":"244","endLine":8,"endColumn":18},{"ruleId":"241","severity":1,"message":"250","line":9,"column":8,"nodeType":"243","messageId":"244","endLine":9,"endColumn":21},{"ruleId":"241","severity":1,"message":"251","line":11,"column":8,"nodeType":"243","messageId":"244","endLine":11,"endColumn":15},{"ruleId":"252","severity":1,"message":"253","line":29,"column":8,"nodeType":"254","endLine":29,"endColumn":10,"suggestions":"255"},{"ruleId":"252","severity":1,"message":"253","line":28,"column":8,"nodeType":"254","endLine":28,"endColumn":10,"suggestions":"256"},{"ruleId":"241","severity":1,"message":"247","line":6,"column":10,"nodeType":"243","messageId":"244","endLine":6,"endColumn":21},{"ruleId":"241","severity":1,"message":"257","line":1,"column":17,"nodeType":"243","messageId":"244","endLine":1,"endColumn":30},{"ruleId":"241","severity":1,"message":"245","line":1,"column":32,"nodeType":"243","messageId":"244","endLine":1,"endColumn":41},{"ruleId":"241","severity":1,"message":"258","line":5,"column":5,"nodeType":"243","messageId":"244","endLine":5,"endColumn":10},{"ruleId":"241","severity":1,"message":"259","line":6,"column":5,"nodeType":"243","messageId":"244","endLine":6,"endColumn":11},{"ruleId":"241","severity":1,"message":"260","line":11,"column":10,"nodeType":"243","messageId":"244","endLine":11,"endColumn":20},{"ruleId":"241","severity":1,"message":"257","line":1,"column":17,"nodeType":"243","messageId":"244","endLine":1,"endColumn":30},{"ruleId":"241","severity":1,"message":"245","line":1,"column":32,"nodeType":"243","messageId":"244","endLine":1,"endColumn":41},{"ruleId":"241","severity":1,"message":"258","line":5,"column":5,"nodeType":"243","messageId":"244","endLine":5,"endColumn":10},{"ruleId":"241","severity":1,"message":"259","line":6,"column":5,"nodeType":"243","messageId":"244","endLine":6,"endColumn":11},{"ruleId":"241","severity":1,"message":"261","line":6,"column":5,"nodeType":"243","messageId":"244","endLine":6,"endColumn":34},{"ruleId":"241","severity":1,"message":"250","line":5,"column":8,"nodeType":"243","messageId":"244","endLine":5,"endColumn":21},{"ruleId":"241","severity":1,"message":"262","line":8,"column":8,"nodeType":"243","messageId":"244","endLine":8,"endColumn":9},{"ruleId":"241","severity":1,"message":"263","line":2,"column":10,"nodeType":"243","messageId":"244","endLine":2,"endColumn":13},{"ruleId":"241","severity":1,"message":"242","line":2,"column":10,"nodeType":"243","messageId":"244","endLine":2,"endColumn":14},{"ruleId":"241","severity":1,"message":"264","line":3,"column":8,"nodeType":"243","messageId":"244","endLine":3,"endColumn":15},{"ruleId":"241","severity":1,"message":"265","line":16,"column":8,"nodeType":"243","messageId":"244","endLine":16,"endColumn":19},{"ruleId":"241","severity":1,"message":"266","line":17,"column":23,"nodeType":"243","messageId":"244","endLine":17,"endColumn":32},{"ruleId":"252","severity":1,"message":"267","line":206,"column":8,"nodeType":"254","endLine":206,"endColumn":41,"suggestions":"268"},{"ruleId":"241","severity":1,"message":"242","line":2,"column":10,"nodeType":"243","messageId":"244","endLine":2,"endColumn":14},{"ruleId":"241","severity":1,"message":"246","line":1,"column":17,"nodeType":"243","messageId":"244","endLine":1,"endColumn":25},{"ruleId":"269","severity":1,"message":"270","line":34,"column":51,"nodeType":"271","messageId":"272","endLine":34,"endColumn":53},{"ruleId":"241","severity":1,"message":"242","line":2,"column":10,"nodeType":"243","messageId":"244","endLine":2,"endColumn":14},{"ruleId":"241","severity":1,"message":"273","line":11,"column":10,"nodeType":"243","messageId":"244","endLine":11,"endColumn":16},{"ruleId":"241","severity":1,"message":"274","line":11,"column":18,"nodeType":"243","messageId":"244","endLine":11,"endColumn":25},{"ruleId":"275","severity":1,"message":"276","line":54,"column":29,"nodeType":"277","messageId":"278","endLine":54,"endColumn":31},{"ruleId":"252","severity":1,"message":"279","line":107,"column":8,"nodeType":"254","endLine":107,"endColumn":10,"suggestions":"280"},{"ruleId":"275","severity":1,"message":"276","line":113,"column":48,"nodeType":"277","messageId":"278","endLine":113,"endColumn":50},{"ruleId":"241","severity":1,"message":"281","line":1,"column":8,"nodeType":"243","messageId":"244","endLine":1,"endColumn":13},{"ruleId":"241","severity":1,"message":"257","line":1,"column":17,"nodeType":"243","messageId":"244","endLine":1,"endColumn":30},{"ruleId":"241","severity":1,"message":"246","line":1,"column":32,"nodeType":"243","messageId":"244","endLine":1,"endColumn":40},{"ruleId":"252","severity":1,"message":"282","line":66,"column":8,"nodeType":"254","endLine":66,"endColumn":10,"suggestions":"283"},{"ruleId":"241","severity":1,"message":"242","line":2,"column":10,"nodeType":"243","messageId":"244","endLine":2,"endColumn":14},{"ruleId":"241","severity":1,"message":"264","line":3,"column":8,"nodeType":"243","messageId":"244","endLine":3,"endColumn":15},{"ruleId":"241","severity":1,"message":"284","line":7,"column":22,"nodeType":"243","messageId":"244","endLine":7,"endColumn":39},{"ruleId":"252","severity":1,"message":"282","line":24,"column":8,"nodeType":"254","endLine":24,"endColumn":10,"suggestions":"285"},{"ruleId":"241","severity":1,"message":"286","line":51,"column":17,"nodeType":"243","messageId":"244","endLine":51,"endColumn":27},{"ruleId":"241","severity":1,"message":"246","line":1,"column":28,"nodeType":"243","messageId":"244","endLine":1,"endColumn":36},{"ruleId":"241","severity":1,"message":"242","line":2,"column":10,"nodeType":"243","messageId":"244","endLine":2,"endColumn":14},{"ruleId":"241","severity":1,"message":"264","line":3,"column":8,"nodeType":"243","messageId":"244","endLine":3,"endColumn":15},{"ruleId":"241","severity":1,"message":"284","line":6,"column":27,"nodeType":"243","messageId":"244","endLine":6,"endColumn":44},{"ruleId":"241","severity":1,"message":"287","line":7,"column":8,"nodeType":"243","messageId":"244","endLine":7,"endColumn":37},{"ruleId":"252","severity":1,"message":"282","line":23,"column":8,"nodeType":"254","endLine":23,"endColumn":10,"suggestions":"288"},{"ruleId":"241","severity":1,"message":"262","line":8,"column":8,"nodeType":"243","messageId":"244","endLine":8,"endColumn":9},{"ruleId":"241","severity":1,"message":"246","line":1,"column":28,"nodeType":"243","messageId":"244","endLine":1,"endColumn":36},{"ruleId":"241","severity":1,"message":"242","line":2,"column":10,"nodeType":"243","messageId":"244","endLine":2,"endColumn":14},{"ruleId":"241","severity":1,"message":"247","line":2,"column":16,"nodeType":"243","messageId":"244","endLine":2,"endColumn":27},{"ruleId":"241","severity":1,"message":"249","line":7,"column":8,"nodeType":"243","messageId":"244","endLine":7,"endColumn":18},{"ruleId":"241","severity":1,"message":"250","line":8,"column":8,"nodeType":"243","messageId":"244","endLine":8,"endColumn":21},{"ruleId":"241","severity":1,"message":"289","line":14,"column":10,"nodeType":"243","messageId":"244","endLine":14,"endColumn":29},{"ruleId":"252","severity":1,"message":"282","line":36,"column":8,"nodeType":"254","endLine":36,"endColumn":10,"suggestions":"290"},{"ruleId":"241","severity":1,"message":"258","line":5,"column":5,"nodeType":"243","messageId":"244","endLine":5,"endColumn":10},{"ruleId":"252","severity":1,"message":"282","line":157,"column":8,"nodeType":"254","endLine":157,"endColumn":10,"suggestions":"291"},"no-native-reassign",["292"],"no-negated-in-lhs",["293"],"@typescript-eslint/no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useState' is defined but never used.","'useLocation' is defined but never used.","'Listing' is defined but never used.","'jwt_decode' is defined but never used.","'CookieService' is defined but never used.","'Loading' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.authStatus'. Either include it or remove the dependency array.","ArrayExpression",["294"],["295"],"'ComponentType' is defined but never used.","'reset' is defined but never used.","'change' is defined but never used.","'StoreState' is defined but never used.","'UploadImageToCloudinaryAction' is defined but never used.","'_' is defined but never used.","'css' is defined but never used.","'history' is defined but never used.","'queryString' is defined but never used.","'useParams' is defined but never used.","React Hook useEffect has missing dependencies: 'currentPage', 'props', and 'selectedSort'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["296"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'filter' is defined but never used.","'initial' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'queryValues.category', 'queryValues.city', 'queryValues.province', and 'queryValues.search'. Either include them or remove the dependency array.",["297"],"'React' is defined but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["298"],"'ListingDetailType' is defined but never used.",["299"],"'listing_id' is assigned a value but never used.","'postAdListingImagePlaceHolder' is defined but never used.",["300"],"'ListingDataResponse' is defined but never used.",["301"],["302"],"no-global-assign","no-unsafe-negation",{"desc":"303","fix":"304"},{"desc":"303","fix":"305"},{"desc":"306","fix":"307"},{"desc":"308","fix":"309"},{"desc":"310","fix":"311"},{"desc":"310","fix":"312"},{"desc":"310","fix":"313"},{"desc":"310","fix":"314"},{"desc":"310","fix":"315"},"Update the dependencies array to be: [props.authStatus]",{"range":"316","text":"317"},{"range":"318","text":"317"},"Update the dependencies array to be: [currentPage, props, props.match.params.page, search, selectedSort]",{"range":"319","text":"320"},"Update the dependencies array to be: [queryValues.category, queryValues.city, queryValues.province, queryValues.search]",{"range":"321","text":"322"},"Update the dependencies array to be: [props]",{"range":"323","text":"324"},{"range":"325","text":"324"},{"range":"326","text":"324"},{"range":"327","text":"324"},{"range":"328","text":"324"},[908,910],"[props.authStatus]",[888,890],[9422,9455],"[currentPage, props, props.match.params.page, search, selectedSort]",[4017,4019],"[queryValues.category, queryValues.city, queryValues.province, queryValues.search]",[2189,2191],"[props]",[869,871],[925,927],[1326,1328],[5194,5196]]